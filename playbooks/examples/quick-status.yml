---
# Quick Authenticated Status Check for HashiCorp Services
#
# This playbook performs authenticated status checks for Consul, Nomad, and Vault
# to ensure developers can verify both connectivity and authentication.
#
# Usage:
#   uv run ansible-playbook playbooks/assessment/quick-status.yml
#
# Note: Requires INFISICAL_UNIVERSAL_AUTH_CLIENT_ID and INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET environment variables
#
# For unauthenticated connectivity checks, use: mise run status

- name: HashiCorp Services Quick Status Check
  hosts: localhost
  gather_facts: false
  vars:
    # Service endpoints (defined in inventory/environments/all/service-endpoints.yml)
    # These can be overridden via environment variables or extra vars
    consul_addr: "{{ service_endpoints.consul.addr }}"
    nomad_addr: "{{ service_endpoints.nomad.addr }}"
    vault_addr: "{{ service_endpoints.vault.addr }}"

    # Infisical configuration
    infisical_project_id: '7b832220-24c0-45bc-a5f1-ce9794a31259'
    infisical_env: 'prod'

    # Terminal colors for output
    color_green: "\033[32m"
    color_yellow: "\033[33m"
    color_red: "\033[31m"
    color_reset: "\033[0m"

  pre_tasks:
    - name: Enforce dynamic-inventory pattern (no hardcoded IPs)
      ansible.builtin.import_tasks: "{{ playbook_dir }}/../../tasks/validate-no-hardcoded-ips.yml"
      vars:
        validate_allowlist: []
      tags: ['preflight', 'validate']

    - name: Validate service_endpoints are defined
      ansible.builtin.assert:
        that:
          - service_endpoints is defined
          - service_endpoints.consul.addr is defined
          - service_endpoints.nomad.addr is defined
          - service_endpoints.vault.addr is defined
        fail_msg: "service_endpoints.*.addr must be defined (see inventory/environments/all/service-endpoints.yml)"
        success_msg: "Service endpoints found"

  tasks:
    # ========================================
    # Header
    # ========================================
    - name: Display status check header
      ansible.builtin.debug:
        msg: |
          ====================================================
          üîê HashiCorp Services Authenticated Status Check
          ====================================================

    # ========================================
    # Consul Status Check
    # ========================================
    - name: Check Consul status
      block:
        - name: Retrieve Consul ACL token from Infisical
          ansible.builtin.set_fact:
            consul_token: >-
              {{ (lookup('infisical.vault.read_secrets',
                         universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                         universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                         project_id=infisical_project_id,
                         env_slug=infisical_env,
                         path='/apollo-13/consul',
                         secret_name='CONSUL_MASTER_TOKEN')).value }}
          no_log: true
          when: lookup('env', 'CONSUL_HTTP_TOKEN') | default('', true) == ''

        - name: Test Consul connectivity with authentication
          ansible.builtin.uri:
            url: '{{ consul_addr }}/v1/agent/self'
            method: GET
            headers:
              X-Consul-Token: "{{ consul_token | default(lookup('env', 'CONSUL_HTTP_TOKEN')) }}"
            status_code: [200, 403]
          register: consul_result
          ignore_errors: true

        - name: Get Consul leader status
          ansible.builtin.uri:
            url: '{{ consul_addr }}/v1/status/leader'
            method: GET
          register: consul_leader
          ignore_errors: true

        - name: Report Consul status
          ansible.builtin.debug:
            msg: |
              {{ color_green if consul_result.status == 200 else color_red }}üè• Consul Status:{{ color_reset }}
              ‚îú‚îÄ Address: {{ consul_addr }}
              ‚îú‚îÄ Connectivity: {{ '‚úÖ Connected' if consul_result.status is defined else '‚ùå Cannot connect' }}
              ‚îú‚îÄ Authentication: {{ '‚úÖ Valid token' if consul_result.status == 200
                else '‚ö†Ô∏è Invalid token or no ACL' if consul_result.status == 403
                else '‚ùå Failed' }}
              ‚îî‚îÄ Leader: {{ consul_leader.json | default('Unknown') }}

      rescue:
        - name: Report Consul connection failure
          ansible.builtin.debug:
            msg: |
              {{ color_red }}üè• Consul Status:{{ color_reset }}
              ‚îú‚îÄ Address: {{ consul_addr }}
              ‚îî‚îÄ Status: ‚ùå Connection failed - {{ ansible_failed_result.msg | default('Unknown error') }}

    # ========================================
    # Nomad Status Check
    # ========================================
    - name: Check Nomad status
      block:
        - name: Retrieve Nomad ACL token from Infisical (if ACLs enabled)
          ansible.builtin.set_fact:
            nomad_token: >-
              {{ (lookup('infisical.vault.read_secrets',
                         universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                         universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                         project_id=infisical_project_id,
                         env_slug=infisical_env,
                         path='/apollo-13/nomad',
                         secret_name='NOMAD_TOKEN',
                         errors='ignore') | default({})).value | default('') }}
          no_log: true
          when: lookup('env', 'NOMAD_TOKEN') | default('', true) == ''

        - name: Test Nomad connectivity
          ansible.builtin.uri:
            url: '{{ nomad_addr }}/v1/agent/self'
            method: GET
            headers:
              X-Nomad-Token: "{{ nomad_token | default(lookup('env', 'NOMAD_TOKEN', '')) }}"
            status_code: [200, 403]
          register: nomad_result
          ignore_errors: true

        - name: Get Nomad leader status
          ansible.builtin.uri:
            url: '{{ nomad_addr }}/v1/status/leader'
            method: GET
          register: nomad_leader
          ignore_errors: true

        - name: Get Nomad jobs count
          ansible.builtin.uri:
            url: '{{ nomad_addr }}/v1/jobs'
            method: GET
            headers:
              X-Nomad-Token: "{{ nomad_token | default(lookup('env', 'NOMAD_TOKEN', '')) }}"
          register: nomad_jobs
          ignore_errors: true

        - name: Report Nomad status
          ansible.builtin.debug:
            msg: |
              {{ color_green if nomad_result.status == 200
                else color_yellow if nomad_result.status == 403
                else color_red }}üöÄ Nomad Status:{{ color_reset }}
              ‚îú‚îÄ Address: {{ nomad_addr }}
              ‚îú‚îÄ Connectivity: {{ '‚úÖ Connected' if nomad_result.status is defined else '‚ùå Cannot connect' }}
              ‚îú‚îÄ Authentication: {{ '‚úÖ Valid token' if nomad_result.status == 200
                else '‚ö†Ô∏è ACLs may be disabled' if nomad_result.status == 403
                else '‚ùå Failed' }}
              ‚îú‚îÄ Leader: {{ nomad_leader.json | default('Unknown') }}
              ‚îî‚îÄ Jobs: {{ nomad_jobs.json | length if nomad_jobs.json is defined else 'Unable to query' }}

      rescue:
        - name: Report Nomad connection failure
          ansible.builtin.debug:
            msg: |
              {{ color_red }}üöÄ Nomad Status:{{ color_reset }}
              ‚îú‚îÄ Address: {{ nomad_addr }}
              ‚îî‚îÄ Status: ‚ùå Connection failed - {{ ansible_failed_result.msg | default('Unknown error') }}

    # ========================================
    # Vault Status Check
    # ========================================
    - name: Check Vault status
      block:
        - name: Retrieve Vault token from Infisical
          ansible.builtin.set_fact:
            vault_token: >-
              {{ (lookup('infisical.vault.read_secrets',
                         universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                         universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                         project_id=infisical_project_id,
                         env_slug=infisical_env,
                         path='/apollo-13/vault',
                         secret_name='VAULT_PROD_ROOT_TOKEN',
                         errors='ignore') | default({})).value | default('') }}
          no_log: true
          when: lookup('env', 'VAULT_TOKEN') | default('', true) == ''

        - name: Get Vault health status
          ansible.builtin.uri:
            url: '{{ vault_addr }}/v1/sys/health'
            method: GET
            status_code: [200, 429, 501, 503]
          register: vault_health
          ignore_errors: true

        - name: Test Vault authentication (if unsealed)
          ansible.builtin.uri:
            url: '{{ vault_addr }}/v1/auth/token/lookup-self'
            method: GET
            headers:
              X-Vault-Token: "{{ vault_token | default(lookup('env', 'VAULT_TOKEN', '')) }}"
            status_code: [200, 403]
          register: vault_auth
          ignore_errors: true
          when: vault_health.status == 200

        - name: Report Vault status
          ansible.builtin.debug:
            msg: |
              {{ color_green if vault_health.status == 200 and vault_auth.status == 200
                else color_yellow if vault_health.status == 503
                else color_red }}üîê Vault Status:{{ color_reset }}
              ‚îú‚îÄ Address: {{ vault_addr }}
              ‚îú‚îÄ Connectivity: {{ '‚úÖ Connected' if vault_health.status is defined else '‚ùå Cannot connect' }}
              ‚îú‚îÄ Seal Status: {{ '‚úÖ Unsealed' if vault_health.status == 200
                else '‚ö†Ô∏è SEALED' if vault_health.status == 503
                else '‚ùå Error' }}
              ‚îú‚îÄ Authentication: {{ '‚úÖ Valid token' if vault_auth.status == 200
                else '‚ö†Ô∏è Invalid/No token' if vault_auth.status == 403
                else 'N/A (sealed)' if vault_health.status == 503
                else '‚ùå Failed' }}
              ‚îî‚îÄ Version: {{ vault_health.json.version | default('Unknown')
                if vault_health.json is defined else 'Unknown' }}

      rescue:
        - name: Report Vault connection failure
          ansible.builtin.debug:
            msg: |
              {{ color_red }}üîê Vault Status:{{ color_reset }}
              ‚îú‚îÄ Address: {{ vault_addr }}
              ‚îî‚îÄ Status: ‚ùå Connection failed - {{ ansible_failed_result.msg | default('Unknown error') }}

    # ========================================
    # Summary
    # ========================================
    - name: Display summary
      ansible.builtin.debug:
        msg: |

          ====================================================
          üìä Summary
          ====================================================
          ‚Ä¢ Use 'mise run status' for quick connectivity checks
          ‚Ä¢ Ensure Infisical credentials are configured for full access
          ‚Ä¢ Check ADR-2025-08-27 for implementation details

          For more detailed assessments, run:
          ‚Ä¢ ansible-playbook playbooks/assessment/consul-assessment.yml
          ‚Ä¢ ansible-playbook playbooks/assessment/infrastructure-readiness.yml
