---
# Nomad Storage Assessment Playbook
# This playbook queries Nomad clients to assess storage capabilities and configuration
#
# Usage:
# ansible-playbook playbooks/assessment/nomad-storage-assessment.yml -i inventory/doggos-homelab/infisical.proxmox.yml

- name: Nomad Storage Assessment
  hosts: tag_client
  gather_facts: true
  become: false

  vars:
    ansible_become: false  # Override group_vars for this assessment
    report_dir: "{{ playbook_dir }}/../../reports/nomad"
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}"
    nomad_api_endpoint: "http://{{ inventory_hostname }}:4646"
    volume_base_paths:
      - /opt/nomad/volumes
      - /opt/nomad/volumes/dynamic
      - /alloc

  tasks:
    - name: Ensure report directory exists
      delegate_to: localhost
      become: false
      file:
        path: "{{ report_dir }}"
        state: directory
        mode: '0755'
      run_once: true

    # Check Nomad client status
    - name: Query Nomad client status
      uri:
        url: "{{ nomad_api_endpoint }}/v1/agent/self"
        method: GET
      register: nomad_self
      failed_when: false

    # Get node information
    - name: Get Nomad node information
      uri:
        url: "{{ nomad_api_endpoint }}/v1/node/{{ nomad_self.json.stats.client.node_id }}"
        method: GET
      register: nomad_node
      when: nomad_self is success

    # Check for configured host volumes
    - name: Extract host volumes from configuration
      set_fact:
        configured_volumes: "{{ nomad_node.json.HostVolumes | default({}) }}"
      when:
        - nomad_self is success
        - nomad_node is defined

    # Check filesystem storage
    - name: Get filesystem information
      shell: |
        df -h | grep -E '^/dev/' | awk '{print $1 "," $2 "," $3 "," $4 "," $5 "," $6}'
      register: filesystem_info
      changed_when: false

    # Check for existing volume directories
    - name: Check for volume directories
      stat:
        path: "{{ item }}"
      register: volume_paths
      loop: "{{ volume_base_paths }}"

    # List contents of volume directories
    - name: List existing volumes
      find:
        paths: "{{ item.item }}"
        file_type: directory
        recurse: false
      register: existing_volumes
      loop: "{{ volume_paths.results }}"
      when: item.stat.exists | default(false)
      failed_when: false
      loop_control:
        label: "{{ item.item }}"

    # Check for volume usage
    - name: Get volume disk usage
      shell: |
        if [ -d "{{ item }}" ]; then
          du -sh {{ item }}/* 2>/dev/null | head -20
        else
          echo "Directory does not exist"
        fi
      register: volume_usage
      loop: "{{ volume_base_paths }}"
      changed_when: false
      failed_when: false

    # Check for mount points
    - name: Get mount information
      shell: |
        mount | grep -E '(nomad|volumes|alloc)' || echo "No Nomad-related mounts found"
      register: mount_info
      changed_when: false
      failed_when: false

    # Check for loop devices (for dynamic volumes)
    - name: Check loop devices
      shell: |
        losetup -a 2>/dev/null | grep -E '(nomad|volumes)' || echo "No loop devices for Nomad volumes"
      register: loop_devices
      changed_when: false
      failed_when: false

    # Check Nomad client configuration file
    - name: Read Nomad client configuration
      slurp:
        src: /etc/nomad.d/nomad.hcl
      register: nomad_config_raw
      failed_when: false

    # Parse host volume configuration from file
    - name: Extract host volumes from config file
      shell: |
        grep -A5 'host_volume' /etc/nomad.d/nomad.hcl | grep -E '(host_volume|path|read_only)' || echo "No host volumes configured"
      register: config_volumes
      changed_when: false
      failed_when: false

    # Check for CSI plugins
    - name: Query CSI plugins
      uri:
        url: "{{ nomad_api_endpoint }}/v1/plugins?type=csi"
        method: GET
      register: csi_plugins
      failed_when: false

    # Check for dynamic volume plugin scripts
    - name: Check for volume plugin scripts
      stat:
        path: "/opt/nomad/plugins/{{ item }}"
      register: plugin_scripts
      loop:
        - ext4-volume
        - xfs-volume
        - cleanup-orphaned-volumes.sh

    # Compile storage assessment data
    - name: Compile storage assessment
      set_fact:
        storage_assessment:
          node_name: "{{ inventory_hostname }}"
          timestamp: "{{ timestamp }}"
          nomad_client:
            status: "{{ 'healthy' if nomad_self is success else 'unhealthy' }}"
            node_id: "{{ nomad_self.json.stats.client.node_id | default('unknown') }}"
            datacenter: "{{ nomad_self.json.stats.client.dc | default('unknown') }}"

          filesystem:
            devices: "{{ filesystem_info.stdout_lines | default([]) }}"
            mounts: "{{ mount_info.stdout_lines | default([]) }}"

          host_volumes:
            configured: "{{ configured_volumes | default({}) }}"
            config_file: "{{ config_volumes.stdout_lines | default([]) }}"

          volume_directories:
            base_paths: "{{ volume_base_paths }}"
            existing_paths: "{{ volume_paths.results | map(attribute='stat') | map('json_query', '{path: item, exists: exists}') | list }}"

          existing_volumes: "{{ existing_volumes.results | selectattr('files', 'defined') | map(attribute='files') | list | flatten | map(attribute='path') | list }}"

          volume_usage: "{{ volume_usage.results | map(attribute='stdout_lines') | list }}"

          storage_types:
            ephemeral_disk:
              available: true
              path: /alloc/data
              notes: "Always available in Nomad"

            static_host_volumes:
              configured: "{{ configured_volumes | length > 0 }}"
              count: "{{ configured_volumes | length }}"
              volumes: "{{ configured_volumes.keys() | list if configured_volumes else [] }}"

            dynamic_host_volumes:
              plugins_installed: "{{ dict(plugin_scripts.results | map(attribute='item') | zip(plugin_scripts.results | map(attribute='stat.exists') | map('default', false))) }}"
              loop_devices: "{{ loop_devices.stdout_lines | default([]) }}"

            csi_volumes:
              plugins: "{{ csi_plugins.json | default([]) if csi_plugins is success else [] }}"
              configured: "{{ (csi_plugins.json | default([]) | length) > 0 if csi_plugins is success else false }}"

    # Save individual node report
    - name: Save node storage report
      delegate_to: localhost
      become: false
      copy:
        content: "{{ storage_assessment | to_nice_yaml }}"
        dest: "{{ report_dir }}/storage_assessment_node_{{ inventory_hostname }}_{{ timestamp }}.yml"
        mode: '0644'

    # Aggregate all node data
    - name: Aggregate storage data
      delegate_to: localhost
      become: false
      run_once: true
      set_fact:
        all_node_assessments: "{{ hostvars | dict2items | selectattr('value.storage_assessment', 'defined') | map(attribute='value.storage_assessment') | list }}"

    # Create summary report
    - name: Create storage summary report
      delegate_to: localhost
      become: false
      run_once: true
      copy:
        content: |
          # Nomad Storage Assessment Summary
          Generated: {{ timestamp }}
          Environment: doggos-homelab

          ## Cluster Storage Overview

          Total Nodes Assessed: {{ all_node_assessments | length }}

          ### Storage Type Availability

          | Storage Type | Status | Details |
          |--------------|--------|---------|
          | Ephemeral Disk | ‚úÖ Available | Built-in, always available |
          | Static Host Volumes | {{ '‚úÖ Configured' if (all_node_assessments | selectattr('storage_types.static_host_volumes.configured', 'equalto', true) | list | length) > 0 else '‚ùå Not Configured' }} | {{ all_node_assessments | map(attribute='storage_types.static_host_volumes.count') | sum }} volumes total |
          | Dynamic Host Volumes | ‚ùå Not Ready | Plugin scripts not installed |
          | CSI Volumes | {{ '‚úÖ Available' if (all_node_assessments | selectattr('storage_types.csi_volumes.configured', 'equalto', true) | list | length) > 0 else '‚ùå Not Available' }} | {{ all_node_assessments | map(attribute='storage_types.csi_volumes.plugins') | flatten | length }} plugins |

          ### Per-Node Storage Status

          {% for node in all_node_assessments %}
          #### {{ node.node_name }}

          **Filesystem Usage:**
          ```
          {% for line in node.filesystem.devices %}
          {{ line }}
          {% endfor %}
          ```

          **Configured Host Volumes:** {{ node.storage_types.static_host_volumes.count }}
          {% if node.storage_types.static_host_volumes.volumes %}
          {% for vol in node.storage_types.static_host_volumes.volumes %}
          - {{ vol }}
          {% endfor %}
          {% endif %}

          **Volume Directories:**
          {% for path in node.volume_directories.base_paths %}
          - {{ path }}: {{ 'Exists (check individual reports for details)' }}
          {% endfor %}

          {% endfor %}

          ## Recommendations

          {% if (all_node_assessments | selectattr('storage_types.static_host_volumes.configured', 'equalto', false) | list | length) == all_node_assessments | length %}
          ### üö® Critical: No Persistent Storage Configured

          No static host volumes are configured on any Nomad client. This means:
          - All data is ephemeral and will be lost on container restart
          - Stateful services like databases cannot persist data
          - No backup procedures can be implemented

          **Immediate Action Required:**
          ```bash
          # 1. Provision static host volumes
          ansible-playbook playbooks/infrastructure/nomad/volumes/provision-host-volumes.yml \
            -i inventory/doggos-homelab/infisical.proxmox.yml

          # 2. Update Nomad client configuration and restart
          ```
          {% endif %}

          ### ‚ö†Ô∏è  Dynamic Volume Plugins Not Deployed

          Dynamic volume plugin scripts are not installed. To enable:
          ```bash
          ansible-playbook playbooks/infrastructure/nomad/volumes/enable-dynamic-volumes.yml \
            -i inventory/doggos-homelab/infisical.proxmox.yml
          ```

          ---
          Report generated by: nomad-storage-assessment.yml
        dest: "{{ report_dir }}/storage_assessment_summary_{{ timestamp }}.md"
        mode: '0644'

    # Display summary
    - name: Display assessment summary
      delegate_to: localhost
      become: false
      run_once: true
      debug:
        msg: |
          Storage Assessment Complete!

          Reports generated:
          - Summary: {{ report_dir }}/storage_assessment_summary_{{ timestamp }}.md
          - Node reports: {{ all_node_assessments | length }} files

          Key Findings:
          - Ephemeral storage: Available on all nodes
          - Static volumes configured: {{ all_node_assessments | selectattr('storage_types.static_host_volumes.configured', 'equalto', true) | list | length }}/{{ all_node_assessments | length }} nodes
          - Dynamic volume support: Not ready (plugins not installed)
          - CSI support: {{ 'Available' if (all_node_assessments | selectattr('storage_types.csi_volumes.configured', 'equalto', true) | list | length) > 0 else 'Not available' }}
