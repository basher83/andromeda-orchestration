---
# Consul Telemetry Setup for Netdata Monitoring
# Implements the same functionality as the bash script but across the cluster
# Creates ACL policies and tokens for Prometheus/Netdata scraping

- name: Setup Consul Telemetry and Monitoring Access
  hosts: tag_server[0]
  become: true
  gather_facts: false
  
  vars:
    consul_policy_name: prometheus-scraping
    consul_token_description: "Prometheus/Netdata scraping token"
    consul_master_token: >-
      {{ (lookup('infisical.vault.read_secrets',
                 universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                 universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                 project_id='7b832220-24c0-45bc-a5f1-ce9794a31259',
                 env_slug='prod',
                 path='/apollo-13/consul',
                 secret_name='CONSUL_MASTER_TOKEN')).value }}
    
  tasks:
    - name: Create Consul ACL policy for Prometheus scraping
      consul_acl_policy:
        name: "{{ consul_policy_name }}"
        token: "{{ consul_master_token }}"
        rules: |
          # Policy for Prometheus/Netdata scraping
          operator = "read"
          
          node_prefix "" {
            policy = "read"
          }
          
          agent_prefix "" {
            policy = "read"
          }
          
          service_prefix "" {
            policy = "read"
          }
        state: present
      register: acl_policy_result
      
    - name: Create ACL token for Prometheus/Netdata
      consul_acl_token:
        token: "{{ consul_master_token }}"
        accessor_id: "{{ lookup('password', '/dev/null length=36 chars=hexdigits') | lower }}"
        secret_id: "{{ lookup('password', '/dev/null length=36 chars=hexdigits') | lower }}"
        description: "{{ consul_token_description }}"
        policies:
          - name: "{{ consul_policy_name }}"
        state: present
      register: acl_token_result
      
    - name: Store the generated token in Infisical
      uri:
        url: "https://app.infisical.com/api/v3/secrets/raw"
        method: POST
        headers:
          Authorization: "Bearer {{ lookup('env', 'INFISICAL_TOKEN') }}"
        body_format: json
        body:
          workspaceId: "{{ lookup('env', 'INFISICAL_PROJECT_ID') }}"
          environment: "prod"
          secretPath: "/apollo-13/consul"
          secretName: "PROMETHEUS_SCRAPING_TOKEN"
          secretValue: "{{ acl_token_result.secret_id }}"
          secretComment: "Auto-generated by Ansible for Netdata monitoring"
      delegate_to: localhost
      when: acl_token_result.changed

- name: Configure Netdata on all nodes
  hosts: all
  become: true
  gather_facts: true
  
  vars:
    prometheus_token: "{{ hostvars[groups['tag_server'][0]]['acl_token_result']['secret_id'] }}"
    consul_addr: "http://127.0.0.1:8500"
    
  tasks:
    - name: Check if Netdata is installed
      stat:
        path: /etc/netdata
      register: netdata_dir
      
    - name: Configure Netdata Consul collector
      when: netdata_dir.stat.exists
      block:
        - name: Create go.d configuration directory
          file:
            path: /etc/netdata/go.d
            state: directory
            mode: '0755'
            owner: netdata
            group: netdata
            
        - name: Backup existing Consul configuration
          copy:
            src: /etc/netdata/go.d/consul.conf
            dest: "/etc/netdata/go.d/consul.conf.backup.{{ ansible_date_time.epoch }}"
            remote_src: true
            force: false
          failed_when: false
          
        - name: Configure Consul collector
          template:
            src: netdata-consul.conf.j2
            dest: /etc/netdata/go.d/consul.conf
            mode: '0640'
            owner: netdata
            group: netdata
          notify: restart netdata
          
    - name: Verify Consul connectivity
      uri:
        url: "{{ consul_addr }}/v1/agent/metrics"
        headers:
          X-Consul-Token: "{{ prometheus_token }}"
        validate_certs: false
      register: consul_metrics_test
      failed_when: false
      changed_when: false
      
    - name: Report connectivity status
      debug:
        msg: "Consul metrics endpoint {{ 'accessible' if consul_metrics_test.status == 200 else 'not accessible' }}"
        
  handlers:
    - name: restart netdata
      systemd:
        name: netdata
        state: restarted
      when: ansible_service_mgr == "systemd"

- name: Generate audit report
  hosts: tag_server[0]
  become: false
  gather_facts: false
  
  tasks:
    - name: Create telemetry setup report
      copy:
        content: |
          Consul Telemetry Setup Report
          =============================
          Date: {{ ansible_date_time.iso8601 }}
          
          ACL Policy: {{ consul_policy_name }}
          Token Description: {{ consul_token_description }}
          Token Created: {{ acl_token_result.changed | default(false) }}
          
          Nodes Configured:
          {% for host in groups['all'] %}
          - {{ host }}: {{ hostvars[host]['consul_metrics_test']['status'] | default('unknown') }}
          {% endfor %}
          
          Token stored in Infisical at: /apollo-13/consul/PROMETHEUS_SCRAPING_TOKEN
        dest: "{{ playbook_dir }}/../../reports/consul-telemetry-setup-{{ ansible_date_time.date }}.txt"
      delegate_to: localhost