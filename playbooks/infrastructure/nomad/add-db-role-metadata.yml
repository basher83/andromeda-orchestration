---
# Add database role metadata to Nomad client configuration
# This playbook adds the role = db metadata to enable PostgreSQL placement constraints

- name: Add Database Role Metadata to Nomad Client
  hosts: nomad-client-1-lloyd  # Target the specific node with postgres-data volume
  become: true

  tasks:
    - name: Check current Nomad configuration
      stat:
        path: /etc/nomad.d/nomad.hcl
      register: nomad_config

    - name: Read current Nomad configuration
      slurp:
        src: /etc/nomad.d/nomad.hcl
      register: current_config
      when: nomad_config.stat.exists

    - name: Check if metadata is already configured
      set_fact:
        metadata_exists: "{{ 'role = \"db\"' in (current_config.content | b64decode) }}"
      when: nomad_config.stat.exists

    - name: Create client metadata configuration
      copy:
        content: |
          # Client metadata configuration
          # Generated by Ansible on {{ ansible_date_time.iso8601 }}

          client {
            meta {
              role = "db"
              stateful_workloads = "enabled"
              postgres_ready = "true"
            }
          }
        dest: /etc/nomad.d/client-metadata.hcl
        owner: nomad
        group: nomad
        mode: '0644'
      when: not (metadata_exists | default(false))

    - name: Backup current configuration
      copy:
        src: /etc/nomad.d/nomad.hcl
        dest: /etc/nomad.d/nomad.hcl.backup-{{ ansible_date_time.epoch }}
        remote_src: true
      when: nomad_config.stat.exists and not (metadata_exists | default(false))

    - name: Validate Nomad configuration
      command: nomad config validate /etc/nomad.d/
      register: config_validation
      changed_when: false
      failed_when: false

    - name: Display validation result
      debug:
        var: config_validation.stdout_lines
      when: config_validation.stdout_lines is defined

    - name: Restart Nomad client service
      systemd:
        name: nomad
        state: restarted
        daemon_reload: true
      when:
        - config_validation.rc == 0
        - not (metadata_exists | default(false))
      register: nomad_restart

    - name: Wait for Nomad to be ready
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:4646/v1/agent/health"
        method: GET
        status_code: 200
      register: nomad_health
      until: nomad_health.status == 200
      retries: 30
      delay: 2
      when: nomad_restart is changed

    - name: Get node information
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:4646/v1/agent/self"
        method: GET
      register: node_self
      when: nomad_restart is changed or (metadata_exists | default(false))

    - name: Display node metadata
      debug:
        msg: |
          Node metadata configuration:
          {% if node_self.json.config.Client.Meta is defined %}
          {% for key, value in node_self.json.config.Client.Meta.items() %}
          - {{ key }}: {{ value }}
          {% endfor %}
          {% else %}
          No metadata found in client configuration
          {% endif %}
      when: node_self is defined

  post_tasks:
    - name: Summary
      debug:
        msg: |
          Nomad client metadata configuration complete!

          Node: {{ inventory_hostname }}
          Role: Database (db)
          Configuration file: /etc/nomad.d/client-metadata.hcl

          The node is now ready to accept PostgreSQL workloads with:
          constraint {
            attribute = "${node.meta.role}"
            value     = "db"
          }

          Verify with: nomad node status {{ ansible_hostname }}
