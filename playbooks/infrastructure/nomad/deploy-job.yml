---
# Generic Nomad job deployment playbook using Galaxy modules
- name: Deploy Nomad Job
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    nomad_api_endpoint: "{{ lookup('env', 'NOMAD_ADDR') | default('http://192.168.11.11:4646', true) }}"
    job_path: "{{ job | mandatory }}"
    force_start: "{{ force | default(false) }}"
    wait_for_healthy: "{{ wait | default(true) }}"
    nomad_namespace: "default"  # namespace is a reserved word in Jinja2
    # Domain variables will be provided by inventory or can be overridden
    homelab_domain: "{{ hostvars[inventory_hostname]['homelab_domain'] | default('spaceships.work', true) }}"
    cluster_subdomain: "{{ hostvars[inventory_hostname]['cluster_subdomain'] | default('', true) }}"
    fqdn_suffix: "{{ hostvars[inventory_hostname]['fqdn_suffix'] | default(cluster_subdomain + '.' + homelab_domain if cluster_subdomain else homelab_domain, true) }}"

  tasks:
    - name: Validate job file exists
      become: false
      ansible.builtin.stat:
        path: "{{ job_path }}"
      register: job_file
      failed_when: not job_file.stat.exists

    - name: Read job specification
      become: false
      ansible.builtin.slurp:
        src: "{{ job_path }}"
      register: job_spec

    - name: Extract job name from HCL
      ansible.builtin.set_fact:
        job_name: "{{ job_spec.content | b64decode | regex_search('job\\s+\"([^\"]+)\"', '\\1') | first }}"

    - name: Display deployment info
      ansible.builtin.debug:
        msg:
          - "Deploying job: {{ job_name }}"
          - "From file: {{ job_path }}"
          - "To Nomad: {{ nomad_api_endpoint }}"
          - "Force start: {{ force_start }}"

    - name: Parse HCL job with variables
      ansible.builtin.uri:
        url: "{{ nomad_api_endpoint }}/v1/jobs/parse?namespace={{ nomad_namespace }}"
        method: POST
        body_format: json
        body:
          JobHCL: "{{ job_spec.content | b64decode }}"
          Variables:
            homelab_domain: "{{ homelab_domain }}"
            cluster_subdomain: "{{ cluster_subdomain | default('', true) }}"
            fqdn_suffix: "{{ fqdn_suffix | default('', true) }}"
            pdns_db_password: "{{ pdns_db_password | default('', true) }}"
            pdns_api_key: "{{ pdns_api_key | default('', true) }}"
          Canonicalize: true
        headers:
          Content-Type: "application/json"
        status_code: [200, 400, 500]
        validate_certs: "{{ validate_certs | default(true) }}"
      register: parsed_job
      when: job_spec.content | b64decode is search('variable\\s')
      failed_when: false

    - name: Warn if parse failed
      ansible.builtin.debug:
        msg: "Warning: Failed to parse job with variables. Falling back to direct deployment. Error: {{ parsed_job.msg | default('Unknown error') }}"
      when: >
        parsed_job is not skipped and
        (parsed_job is failed or parsed_job.status != 200)

    - name: Deploy job with parsed content
      community.general.nomad_job:
        host: "{{ nomad_api_endpoint | urlsplit('hostname') }}"
        port: "{{ nomad_api_endpoint | urlsplit('port') | default(4646, true) }}"
        use_ssl: "{{ nomad_api_endpoint.startswith('https') }}"
        namespace: "{{ nomad_namespace }}"
        content: "{{ parsed_job.json | to_json }}"
        content_format: json
        state: present
        force_start: "{{ force_start }}"
      register: deploy_result
      when: >
        parsed_job is defined and
        parsed_job is not failed and
        parsed_job.status | default(0) == 200 and
        parsed_job.json is defined

    - name: Deploy job without variables (fallback)
      community.general.nomad_job:
        host: "{{ nomad_api_endpoint | urlsplit('hostname') }}"
        port: "{{ nomad_api_endpoint | urlsplit('port') | default(4646, true) }}"
        use_ssl: "{{ nomad_api_endpoint.startswith('https') }}"
        namespace: "{{ nomad_namespace }}"
        content: "{{ job_spec.content | b64decode }}"
        content_format: hcl
        state: present
        force_start: "{{ force_start }}"
      register: deploy_result
      when: >
        parsed_job is skipped or
        parsed_job is failed or
        (parsed_job.status | default(500)) != 200 or
        parsed_job.json is not defined

    - name: Show deployment result
      ansible.builtin.debug:
        var: deploy_result
      when: deploy_result is defined

    - name: Get initial job info
      community.general.nomad_job_info:
        host: "{{ nomad_api_endpoint | urlsplit('hostname') }}"
        port: "{{ nomad_api_endpoint | urlsplit('port') | default(4646, true) }}"
        use_ssl: "{{ nomad_api_endpoint.startswith('https') }}"
        namespace: "{{ nomad_namespace }}"
        name: "{{ job_name }}"
      register: job_info

    - name: Wait for healthy deployment
      ansible.builtin.uri:
        url: "{{ nomad_api_endpoint }}/v1/job/{{ job_name }}/summary?namespace={{ nomad_namespace }}"
        method: GET
        headers:
          Content-Type: "application/json"
      register: job_summary_status
      until: >
        job_summary_status.json.Summary is defined and
        job_summary_status.json.Summary | json_query('*.Running') | sum > 0
      retries: 30
      delay: 10
      when: wait_for_healthy | bool

    - name: Get job summary for final status
      ansible.builtin.uri:
        url: "{{ nomad_api_endpoint }}/v1/job/{{ job_name }}/summary?namespace={{ nomad_namespace }}"
        method: GET
        headers:
          Content-Type: "application/json"
      register: job_summary
      when: wait_for_healthy | bool

    - name: Display final job status
      ansible.builtin.debug:
        msg:
          - "Job deployed successfully!"
          - "Name: {{ job_name }}"
          - "Status: running"
          - "Running allocations: {{ job_summary.json.Summary | json_query('*.Running') | sum }}"
      when: wait_for_healthy | bool

# Usage examples:
# ansible-playbook deploy-job.yml -e job=nomad-jobs/core-infrastructure/traefik.nomad.hcl
# ansible-playbook deploy-job.yml -e job=nomad-jobs/platform-services/powerdns.nomad.hcl -e force=true
# ansible-playbook deploy-job.yml -e job=nomad-jobs/applications/myapp.nomad.hcl -e wait=false
# ansible-playbook deploy-job.yml -e job=nomad-jobs/applications/myapp.nomad.hcl -e namespace=production
# ansible-playbook deploy-job.yml -e job=nomad-jobs/applications/myapp.nomad.hcl -e validate_certs=false  # For dev environments
