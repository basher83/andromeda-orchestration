---
# Emergency fix for broken Nomad client configurations
# This restores from the Ansible template directly
# Usage: uv run ansible-playbook playbooks/infrastructure/nomad/emergency-fix-client-config.yml -i inventory/doggos-homelab/infisical.proxmox.yml

- name: Emergency Fix Nomad Client Configuration
  hosts: tag_client
  become: true
  vars:
    nomad_client_token: "{{ nomad_server_token if node_type.stdout == 'server' else nomad_client_token }}"

  tasks:
    - name: Create emergency Nomad client configuration
      ansible.builtin.copy:
        content: |
          # Nomad client configuration - Emergency restore
          data_dir  = "/opt/nomad/data"
          bind_addr = "0.0.0.0"
          log_level  = "INFO"
          datacenter = "dc1"

          # Advertise on high-speed interface
          advertise {
            http = "{{ inter_device_interface | default(ansible_default_ipv4.address) }}:4646"
            rpc  = "{{ inter_device_interface | default(ansible_default_ipv4.address) }}:4647"
            serf = "{{ inter_device_interface | default(ansible_default_ipv4.address) }}:4648"
          }

          ui {
            enabled = true
          }

          # RPC and dial timeouts
          limits {
            rpc_timeout  = "3s"
            dial_timeout = "3s"
          }

          # Docker plugin
          plugin "docker" {
            config {
              endpoint         = "unix:///var/run/docker.sock"
              allow_privileged = true
              volumes {
                enabled = true
              }
            }
          }

          # Client configuration
          client {
            enabled  = true
            servers  = [
              "192.168.11.11:4647",
              "192.168.11.12:4647",
              "192.168.11.13:4647"
            ]

            network_interface = "eth1"
            cni_path          = "/opt/cni/bin"

            bridge_network_name   = "nomad"
            bridge_network_subnet = "172.26.64.0/20"

            host_network "public" {
              cidr           = "0.0.0.0/0"
              reserved_ports = "22"
            }

            host_volume "nomad-volumes" {
              path      = "/mnt/nomad-volumes"
              read_only = false
            }
          }

          # Consul integration
          consul {
            address = "127.0.0.1:8500"
            token = "{{ nomad_client_token }}"

            # Enable service registration
            auto_advertise = true
            server_auto_join = true
            client_auto_join = true

            # Service names
            server_service_name = "nomad"
            client_service_name = "nomad-client"

            # Enable service checks
            checks_use_advertise = true

            # Service and task identity settings
            service_identity {
              enabled = true
            }

            task_identity {
              enabled = true
            }
          }
        dest: /etc/nomad.d/nomad.hcl
        owner: nomad
        group: nomad
        mode: '0644'
        backup: true

    - name: Include host volumes configuration
      ansible.builtin.shell: |
        # If host-volumes.hcl exists, merge it
        if [ -f /etc/nomad.d/host-volumes.hcl ]; then
          echo "" >> /etc/nomad.d/nomad.hcl
          cat /etc/nomad.d/host-volumes.hcl >> /etc/nomad.d/nomad.hcl
        fi

    - name: Validate configuration
      ansible.builtin.command: nomad config validate /etc/nomad.d/
      register: validation_result
      failed_when: false

    - name: Start Nomad service
      ansible.builtin.systemd:
        name: nomad
        state: started
        daemon_reload: true
      when: validation_result.rc == 0

    - name: Display validation errors if any
      ansible.builtin.debug:
        msg: "Validation failed: {{ validation_result.stderr }}"
      when: validation_result.rc != 0

- name: Verify All Nodes
  hosts: nomad-server-1-lloyd

  tasks:
    - name: Wait for clients to reconnect
      ansible.builtin.pause:
        seconds: 10

    - name: Check all Nomad nodes
      ansible.builtin.command: nomad node status
      register: node_status
      changed_when: false

    - name: Display node status
      ansible.builtin.debug:
        msg:
          - "Nomad client configuration restored!"
          - ""
          - "All Nomad nodes:"
          - "{{ node_status.stdout_lines }}"
          - ""
          - "Ports 80 and 443 are now available for Traefik!"
