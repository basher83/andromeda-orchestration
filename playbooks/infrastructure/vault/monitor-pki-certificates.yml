---
# Monitor PKI certificates issued by Vault and track expiration
# This playbook uses Vault's PKI API to check certificate status and expiration
# Usage:
# uv run ansible-playbook playbooks/infrastructure/vault/monitor-pki-certificates.yml -i inventory/environments/vault-cluster/production.yaml

- name: Monitor PKI Certificates from Vault
  hosts: localhost
  gather_facts: no
  
  vars:
    vault_addr: "https://192.168.10.33:8200"
    vault_token: "{{ lookup('env', 'VAULT_TOKEN') | default(lookup('infisical.vault.read_secrets', universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'), universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'), project_id='7b832220-24c0-45bc-a5f1-ce9794a31259', env_slug='prod', path='/apollo-13/vault', secret_name='VAULT_PROD_ROOT_TOKEN').value, true) }}"
    pki_mount: "pki_int"
    warning_days: 7
    critical_days: 3
    
  tasks:
    - name: List all certificates in PKI engine
      community.hashi_vault.vault_list:
        url: "{{ vault_addr }}"
        auth_method: token
        token: "{{ vault_token }}"
        path: "{{ pki_mount }}/certs"
        validate_certs: false
      register: cert_list
      ignore_errors: true

    - name: Display certificate count
      ansible.builtin.debug:
        msg: "Found {{ cert_list.data.data.keys | length }} certificates in PKI engine"
      when: cert_list is succeeded

    - name: Read each certificate details
      community.hashi_vault.vault_read:
        url: "{{ vault_addr }}"
        auth_method: token
        token: "{{ vault_token }}"
        path: "{{ pki_mount }}/cert/{{ item }}"
        validate_certs: false
      loop: "{{ cert_list.data.data.keys[:10] if cert_list is succeeded else [] }}"
      register: cert_details
      when: cert_list is succeeded

    - name: Parse certificate expiration dates
      ansible.builtin.set_fact:
        cert_info: >-
          {%- set certs = [] -%}
          {%- for cert in cert_details.results | default([]) -%}
            {%- if cert.data is defined and cert.data.data is defined -%}
              {%- set cert_data = cert.data.data.certificate | regex_search('CN=([^,]+)', '\\1') -%}
              {%- set _ = certs.append({
                'serial': item,
                'certificate': cert.data.data.certificate
              }) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ certs }}
      when: cert_details is defined

    - name: Check expiration for Vault node certificates
      ansible.builtin.shell: |
        echo "{{ item.certificate }}" | openssl x509 -noout -enddate -subject 2>/dev/null || echo "Invalid certificate"
      loop: "{{ cert_info | default([]) }}"
      register: cert_expiry_check
      changed_when: false
      when: cert_info is defined

    - name: Process expiration dates
      ansible.builtin.set_fact:
        expiring_certs: >-
          {%- set expiring = [] -%}
          {%- for cert in cert_expiry_check.results | default([]) -%}
            {%- if cert.stdout is defined and 'notAfter=' in cert.stdout -%}
              {%- set expiry_str = cert.stdout | regex_search('notAfter=(.+)', '\\1') | first -%}
              {%- set subject = cert.stdout | regex_search('subject=(.+)', '\\1') | first | default('Unknown') -%}
              {%- set _ = expiring.append({
                'serial': cert.item.serial,
                'subject': subject,
                'expiry': expiry_str
              }) -%}
            {%- endif -%}
          {%- endfor -%}
          {{ expiring }}
      when: cert_expiry_check is defined

    - name: Display certificate expiration summary
      ansible.builtin.debug:
        msg:
          - "====================================="
          - "üìã PKI Certificate Monitoring Report"
          - "====================================="
          - ""
          - "Certificates checked: {{ cert_info | length | default(0) }}"
          - ""
          - "Certificate Details:"
          - "{% for cert in expiring_certs | default([]) %}"
          - "  Serial: {{ cert.serial[:20] }}..."
          - "  Subject: {{ cert.subject }}"
          - "  Expires: {{ cert.expiry }}"
          - "{% endfor %}"
          - ""
          - "Thresholds:"
          - "  Warning: < {{ warning_days }} days"
          - "  Critical: < {{ critical_days }} days"
          - "====================================="

- name: Check Certificates on Vault Nodes
  hosts: vault_production
  gather_facts: no
  
  vars:
    tls_dir: "/opt/vault/tls"
    
  tasks:
    - name: Get certificate serial number from node
      ansible.builtin.shell: |
        openssl x509 -in {{ tls_dir }}/tls.crt -noout -serial | cut -d= -f2
      register: node_cert_serial
      become: true
      changed_when: false

    - name: Get certificate expiration from node
      ansible.builtin.shell: |
        cert_date=$(openssl x509 -in {{ tls_dir }}/tls.crt -noout -enddate | cut -d= -f2)
        cert_epoch=$(date -d "$cert_date" +%s 2>/dev/null || date -j -f "%b %d %T %Y %Z" "$cert_date" +%s)
        now_epoch=$(date +%s)
        days_left=$(( ($cert_epoch - $now_epoch) / 86400 ))
        echo "$days_left"
      register: days_remaining
      become: true
      changed_when: false

    - name: Set certificate status
      ansible.builtin.set_fact:
        cert_status: >-
          {%- if days_remaining.stdout | int <= 3 -%}
          CRITICAL
          {%- elif days_remaining.stdout | int <= 7 -%}
          WARNING
          {%- else -%}
          OK
          {%- endif -%}

    - name: Display node certificate status
      ansible.builtin.debug:
        msg:
          - "Node: {{ inventory_hostname }}"
          - "  Serial: {{ node_cert_serial.stdout }}"
          - "  Days remaining: {{ days_remaining.stdout }}"
          - "  Status: {{ cert_status }}"

- name: Generate Renewal Recommendations
  hosts: localhost
  gather_facts: no
  
  tasks:
    - name: Check if any certificates need renewal
      ansible.builtin.set_fact:
        needs_renewal: "{{ hostvars | dict2items | selectattr('value.cert_status', 'defined') | selectattr('value.cert_status', 'in', ['WARNING', 'CRITICAL']) | list | length > 0 }}"

    - name: Display renewal recommendations
      ansible.builtin.debug:
        msg:
          - "====================================="
          - "üîÑ Certificate Renewal Recommendations"
          - "====================================="
          - ""
          - "{% if needs_renewal %}"
          - "‚ö†Ô∏è  ATTENTION: Some certificates need renewal soon!"
          - ""
          - "Certificates requiring action:"
          - "{% for host in hostvars | dict2items %}"
          - "{% if host.value.cert_status is defined and host.value.cert_status in ['WARNING', 'CRITICAL'] %}"
          - "  - {{ host.key }}: {{ host.value.cert_status }} ({{ host.value.days_remaining.stdout }} days left)"
          - "{% endif %}"
          - "{% endfor %}"
          - ""
          - "To renew certificates, run:"
          - "  uv run ansible-playbook playbooks/infrastructure/vault/replace-self-signed-certificates.yml \\"
          - "    -i inventory/environments/vault-cluster/production.yaml"
          - "{% else %}"
          - "‚úÖ All certificates are healthy"
          - "{% endif %}"
          - ""
          - "Next Steps:"
          - "1. Set up automated monitoring (cron job or Nomad periodic job)"
          - "2. Implement automatic renewal (Issue #100)"
          - "3. Configure alerting for expiring certificates"
          - "====================================="
      when: needs_renewal is defined