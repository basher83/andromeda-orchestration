---
# Manage secrets in Vault
# This playbook safely checks and manages secrets in Vault

- name: Manage Vault Secrets
  hosts: localhost
  gather_facts: true
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    # Vault configuration from environment (set via direnv/.envrc)
    # Derive vault_addr from inventory with IPv6 safety
    _vault_leader_host: "{{ hostvars[(groups.get('vault_production', []) | first)] | default({'ansible_host': ''}) }}"
    vault_addr: >-
      {{ ansible_env.VAULT_ADDR | default(
           ('http://[' ~ _vault_leader_host.ansible_host ~ ']:8200')
           if (_vault_leader_host.ansible_host | ansible.utils.ipaddr('ipv6'))
           else ('http://' ~ _vault_leader_host.ansible_host ~ ':8200'),
           true
         ) }}
    vault_token: '{{ ansible_env.VAULT_TOKEN }}'

  pre_tasks:
    - name: Preflight | Validate no hardcoded IPs in play vars
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/validate-no-hardcoded-ips.yml"
      vars:
        validate_hostlike_vars:
          vault_addr: "{{ vault_addr | default('') }}"
        validate_allowlist: []
      tags: [preflight]

  tasks:
    - name: Check Vault status
      community.hashi_vault.vault_read:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        path: sys/health
      register: vault_health
      no_log: true

    - name: Display Vault health
      ansible.builtin.debug:
        msg: |
          Vault Status:
          - Initialized: {{ vault_health.data.initialized }}
          - Sealed: {{ vault_health.data.sealed }}
          - Version: {{ vault_health.data.version }}

    - name: List mounted secrets engines
      community.hashi_vault.vault_read:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        path: sys/mounts
      register: mounts
      no_log: true

    - name: Display available secrets engines
      ansible.builtin.debug:
        var: mounts.data

    - name: Check for KV engines at common paths
      ansible.builtin.set_fact:
        kv_v1_exists: "{{ 'kv/' in mounts.data }}"
        kv_v2_secret_exists: "{{ 'secret/' in mounts.data and mounts.data['secret/'].type == 'kv' }}"
        kv_v2_version: "{{ mounts.data['secret/'].options.version | default('1') if \
          'secret/' in mounts.data and mounts.data['secret/'].type == 'kv' else 'not_kv' }}"

    - name: Set primary KV engine facts
      ansible.builtin.set_fact:
        primary_kv_path: "{{ 'secret/' if kv_v2_secret_exists else ('kv/' if kv_v1_exists else 'none') }}"
        primary_kv_version: "{{ kv_v2_version if kv_v2_secret_exists else ('1' if kv_v1_exists else 'none') }}"
        kv_exists: '{{ kv_v1_exists or kv_v2_secret_exists }}'

    - name: Display KV engine status
      ansible.builtin.debug:
        msg: |
          KV Engine Status:
          - Primary KV path: {{ primary_kv_path }}
          - KV version: {{ primary_kv_version }}
          - KV v1 at 'kv/': {{ 'Yes' if kv_v1_exists else 'No' }}
          - KV v2 at 'secret/': {{ 'Yes (v' + kv_v2_version + ')' if kv_v2_secret_exists else 'No' }}

    - name: List existing secrets in primary KV engine
      community.hashi_vault.vault_list:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        path: "{{ primary_kv_path | regex_replace('/$', '') }}{{ '/metadata' if primary_kv_version == '2' else '' }}"
      when: kv_exists and primary_kv_path != 'none'
      register: kv_secrets
      failed_when: false
      no_log: true

    - name: Debug kv_secrets structure
      ansible.builtin.debug:
        var: kv_secrets
      when: kv_exists and primary_kv_path != 'none'

    - name: Display existing secrets
      ansible.builtin.debug:
        msg: |
          Existing secrets in {{ primary_kv_path }} (KV v{{ primary_kv_version }}):
          {% if kv_secrets.data is defined %}
          - Vault returned data: {{ 'Yes' if kv_secrets.data else 'No data' }}
          {% else %}
          - No secrets found or unable to list (skipped: {{ kv_secrets.skipped | default('false') }})
          {% endif %}
      when: kv_exists and primary_kv_path != 'none'

    - name: Check for PowerDNS secrets
      community.hashi_vault.vault_read:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        path: "{{ primary_kv_path | regex_replace('/$', '') }}{{ '/data' if primary_kv_version == '2' else '' }}/pdns"
      when: kv_exists and primary_kv_path != 'none'
      register: pdns_secrets
      failed_when: false
      no_log: true

    - name: Display PowerDNS secrets status
      ansible.builtin.debug:
        msg: |
          PowerDNS secrets in {{ primary_kv_path }}pdns:
          {% if pdns_secrets.data is defined %}
          {% if primary_kv_version == '2' and pdns_secrets.data.data is defined %}
          Exists with keys: {{ pdns_secrets.data.data.keys() | list }}
          {% elif primary_kv_version == '1' %}
          Exists with keys: {{ pdns_secrets.data.keys() | list }}
          {% else %}
          Exists but unable to parse keys
          {% endif %}
          {% else %}
          Not found
          {% endif %}
      when: kv_exists and primary_kv_path != 'none'

    - name: Check for PostgreSQL secrets
      community.hashi_vault.vault_read:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        path: "{{ primary_kv_path | regex_replace('/$', '') }}\
          {{ '/data' if primary_kv_version == '2' else '' }}/postgres"
      when: kv_exists and primary_kv_path != 'none'
      register: postgres_secrets
      failed_when: false
      no_log: true

    - name: Display PostgreSQL secrets status
      ansible.builtin.debug:
        msg: |
          PostgreSQL secrets in {{ primary_kv_path }}postgres:
          {% if postgres_secrets.data is defined %}
          {% if primary_kv_version == '2' and postgres_secrets.data.data is defined %}
          Exists with keys: {{ postgres_secrets.data.data.keys() | list }}
          {% elif primary_kv_version == '1' %}
          Exists with keys: {{ postgres_secrets.data.keys() | list }}
          {% else %}
          Exists but unable to parse keys
          {% endif %}
          {% else %}
          Not found
          {% endif %}
      when: kv_exists and primary_kv_path != 'none'
