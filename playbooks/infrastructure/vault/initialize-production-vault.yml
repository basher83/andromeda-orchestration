---
# Initialize Vault in Production Mode with Raft Storage
# Part of Issue #99: Migrate vault-master-lloyd to Production Mode
#
# This playbook initializes vault-master-lloyd in production mode
# with Raft storage backend and proper TLS configuration.

- name: Initialize Vault Master in Production Mode
  hosts: vault-master-lloyd
  gather_facts: yes
  become: yes
  vars:
    vault_config_dir: /etc/vault.d
    vault_data_dir: /opt/vault/data
    vault_tls_dir: /opt/vault/tls
    vault_addr: 'https://{{ ansible_default_ipv4.address }}:8200'
    vault_cluster_addr: 'https://{{ ansible_default_ipv4.address }}:8201'

  tasks:
    - name: Stop Vault dev instance if running
      systemd:
        name: vault-dev
        state: stopped
        enabled: no
      ignore_errors: yes

    - name: Create Vault directories
      file:
        path: '{{ item }}'
        state: directory
        owner: vault
        group: vault
        mode: '0750'
      loop:
        - '{{ vault_config_dir }}'
        - '{{ vault_data_dir }}'
        - '{{ vault_tls_dir }}'
        - /opt/vault/backup

    - name: Create production configuration
      copy:
        content: |
          # Vault Production Configuration
          # Generated by Ansible for vault-master-lloyd

          ui = true

          # Raft storage configuration
          storage "raft" {
            path = "{{ vault_data_dir }}"
            node_id = "vault-master-lloyd"

            # Performance tuning
            performance_multiplier = 1
            max_entry_size = "1MB"

            # Snapshot configuration
            trailing_logs = 10000
            snapshot_threshold = 8192
            snapshot_interval = "120s"

            # Autopilot for automatic dead server cleanup
            autopilot {
              cleanup_dead_servers = true
              last_contact_threshold = "200ms"
              max_trailing_logs = 250
              server_stabilization_time = "10s"
            }
          }

          # HTTPS listener
          listener "tcp" {
            address = "0.0.0.0:8200"
            cluster_address = "0.0.0.0:8201"

            # TLS configuration
            tls_cert_file = "{{ vault_tls_dir }}/tls.crt"
            tls_key_file = "{{ vault_tls_dir }}/tls.key"
            tls_client_ca_file = "{{ vault_tls_dir }}/ca.crt"

            # TLS parameters
            tls_min_version = "tls12"
            tls_cipher_suites = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

            # Performance
            max_request_size = 33554432
            max_request_duration = "30s"
          }

          # API and cluster addresses
          api_addr = "{{ vault_addr }}"
          cluster_addr = "{{ vault_cluster_addr }}"

          # Telemetry
          telemetry {
            prometheus_retention_time = "24h"
            disable_hostname = true
          }

          # Logging
          log_level = "info"
          log_format = "json"

          # Service registration will be configured post-initialization
          # service_registration "consul" {
          #   address = "127.0.0.1:8500"
          #   service = "vault"
          #   service_tags = "master,transit"
          # }
        dest: '{{ vault_config_dir }}/vault.hcl'
        owner: vault
        group: vault
        mode: '0640'
      notify: restart vault

    - name: Check if TLS certificates exist
      stat:
        path: '{{ vault_tls_dir }}/tls.crt'
      register: tls_cert

    - name: Display TLS status
      debug:
        msg: |
          {% if tls_cert.stat.exists %}
          TLS certificates found. Will use existing certificates.
          {% else %}
          WARNING: TLS certificates not found!
          Please run the TLS certificate deployment playbook before starting Vault.
          {% endif %}

    - name: Create systemd service for production Vault
      copy:
        content: |
          [Unit]
          Description=HashiCorp Vault - Production Mode
          Documentation=https://www.vaultproject.io/docs/
          Requires=network-online.target
          After=network-online.target
          ConditionFileNotEmpty={{ vault_config_dir }}/vault.hcl
          StartLimitIntervalSec=60
          StartLimitBurst=3

          [Service]
          Type=notify
          EnvironmentFile=/etc/vault.d/vault.env
          User=vault
          Group=vault
          ProtectSystem=full
          ProtectHome=read-only
          PrivateTmp=yes
          PrivateDevices=yes
          SecureBits=keep-caps
          AmbientCapabilities=CAP_IPC_LOCK
          CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
          NoNewPrivileges=yes
          ExecStart=/usr/local/bin/vault server -config={{ vault_config_dir }}/vault.hcl
          ExecReload=/bin/kill --signal HUP $MAINPID
          KillMode=process
          Restart=on-failure
          RestartSec=5
          TimeoutStopSec=30
          LimitNOFILE=65536
          LimitMEMLOCK=infinity
          KillSignal=SIGINT

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/vault.service
        mode: '0644'

    - name: Create Vault environment file
      copy:
        content: |
          # Vault Environment Variables
          VAULT_ADDR={{ vault_addr }}
          VAULT_CLUSTER_ADDR={{ vault_cluster_addr }}
          VAULT_LOG_LEVEL=info
          VAULT_LOG_FORMAT=json
          GOMAXPROCS=2
        dest: /etc/vault.d/vault.env
        owner: vault
        group: vault
        mode: '0640'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Display initialization status
      debug:
        msg: |
          Vault production configuration created successfully!

          Configuration: {{ vault_config_dir }}/vault.hcl
          Data directory: {{ vault_data_dir }}
          TLS directory: {{ vault_tls_dir }}

          Next steps:
          1. Deploy TLS certificates (run deploy-tls-certificates.yml)
          2. Start Vault service
          3. Initialize Vault cluster
          4. Configure transit engine
          5. Update production nodes to use new transit endpoint

          Service management:
          - Start: systemctl start vault
          - Status: systemctl status vault
          - Logs: journalctl -u vault -f

  handlers:
    - name: restart vault
      systemd:
        name: vault
        state: restarted
        enabled: yes
      when: tls_cert.stat.exists
