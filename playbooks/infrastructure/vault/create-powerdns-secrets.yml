---
# Create PowerDNS and PostgreSQL secrets in Vault
# This playbook creates the necessary secrets for PowerDNS deployment
# Uses environment variables set via direnv/.envrc with Infisical integration

- name: Create PowerDNS Secrets in Vault
  hosts: localhost
  gather_facts: true
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'

    # Vault configuration from environment (set via direnv/.envrc)
    # Derive vault_addr from inventory with IPv6 safety
    _vault_leader_host: "{{ hostvars[(groups.get('vault_production', []) | first)] | default({'ansible_host': ''}) }}"
    vault_addr: >-
      {{ ansible_env.VAULT_ADDR | default(
           ('http://[' ~ _vault_leader_host.ansible_host ~ ']:8200')
           if (_vault_leader_host.ansible_host | ansible.utils.ipaddr('ipv6'))
           else ('http://' ~ _vault_leader_host.ansible_host ~ ':8200'),
           true
         ) }}
    vault_token: '{{ ansible_env.VAULT_TOKEN }}'

    # Generate secure passwords without creating temporary files
    secrets:
      pdns_db_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=24') }}"
      pdns_api_key: "{{ lookup('password', '/dev/null chars=hexdigits length=32') }}"
      postgres_superuser_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=24') }}"

  pre_tasks:
    - name: Preflight | Validate no hardcoded IPs in play vars
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/validate-no-hardcoded-ips.yml"
      vars:
        validate_hostlike_vars:
          vault_addr: "{{ vault_addr | default('') }}"
        validate_allowlist: []
      tags: [preflight]

    - name: Validate required environment variables
      ansible.builtin.fail:
        msg: >-
          Required environment variable {{ item }} is not set.
          Ensure .envrc is loaded with 'direnv allow' and contains Infisical integration.
      when: ansible_env[item] is not defined or ansible_env[item] == ""
      loop:
        - VAULT_TOKEN
        - VAULT_ADDR

    - name: Display environment status
      ansible.builtin.debug:
        msg: |
          Environment Status:
          - VAULT_ADDR: {{ vault_addr }}
          - VAULT_TOKEN: [SET - {{ ansible_env.VAULT_TOKEN[:8] }}...{{ ansible_env.VAULT_TOKEN[-4:] }}]
          - Infisical Auth: >-
              {{ 'Configured' if ansible_env.INFISICAL_UNIVERSAL_AUTH_CLIENT_ID is defined
                 else 'Not configured' }}

  tasks:
    - name: Confirm secret creation
      ansible.builtin.pause:
        prompt: |

          This will create the following secrets in Vault at {{ vault_addr }}:
          - secret/pdns (PowerDNS database credentials and API key)
          - secret/postgres (PostgreSQL superuser password)

          Press Enter to continue or Ctrl+C to abort

    - name: Test Vault connectivity
      ansible.builtin.uri:
        url: '{{ vault_addr }}/v1/sys/health'
        method: GET
        timeout: 10
      register: vault_health
      failed_when: vault_health.status not in [200, 429, 472, 473]

    - name: Create PowerDNS secrets in Vault KV v2
      community.hashi_vault.vault_kv2_write:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        engine_mount_point: secret
        path: pdns
        data:
          db_password: '{{ secrets.pdns_db_password }}'
          api_key: '{{ secrets.pdns_api_key }}'
      register: pdns_secret_result
      no_log: true

    - name: Create PostgreSQL secrets in Vault KV v2
      community.hashi_vault.vault_kv2_write:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        engine_mount_point: secret
        path: postgres
        data:
          superuser_password: '{{ secrets.postgres_superuser_password }}'
      register: postgres_secret_result
      no_log: true

    - name: Verify PowerDNS secrets were created
      community.hashi_vault.vault_kv2_get:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        engine_mount_point: secret
        path: pdns
      register: pdns_verify
      no_log: true

    - name: Verify PostgreSQL secrets were created
      community.hashi_vault.vault_kv2_get:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        engine_mount_point: secret
        path: postgres
      register: postgres_verify
      no_log: true

    - name: Display success message
      ansible.builtin.debug:
        msg: |
          âœ… Secrets successfully created in Vault!

          PowerDNS secrets (secret/pdns):
          - db_password: [REDACTED - {{ pdns_verify.secret.data.db_password | length }} chars]
          - api_key: [REDACTED - {{ pdns_verify.secret.data.api_key | length }} chars]

          PostgreSQL secrets (secret/postgres):
          - superuser_password: [REDACTED - {{ postgres_verify.secret.data.superuser_password | length }} chars]

          To retrieve these secrets:
          vault kv get secret/pdns
          vault kv get secret/postgres

          Current Consul KV configuration for PowerDNS:
          - pdns/db/host = 192.168.11.20
          - pdns/db/port = 26560
          - pdns/db/name = powerdns
          - pdns/db/user = pdns

          Next step: Deploy PowerDNS using these secrets

  handlers:
    - name: Clean up temporary files
      ansible.builtin.file:
        path: '{{ item }}'
        state: absent
      loop:
        - /tmp/pdns_db_password
        - /tmp/pdns_api_key
        - /tmp/postgres_password
      listen: 'cleanup temp files'
