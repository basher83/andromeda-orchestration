---
# Deploy HashiCorp Vault Production Cluster using Standardized Role
#
# This playbook uses the vault Ansible role to deploy Vault with:
# - Raft integrated storage for HA
# - Transit auto-unseal pointing to master vault
# - Proper security hardening and configuration
#
# Usage:
#   uv run ansible-playbook playbooks/infrastructure/vault/deploy-vault-prod.yml \
#     -i inventory/environments/vault-cluster/production.yaml \
#     -e target_hosts=vault_production
#
# Prerequisites:
# - Master vault running in dev mode with transit engine enabled
# - Transit token configured in Infisical
# - SSH access to production nodes
#
# Tags:
# - vault-deploy: Deploy and configure Vault using the role
# - vault-verify: Post-deployment verification

- name: Deploy Vault Production Cluster
  hosts: "{{ target_hosts | default('vault_production') }}"
  become: true
  gather_facts: true
  serial: 1 # Deploy one node at a time for controlled Raft formation
  any_errors_fatal: true

  pre_tasks:
    - name: Validate no hardcoded IPs
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/validate-no-hardcoded-ips.yml"
      vars:
        validate_hostlike_vars:
          vault_api_url: "http://{{ ansible_default_ipv4.address | default('') }}:{{ vault_port | default(8200) }}"
        validate_allowlist: []
      tags: [validate, preflight]

    - name: Include domain validation
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/domain-assertions.yml"
      tags: [validate, preflight]

    - name: Verify production deployment prerequisites
      ansible.builtin.assert:
        that:
          - ansible_distribution in ['Ubuntu', 'Debian', 'RedHat', 'Rocky']
          - ansible_memtotal_mb >= 512
          - vault_mode is defined and vault_mode == "production"
          - vault_role is defined and vault_role == "production"
        fail_msg: 'Production deployment requires supported OS, minimum 512MB RAM, and vault_role=production'
        success_msg: "Prerequisites validated for {{ ansible_hostname }}"
      tags: [validate, preflight]

    - name: Check for existing Vault data
      ansible.builtin.stat:
        path: "{{ vault_data_dir | default('/opt/vault/data') }}/raft.db"
      register: existing_data
      tags: [validate, preflight]

    - name: Warn about existing data
      ansible.builtin.pause:
        prompt: |
          ⚠️  WARNING: Existing Vault data found at {{ vault_data_dir | default('/opt/vault/data') }}

          This deployment will preserve existing data.
          If you want a fresh installation, manually remove the data directory first.

          Press Enter to continue or Ctrl+C to abort
        seconds: 10
      when: existing_data.stat.exists
      tags: [validate, preflight]

  vars:
    # Force production mode and raft storage
    vault_mode: 'production'
    vault_storage_backend: 'raft'

    # Raft configuration - each node defines its own join targets in host_vars
    vault_raft_node_id: "{{ vault_node_id | default(ansible_hostname) }}"

    # UI and telemetry defaults
    vault_ui_enabled: true
    vault_telemetry_enabled: true
    vault_telemetry_prometheus_retention_time: '24h'

    # Audit defaults
    vault_audit_enabled: true

    # TLS disabled for initial deployment (enable in Phase 2)
    vault_tls_disable: true

  roles:
    - role: vault
      tags: [vault-deploy]

  post_tasks:
    - name: Wait for Vault service to be ready
      ansible.builtin.wait_for:
        port: "{{ vault_port | default(8200) }}"
        host: "{{ ansible_default_ipv4.address }}"
        delay: 5
        timeout: 60
        state: started
      tags: [vault-verify]

    - name: Check Vault service status
      ansible.builtin.systemd:
        name: vault
        state: started
      register: vault_service_status
      tags: [vault-verify]

    - name: Verify Vault configuration syntax
      ansible.builtin.command: vault server -config=/etc/vault.d/vault.hcl -log-level=error
      register: vault_config_check
      failed_when: vault_config_check.rc != 1  # Should fail with "server command must be run..." but not config errors
      changed_when: false
      tags: [vault-verify]

    - name: Display deployment summary
      ansible.builtin.debug:
        msg:
          - '=========================================='
          - '🏗️  Vault Production Node Deployed'
          - '=========================================='
          - ''
          - 'Node: {{ ansible_hostname }} ({{ ansible_default_ipv4.address }})'
          - 'Role: {{ vault_role | default("production") }}'
          - 'Mode: {{ vault_mode }}'
          - 'Storage: {{ vault_storage_backend }}'
          - 'Auto-unseal: {{ "✅ Enabled" if vault_auto_unseal_enabled else "❌ Disabled" }}'
          - 'TLS: {{ "❌ Disabled" if vault_tls_disable else "✅ Enabled" }}'
          - 'UI: {{ "✅ Enabled" if vault_ui_enabled else "❌ Disabled" }}'
          - 'Service: {{ "✅ Running" if vault_service_status.status.ActiveState == "active" else "❌ " + vault_service_status.status.ActiveState }}'
          - 'Config: {{ "✅ Valid" if "server command must be run" in vault_config_check.stderr else "❌ Invalid" }}'
          - ''
          - 'API Address: http://{{ ansible_default_ipv4.address }}:{{ vault_port | default(8200) }}'
          - 'Cluster Address: http://{{ ansible_default_ipv4.address }}:{{ vault_cluster_port | default(8201) }}'
          - ''
          - '🎯 Next Steps:'
          - '1. Initialize the cluster: init-vault-cluster.yml'
          - '2. Verify auto-unseal is working'
          - '3. Configure PKI roles and policies'
          - '4. Enable TLS (Phase 2)'
          - '=========================================='
      tags: [vault-verify, summary]
