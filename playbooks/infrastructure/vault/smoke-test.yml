---
# Vault Infrastructure Comprehensive Smoke Test
# Tests both Ansible-Infisical integration and Vault infrastructure readiness
#
# This playbook performs comprehensive early detection tests to verify:
# 1. Ansible can retrieve secrets from Infisical
# 2. Network connectivity to Vault nodes
# 3. Vault API accessibility
# 4. Vault authentication using Infisical-stored tokens
# 5. Service state and readiness
# 6. Token permissions and capabilities
# 7. Infrastructure dependencies
# 8. Operational safety checks
#
# Usage:
#   Standard execution:
#   uv run ansible-playbook playbooks/infrastructure/vault/smoke-test.yml \
#     -i inventory/environments/vault-cluster/production.yaml
#   Test recovery keys: --extra-vars "test_recovery_keys=true"
#   Verbose output: --extra-vars "verbose_output=true"

- name: Vault Infrastructure Comprehensive Smoke Test
  hosts: localhost
  gather_facts: true
  any_errors_fatal: true  # Stop immediately on validation failures
  vars:
    # Configuration
    test_recovery_keys: false
    verbose_output: false
    vault_validate_certs: "{{ vault_validate_certs | default(true) }}"  # Default to true for production security

    # Test that we can retrieve secrets from Infisical
    # vault_token_test will be set by pre_tasks

    # Operational secrets that should be retrievable
    operational_secrets:
      - VAULT_PROD_ROOT_TOKEN
      - VAULT_TRANSIT_TOKEN
      - CONSUL_TOKEN_VAULT_MASTER_LLOYD
      - CONSUL_TOKEN_VAULT_PROD_1_HOLLY
      - CONSUL_TOKEN_VAULT_PROD_2_MABLE
      - CONSUL_TOKEN_VAULT_PROD_3_LLOYD

    # Test results tracking
    test_results: {}

  pre_tasks:
    - name: Retrieve Vault token for testing
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/infisical-secret-lookup.yml"
      vars:
        secret_name: 'VAULT_PROD_ROOT_TOKEN'
        secret_var_name: 'vault_token_test'
        fallback_env_var: 'VAULT_TOKEN'
        infisical_path: '/apollo-13/vault'
      tags: [secrets]

    # MANDATORY: Validate no hardcoded IPs before proceeding
    - name: Validate dynamic inventory compliance
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/validate-no-hardcoded-ips.yml"
      vars:
        validate_hostlike_vars:
          # Check any pre-existing vars that might have IPs
          # (in this playbook, we build everything dynamically, so this should pass)
          vault_leader_addr: "{{ vault_leader_addr | default('') }}"
        validate_allowlist: []  # No exceptions for this playbook

    - name: Build vault_nodes list dynamically from inventory
      ansible.builtin.set_fact:
        vault_nodes: |-
          {%- set nodes = [] -%}
          {%- for host in groups.get('vault_cluster', []) -%}
            {%- set ip = hostvars[host]['ansible_host'] -%}
            {%- if ip | ansible.utils.ipaddr('ipv6') and not ip.startswith('[') -%}
              {%- set formatted_address = 'https://[' + ip + ']:8200' -%}
            {%- else -%}
              {%- set formatted_address = 'https://' + ip + ':8200' -%}
            {%- endif -%}
            {%- set node = {
              'name': host,
              'address': formatted_address,
              'role': hostvars[host].get('vault_role', 'unknown'),
              'expected_mode': 'prod' if hostvars[host].get('vault_role') == 'master' else 'dev'
            } -%}
            {%- set _ = nodes.append(node) -%}
          {%- endfor -%}
          {{ nodes }}

    - name: Set vault leader address from first production node
      ansible.builtin.set_fact:
        vault_leader_addr: >-
          {%- set ip = hostvars[groups['vault_production'][0]]['ansible_host'] -%}
          {%- if ip | ansible.utils.ipaddr('ipv6') and not ip.startswith('[') -%}
            https://[{{ ip }}]:8200
          {%- else -%}
            https://{{ ip }}:8200
          {%- endif -%}
      when:
        - groups.get('vault_production', []) | length > 0

    - name: Fallback to default if no production nodes
      ansible.builtin.set_fact:
        vault_leader_addr: 'https://localhost:8200'
      when:
        - vault_leader_addr is not defined

    - name: Guard against empty/misconfigured inventory
      ansible.builtin.assert:
        that:
          - vault_nodes is defined
          - vault_nodes | length > 0
          - vault_leader_addr is defined
        fail_msg: 'ERROR: Empty or misconfigured inventory - no vault nodes discovered or leader address undefined'
        success_msg: 'Guard check passed: Vault inventory properly configured'

    - name: Display discovered vault nodes
      ansible.builtin.debug:
        msg: |
          Discovered Vault nodes from inventory:
          {% for node in vault_nodes %}
          - {{ node.name }}: {{ node.address }} (role: {{ node.role }})
          {% endfor %}
          Leader address: {{ vault_leader_addr }}
      when: verbose_output | bool

  tasks:
    - name: 'SMOKE TEST 1: Verify Infisical environment variables are loaded'
      ansible.builtin.assert:
        that:
          - lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID') | length > 0
          - lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET') | length > 0
        fail_msg: '‚ùå FAILED: Infisical environment variables not found. Check .mise.local.toml'
        success_msg: '‚úÖ PASSED: Infisical environment variables loaded'
      register: test1_result

    - name: 'SMOKE TEST 2: Verify Infisical secret retrieval'
      ansible.builtin.assert:
        that:
          - vault_token_test != 'FAILED'
          - vault_token_test | length > 0
        fail_msg: '‚ùå FAILED: Cannot retrieve secrets from Infisical'
        success_msg: '‚úÖ PASSED: Successfully retrieved Vault token from Infisical'
      register: test2_result

    - name: 'SMOKE TEST 3: Test network connectivity to Vault nodes'
      community.hashi_vault.vault_read:
        url: '{{ item.address }}'
        path: sys/health
        auth_method: none  # Health endpoint doesn't require auth
        validate_certs: "{{ vault_validate_certs }}"
        timeout: 5
      loop: '{{ vault_nodes }}'
      loop_control:
        label: '{{ item.name }}'
      register: health_checks
      ignore_errors: yes
      check_mode: no # Always run this test even in check mode

    - name: 'SMOKE TEST 3 RESULTS: Evaluate network connectivity'
      ansible.builtin.assert:
        that:
          - health_checks.results | selectattr('failed', 'equalto', false) | list | length > 0
        fail_msg: '‚ùå FAILED: No Vault nodes are reachable'
        success_msg: >-
          ‚úÖ PASSED:
          {{ health_checks.results | selectattr('failed', 'equalto', false)
             | list | length }}/{{ vault_nodes | length }}
          Vault nodes are reachable
      register: test3_result

    - name: 'SMOKE TEST 4: Authenticate to Vault using Infisical token'
      community.hashi_vault.vault_read:
        url: '{{ vault_leader_addr }}'
        path: auth/token/lookup-self
        token: '{{ vault_token_test }}'
        validate_certs: "{{ vault_validate_certs }}"
        timeout: 5
      register: token_lookup
      when: vault_token_test != 'FAILED'
      ignore_errors: yes
      check_mode: no # Always run this test even in check mode
      no_log: true

    - name: 'SMOKE TEST 4 RESULTS: Evaluate Vault authentication'
      ansible.builtin.assert:
        that:
          - token_lookup is not failed
          - token_lookup.data is defined
        fail_msg: '‚ùå FAILED: Cannot authenticate to Vault with Infisical token'
        success_msg: '‚úÖ PASSED: Successfully authenticated to Vault'
      when:
        - vault_token_test != 'FAILED'
        - token_lookup is defined
      register: test4_result

    - name: "SMOKE TEST 5: List Raft peers (equivalent to 'vault operator raft list-peers')"
      community.hashi_vault.vault_read:
        url: '{{ vault_leader_addr }}'
        path: sys/storage/raft/configuration
        token: '{{ vault_token_test }}'
        validate_certs: "{{ vault_validate_certs }}"
        timeout: 5
      register: raft_peers
      when:
        - vault_token_test != 'FAILED'
        - token_lookup is not failed
      ignore_errors: yes
      check_mode: no # Always run this test even in check mode
      no_log: true

    - name: 'SMOKE TEST 5 RESULTS: Display Raft cluster status'
      ansible.builtin.debug:
        msg: |
          ‚úÖ PASSED: Successfully retrieved Raft peer information

          Raft Cluster Status:
          {% if raft_peers.data is defined and raft_peers.data.data.config.servers is defined %}
          {% for server in raft_peers.data.data.config.servers %}
          - {{ server.node_id }}: {{ server.address }}
            ({{ 'Leader' if server.leader | default(false) else 'Follower' }})
          {% endfor %}
          {% else %}
          Unable to retrieve Raft configuration
          {% endif %}
      when:
        - vault_token_test != 'FAILED'
        - raft_peers is defined and raft_peers is not failed
      register: test5_result

    - name: 'SMOKE TEST 6: Check Vault seal status for each node'
      community.hashi_vault.vault_read:
        url: '{{ item.0.address }}'
        path: sys/seal-status
        auth_method: none  # Seal status doesn't require auth
        validate_certs: "{{ vault_validate_certs }}"
        timeout: 5
      loop: '{{ vault_nodes | zip(health_checks.results) | list }}'
      loop_control:
        label: '{{ item.0.name }}'
      register: seal_status_checks
      ignore_errors: yes
      check_mode: no
      when: not item.1.failed

    - name: 'SMOKE TEST 6 RESULTS: Evaluate seal status'
      ansible.builtin.debug:
        msg: |
          Vault Seal Status:
          {% for result in seal_status_checks.results | default([]) %}
          {% if result.skipped is not defined and result.failed is false %}
          - {{ result.item.0.name }}:
            {{ 'üîì Unsealed' if not result.data.data.sealed else 'üîí Sealed' }}
            (Initialized: {{ result.data.data.initialized | default('unknown') }})
          {% endif %}
          {% endfor %}
      register: test6_result

    - name: 'SMOKE TEST 7: Verify token permissions'
      community.hashi_vault.vault_write:
        url: '{{ vault_leader_addr }}'
        path: sys/capabilities-self
        token: '{{ vault_token_test }}'
        validate_certs: "{{ vault_validate_certs }}"
        timeout: 5
        data:
          paths:
            - '/sys/mounts'
            - '/sys/policies/acl'
            - '/pki/*'
            - '/transit/*'
            - '/sys/storage/raft/configuration'
      register: token_capabilities
      when:
        - vault_token_test != 'FAILED'
        - token_lookup is not failed
      ignore_errors: yes
      check_mode: no
      no_log: true

    - name: 'SMOKE TEST 7 RESULTS: Display token capabilities'
      ansible.builtin.debug:
        msg: |
          Token Capabilities:
          {% if token_capabilities.data is defined and token_capabilities.data.data is defined %}
          {% for path, caps in token_capabilities.data.data.items() %}
          - {{ path }}: {{ caps | join(', ') }}
          {% endfor %}
          {% else %}
          Unable to retrieve token capabilities
          {% endif %}
      when: token_capabilities is defined and token_capabilities is not failed
      register: test7_result

    - name: Retrieve operational secrets securely
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/infisical-secret-lookup.yml"
      vars:
        secret_name: "{{ item }}"
        secret_var_name: "{{ item | lower }}_value"
        fallback_env_var: "{{ item }}"
        infisical_path: '/apollo-13/vault'
      loop: "{{ operational_secrets }}"
      no_log: true
      tags: [secrets]

    - name: 'SMOKE TEST 8: Verify operational secrets availability'
      block:
        - name: Build operational secrets dict from retrieved values
          ansible.builtin.set_fact:
            operational_secret_values: >-
              {{ (operational_secret_values | default({})) | combine(
                 { item: lookup('vars', item | lower + '_value') | default('') }
              ) }}
          loop: '{{ operational_secrets }}'
          no_log: true

        - name: Evaluate operational secrets availability
          ansible.builtin.assert:
            that:
              - (operational_secret_values | dict2items | map(attribute='value') | select('length') | list | length) == operational_secrets|length
            fail_msg: >-
              ‚ùå FAILED: Missing or empty operational secrets:
              {{ (operational_secret_values | dict2items | selectattr('value','equalto','') | map(attribute='key') | list) }}
            success_msg: '‚úÖ PASSED: All {{ operational_secrets | length }} operational secrets are retrievable'
          register: test8_result

    - name: 'SMOKE TEST 9: Verify recovery keys existence (without retrieval)'
      block:
        - name: Get all secrets in vault folder
          ansible.builtin.set_fact:
            vault_secrets: >-
              {{ lookup('infisical.vault.read_secrets',
                        universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                        universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                        project_id='7b832220-24c0-45bc-a5f1-ce9794a31259',
                        env_slug='prod',
                        path='/apollo-13/vault') }}
          no_log: true

        - name: Count recovery keys
          ansible.builtin.set_fact:
            recovery_key_count: >-
              {{ vault_secrets | selectattr('key', 'match', '^VAULT_PROD_RECOVERY_KEY_[1-5]$')
                | list | length }}

        - name: Verify recovery keys exist
          ansible.builtin.assert:
            that:
              - recovery_key_count | int == 5
            fail_msg: '‚ùå FAILED: Expected 5 recovery keys in Infisical, found {{ recovery_key_count }}'
            success_msg: '‚úÖ PASSED: All 5 recovery keys confirmed present in Infisical (not retrieved)'
          register: test9_result

        - name: Test recovery key retrieval (if requested)
          when: test_recovery_keys | bool
          block:
            - name: Attempt to retrieve recovery keys
              ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/infisical-secret-lookup.yml"
              vars:
                secret_name: 'VAULT_PROD_RECOVERY_KEY_1'
                secret_var_name: 'recovery_key_test'
                fallback_env_var: 'VAULT_PROD_RECOVERY_KEY_1'
                infisical_path: '/apollo-13/vault'
              no_log: true
              tags: [secrets]

            - name: Verify recovery key retrieval
              ansible.builtin.assert:
                that:
                  - recovery_key_test != 'FAILED'
                  - recovery_key_test | length > 0
                fail_msg: '‚ùå FAILED: Cannot retrieve recovery keys from Infisical'
                success_msg: '‚úÖ PASSED: Recovery keys are retrievable when needed'

    - name: 'SMOKE TEST 10: Test write/read operations'
      when:
        - vault_token_test != 'FAILED'
        - token_lookup is not failed
      block:
        - name: Generate test data
          ansible.builtin.set_fact:
            test_timestamp: '{{ ansible_date_time.epoch }}'
            test_path: 'smoke-test-{{ ansible_date_time.epoch }}'

        - name: Write test secret to Vault
          community.hashi_vault.vault_kv2_write:
            url: '{{ vault_leader_addr }}'
            path: '{{ test_path }}'
            mount_point: secret
            token: '{{ vault_token_test }}'
            validate_certs: "{{ vault_validate_certs }}"
            timeout: 5
            data:
              test: 'smoke-test'
              timestamp: '{{ test_timestamp }}'
              host: '{{ ansible_hostname }}'
          register: write_test
          check_mode: no
          no_log: true

        - name: Read test secret back
          community.hashi_vault.vault_kv2_get:
            url: '{{ vault_leader_addr }}'
            path: '{{ test_path }}'
            mount_point: secret
            token: '{{ vault_token_test }}'
            validate_certs: "{{ vault_validate_certs }}"
            timeout: 5
          register: read_test
          check_mode: no
          no_log: true

        - name: Verify write/read operation
          ansible.builtin.assert:
            that:
              - write_test is not failed
              - read_test is not failed
              - read_test.data.data.timestamp == test_timestamp
            fail_msg: '‚ùå FAILED: Cannot perform write/read operations in Vault'
            success_msg: '‚úÖ PASSED: Write/read operations successful'
          register: test10_result

      rescue:
        - name: Handle test failure
          ansible.builtin.debug:
            msg: 'Write/read test failed, proceeding to cleanup'

      always:
        - name: Clean up test secret
          community.hashi_vault.vault_kv2_delete:
            url: '{{ vault_leader_addr }}'
            path: '{{ test_path }}'
            mount_point: secret
            token: '{{ vault_token_test }}'
            validate_certs: "{{ vault_validate_certs }}"
            timeout: 5
          check_mode: no
          failed_when: false  # Cleanup is best-effort
          no_log: true

    - name: Extract hostname from vault_leader_addr
      ansible.builtin.set_fact:
        vault_leader_host: "{{ vault_leader_addr | urlsplit('hostname') }}"

    - name: 'SMOKE TEST 11: Check critical ports accessibility'
      ansible.builtin.wait_for:
        host: "{{ vault_leader_host }}"
        port: '{{ item.port }}'
        timeout: 5
        state: started
      loop:
        - { port: 8200, service: 'Vault API' }
        - { port: 8201, service: 'Vault Raft' }
      loop_control:
        label: '{{ item.service }} on port {{ item.port }}'
      register: port_checks
      ignore_errors: yes

    - name: 'SMOKE TEST 11 RESULTS: Evaluate port accessibility'
      ansible.builtin.debug:
        msg: |
          Port Accessibility:
          {% for result in port_checks.results %}
          - {{ result.item.service }} ({{ result.item.port }}): {{ '‚úÖ Open' if not result.failed else '‚ùå Blocked' }}
          {% endfor %}
      register: test11_result

    - name: 'SMOKE TEST 12: Check disk space for Raft storage'
      ansible.builtin.command: df -h /opt/vault
      register: disk_space
      delegate_to: '{{ item }}'
      loop: "{{ groups.get('vault_production', []) }}"
      changed_when: false  # Read-only operation
      failed_when: false  # Best effort - nodes might be unreachable

    - name: 'SMOKE TEST 12 RESULTS: Display disk space'
      ansible.builtin.debug:
        msg: |
          Disk Space for Raft Storage:
          {% for result in disk_space.results | default([]) %}
          {% if result.skipped is not defined %}
          {{ result.item }}:
          {{ result.stdout | default('Unable to check') }}
          {% endif %}
          {% endfor %}
      register: test12_result

    - name: 'SMOKE TEST SUMMARY'
      ansible.builtin.debug:
        msg: |
          ===============================================
          VAULT INFRASTRUCTURE SMOKE TEST RESULTS
          ===============================================

          Core Tests:
          1. Infisical Environment:
             {{ '‚úÖ PASSED' if (lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID') | length > 0) else '‚ùå FAILED' }}
          2. Secret Retrieval: {{ '‚úÖ PASSED' if vault_token_test != 'FAILED' else '‚ùå FAILED' }}
          3. Network Connectivity:
             {{ '‚úÖ PASSED' if (health_checks.results |
                selectattr('failed', 'equalto', false) | list | length > 0) else '‚ùå FAILED' }}
          4. Vault Authentication:
             {{ '‚úÖ PASSED' if (token_lookup is defined and token_lookup is not failed) else '‚ùå FAILED' }}
          5. Raft Peer Listing:
             {{ '‚úÖ PASSED' if (raft_peers is defined and raft_peers is not failed) else '‚ùå FAILED' }}

          Service State:
          6. Seal Status: {{ '‚úÖ Checked' if seal_status_checks is defined else '‚è≠Ô∏è  SKIPPED' }}
          7. Token Permissions:
             {{ '‚úÖ Verified' if (token_capabilities is defined and token_capabilities is not failed) else '‚ùå FAILED' }}

          Secret Management:
          8. Operational Secrets:
             {{ '‚úÖ All Available' if (test8_result is defined and test8_result is not failed) else '‚ùå Missing' }}
          9. Recovery Keys:
             {{ '‚úÖ Confirmed (5/5)' if (recovery_key_count | default(0) | int == 5) else '‚ùå Missing' }}
          {% if test_recovery_keys | bool %}
             Recovery Key Retrieval: {{ '‚úÖ Tested' if recovery_key_test is defined else '‚ùå Failed' }}
          {% endif %}

          Operational Tests:
          10. Write/Read Operations:
              {{ '‚úÖ Working' if (test10_result is defined and test10_result is not failed) else '‚ùå Failed' }}
          11. Port Accessibility: {{ '‚úÖ Checked' if port_checks is defined else '‚è≠Ô∏è  SKIPPED' }}
          12. Disk Space: {{ '‚úÖ Checked' if disk_space is defined else '‚è≠Ô∏è  SKIPPED' }}

          Node Connectivity Details:
          {% for result in health_checks.results %}
          - {{ result.item.name }}: {{ '‚úÖ Reachable' if not result.failed else '‚ùå Unreachable' }}
          {% endfor %}

          {% if vault_token_test == 'FAILED' %}
          ‚ö†Ô∏è  WARNING: Cannot proceed with Vault operations without valid token from Infisical
          {% endif %}

          Next Steps:
          {% if health_checks.results | selectattr('failed', 'equalto', true) | list | length > 0 %}
          - Check network connectivity to unreachable nodes
          - Verify Vault service status on those nodes
          {% endif %}
          {% if vault_token_test == 'FAILED' %}
          - Verify Infisical credentials in .mise.local.toml
          - Check Infisical project/path/secret configuration
          {% endif %}
          {% if token_lookup is failed %}
          - Token may be expired or invalid
          - Check token permissions and policies
          {% endif %}
          {% if recovery_key_count | default(0) | int < 5 %}
          - Recovery keys are missing in Infisical
          - Check /apollo-13/vault path for VAULT_PROD_RECOVERY_KEY_[1-5]
          {% endif %}
          ===============================================

- name: Vault Node SSH Connectivity Test
  hosts: vault_cluster
  gather_facts: false
  tasks:
    - name: 'SSH CONNECTIVITY TEST: Test SSH access to Vault nodes'
      ansible.builtin.ping:
      register: ping_result
      ignore_errors: true  # Connectivity test needs to continue even if nodes are down

    - name: 'SSH CONNECTIVITY RESULTS: Report SSH connectivity'
      ansible.builtin.debug:
        msg: "{{ inventory_hostname }}: {{ '‚úÖ SSH Connected' if ping_result is not failed else '‚ùå SSH Failed' }}"
