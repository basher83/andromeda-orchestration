---
# Replace Self-Signed Certificates with CA-Issued Ones for Vault Cluster
# This playbook implements Issue #97 - Replace Self-Signed Certificates
# Usage:
# uv run ansible-playbook playbooks/infrastructure/vault/replace-self-signed-certificates.yml \
#   -i inventory/environments/vault-cluster/production.yaml

- name: Replace Self-Signed Certificates with PKI-Issued Certificates
  hosts: vault_production
  gather_facts: true
  serial: 1 # Process one node at a time for zero downtime
  pre_tasks:
    - name: Enforce dynamic-inventory pattern (no hardcoded IPs)
      ansible.builtin.import_tasks: ../../../tasks/validate-no-hardcoded-ips.yml
      vars:
        validate_allowlist:
          - '127.0.0.1'
          - '::1'
      tags: ['validate']

    - name: Retrieve Vault token securely
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/infisical-secret-lookup.yml"
      vars:
        secret_name: 'VAULT_PROD_ROOT_TOKEN'
        secret_var_name: 'vault_token'
        fallback_env_var: 'VAULT_TOKEN'
        infisical_path: '/apollo-13/vault'
      tags: [secrets]

    - name: Assert VAULT_ADDR or inventory leader is available
      ansible.builtin.assert:
        that:
          - (ansible_env.VAULT_ADDR | default('')) != '' or (_leader_host is defined)
        fail_msg: "Set VAULT_ADDR or define group 'vault_production' with ansible_host."
      tags: ['validate']

  vars:
    # Vault connection for certificate generation (pointing to leader)
    _leader_host: >-
      {{ hostvars.get((groups.get('vault_production') | default([]) | first) | default(''), {})
           .get('ansible_host') | default(omit) }}
    vault_addr: >-
      {{ ansible_env.VAULT_ADDR |
         default(
           ((_leader_host | ansible.utils.ipaddr('ipv6'))
             | ternary('https://[' ~ _leader_host ~ ']:8200', 'https://' ~ _leader_host ~ ':8200')),
           true)
         if (_leader_host is defined) else omit }}

    # PKI Configuration
    pki_mount: 'pki_int'
    pki_role: 'infrastructure'
    vault_validate_certs: "{{ vault_validate_certs | default(false) }}"  # Set to true for production with proper CA
    vault_ca_path: "{{ vault_ca_path | default(omit) }}"  # Optional CA certificate path
    cert_ttl: '720h' # 30 days

    # Certificate paths on target nodes
    tls_dir: '/opt/vault/tls'
    backup_dir: '/opt/vault/tls/backup-{{ ansible_date_time.epoch }}'

    # Check if certificates exist first
    check_cert_exists: true

    # CA chain paths
    ca_bundle_path: '/opt/vault/tls/ca-bundle.pem'
    system_ca_path: >-
      {{ '/usr/local/share/ca-certificates' if ansible_facts['os_family'] == 'Debian'
         else '/etc/pki/ca-trust/source/anchors' }}

    # TLS validation control
    vault_validate_health_tls: true # Enable TLS validation after CA installation

  tasks:
    - name: Create backup directory for existing certificates
      ansible.builtin.file:
        path: '{{ backup_dir }}'
        state: directory
        owner: vault
        group: vault
        mode: '0700'
      become: true

    - name: Check if existing certificates exist
      ansible.builtin.stat:
        path: '{{ item }}'
      with_items:
        - '{{ tls_dir }}/vault-cert.pem'
        - '{{ tls_dir }}/vault-key.pem'
        - '{{ tls_dir }}/vault-ca.pem'
        - '{{ tls_dir }}/tls.crt'
        - '{{ tls_dir }}/tls.key'
      register: cert_files
      become: true

    - name: Backup existing certificates
      ansible.builtin.copy:
        src: '{{ item.item }}'
        dest: '{{ backup_dir }}/{{ item.item | basename }}'
        remote_src: yes
        owner: vault
        group: vault
        mode: '0600'
      with_items: '{{ cert_files.results }}'
      when: item.stat.exists
      become: true
      loop_control:
        label: '{{ item.item | basename }}'

    - name: Generate new certificate from Vault PKI
      community.hashi_vault.vault_pki_generate_certificate:
        url: '{{ vault_addr }}'
        auth_method: token
        token: '{{ vault_token }}'
        engine_mount_point: '{{ pki_mount }}'
        role_name: '{{ pki_role }}'
        common_name: '{{ inventory_hostname }}.{{ vault_domain }}'
        alt_names:
          - '{{ inventory_hostname }}'
          - 'vault.service.consul'
          - '{{ inventory_hostname }}.vault'
          - 'localhost'
        ip_sans:
          - '{{ ansible_host }}'
          - '127.0.0.1'
        ttl: '{{ cert_ttl }}'
        validate_certs: "{{ vault_validate_certs }}"
        ca_path: "{{ vault_ca_path }}"
      delegate_to: localhost
      register: new_cert
      no_log: true

    - name: Display certificate serial number for tracking
      ansible.builtin.debug:
        msg: 'Generated certificate with serial: {{ new_cert.data.data.serial_number }}'

    - name: Write new certificate to file
      ansible.builtin.copy:
        content: '{{ new_cert.data.data.certificate }}'
        dest: '{{ tls_dir }}/tls.crt'
        owner: vault
        group: vault
        mode: '0644'
      become: true

    - name: Also save certificate with descriptive name
      ansible.builtin.copy:
        content: '{{ new_cert.data.data.certificate }}'
        dest: '{{ tls_dir }}/vault-cert.pem'
        owner: vault
        group: vault
        mode: '0644'
      become: true

    - name: Write new private key to file
      ansible.builtin.copy:
        content: '{{ new_cert.data.data.private_key }}'
        dest: '{{ tls_dir }}/tls.key'
        owner: vault
        group: vault
        mode: '0600'
      become: true
      no_log: true

    - name: Also save key with descriptive name
      ansible.builtin.copy:
        content: '{{ new_cert.data.data.private_key }}'
        dest: '{{ tls_dir }}/vault-key.pem'
        owner: vault
        group: vault
        mode: '0600'
      become: true
      no_log: true

    - name: Write CA chain to file
      ansible.builtin.copy:
        content: |
          {{ new_cert.data.data.issuing_ca }}
          {% for ca in new_cert.data.data.ca_chain %}
          {{ ca }}
          {% endfor %}
        dest: '{{ ca_bundle_path }}'
        owner: vault
        group: vault
        mode: '0644'
      become: true

    - name: Copy CA bundle to system trust store (Debian/Ubuntu)
      ansible.builtin.copy:
        src: '{{ ca_bundle_path }}'
        dest: '{{ system_ca_path }}/vault-ca-chain.crt'
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
      become: true
      register: ca_copy_debian
      changed_when: ca_copy_debian.changed
      when: ansible_facts['os_family'] == 'Debian'

    - name: Copy CA bundle to system trust store (RedHat/CentOS)
      ansible.builtin.copy:
        src: '{{ ca_bundle_path }}'
        dest: '{{ system_ca_path }}/vault-ca-chain.crt'
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
      become: true
      register: ca_copy_redhat
      changed_when: ca_copy_redhat.changed
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Update system CA certificates (Debian/Ubuntu)
      ansible.builtin.command: update-ca-certificates
      become: true
      changed_when: ca_copy_debian.changed
      when: ansible_facts['os_family'] == 'Debian'

    - name: Update system CA certificates (RedHat/CentOS)
      ansible.builtin.command: update-ca-trust
      become: true
      changed_when: ca_copy_redhat.changed
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Analyze installed certificate
      community.crypto.x509_certificate_info:
        path: "{{ tls_dir }}/tls.crt"
      register: cert_info
      become: true
      changed_when: false

    - name: Display certificate information
      ansible.builtin.debug:
        msg:
          - "Subject: {{ cert_info.subject.commonName | default('N/A') }}"
          - "Issuer:  {{ cert_info.issuer.commonName | default('N/A') }}"
          - "Valid To: {{ cert_info.not_after }}"

    - name: Test certificate chain validation
      ansible.builtin.shell:
        cmd: |
          openssl verify -CAfile {{ ca_bundle_path }} {{ tls_dir }}/tls.crt
        executable: /bin/bash
      register: cert_validation
      become: true
      changed_when: false

    - name: Display validation result
      ansible.builtin.debug:
        msg: 'Certificate validation: {{ cert_validation.stdout }}'

    - name: Check Vault service status
      ansible.builtin.systemd:
        name: vault
        state: reloaded
      become: true
      register: vault_reload

    - name: Wait for Vault to be ready
      ansible.builtin.uri:
        url: >-
          https://{{ '[' ~ ansible_host ~ ']' if (ansible_host | ansible.utils.ipaddr('ipv6'))
          else ansible_host }}:8200/v1/sys/health
        method: GET
        validate_certs: "{{ vault_validate_health_tls | default(true) }}"
        status_code: [200, 429, 473, 501, 503]
      register: vault_health
      until: vault_health.status in [200, 429, 501]
      retries: 30
      delay: 2

    - name: Display Vault health status
      ansible.builtin.debug:
        msg: 'Vault node {{ inventory_hostname }} is healthy (status: {{ vault_health.status }})'

- name: Update Consul Health Checks for Vault Service
  hosts: vault_production
  gather_facts: false

  vars:
    consul_config_dir: '/etc/consul.d'

  tasks:
    - name: Check if Consul agent is installed
      ansible.builtin.command:
        cmd: which consul
      register: consul_binary
      become: true
      changed_when: false
      failed_when: false

    - name: Update Consul service definition for Vault
      ansible.builtin.template:
        src: consul-vault-service.json.j2
        dest: '{{ consul_config_dir }}/vault.json'
        owner: consul
        group: consul
        mode: '0644'
      become: true
      when: consul_binary.rc == 0

    - name: Reload Consul configuration
      ansible.builtin.systemd:
        name: consul
        state: reloaded
      become: true
      when: consul_binary.rc == 0

- name: Verify Certificate Deployment Success
  hosts: localhost
  gather_facts: false

  vars:
    vault_domain: >-
      {{ hostvars.get((groups.get('vault_production') | default([]) | first) | default(''), {})
           .get('vault_domain') | default('localhost') }}
    vault_nodes: >-
      {{ (groups.get('vault_production') | default([]) | map('extract', hostvars) | list)
         if groups.get('vault_production') | default([]) | length > 0 else [] }}

  tasks:
    - name: Test TLS connections to all Vault nodes
      vars:
        connect_host: >-
          {{ '[' ~ item.ansible_host ~ ']' if (item.ansible_host | ansible.utils.ipaddr('ipv6'))
          else item.ansible_host }}
        sni_name: "{{ item.inventory_hostname }}.{{ vault_domain }}"
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          echo | openssl s_client -connect {{ connect_host }}:8200 -servername {{ sni_name }} 2>/dev/null | \
            openssl x509 -noout -text | grep -E "(Subject|Issuer):" | head -4
        executable: /bin/bash
      loop: '{{ vault_nodes }}'
      loop_control:
        label: '{{ item.inventory_hostname }}'
      register: tls_tests
      delegate_to: localhost
      changed_when: false
      when: vault_nodes | length > 0

    - name: Display TLS test results
      ansible.builtin.debug:
        msg: '{{ item.stdout_lines }}'
      loop: '{{ tls_tests.results }}'
      loop_control:
        label: '{{ item.item.inventory_hostname }}'
      when: vault_nodes | length > 0

    - name: Skip TLS tests (no vault nodes found)
      ansible.builtin.debug:
        msg: 'ℹ️  Skipping TLS connection tests - no vault_production nodes found in inventory'
      when: vault_nodes | length == 0

    - name: Summary report
      ansible.builtin.debug:
        msg:
          - '✅ Certificate Replacement Complete!'
          - ''
          - '🔐 All Vault nodes now using PKI-issued certificates:'
          - '   - Issuer: HomeLab Intermediate CA'
          - '   - Valid for: 30 days'
          - '   - Auto-renewal required before expiry'
          - ''
          - '📋 Next Steps:'
          - '   1. Implement automated certificate renewal (Issue #99)'
          - '   2. Enable mTLS for service communication (Issue #98)'
          - '   3. Set up monitoring for certificate expiry (Issue #100)'
          - ''
          - '🔒 Backup certificates stored in: /opt/vault/tls/backup-*'
