---
# Complete Migration Orchestration for vault-master-lloyd
# Part of Issue #99: Migrate vault-master-lloyd to Production Mode
#
# This master playbook orchestrates the complete migration from dev to production mode
# using a blue-green deployment strategy to ensure zero downtime.

- name: Migrate vault-master-lloyd from Development to Production Mode
  hosts: localhost
  gather_facts: no
  vars:
    migration_timestamp: "{{ ansible_date_time.epoch }}"
    vault_master_host: "vault-master-lloyd"
    vault_master_ip: "192.168.10.30"
    production_vault_addr: "https://{{ vault_master_ip }}:8200"

    # Production cluster nodes that depend on transit unseal
    production_nodes:
      - vault-prod-1-holly
      - vault-prod-2-mable
      - vault-prod-3-lloyd

  tasks:
    - name: Migration Pre-flight Checks
      debug:
        msg: |
          ========================================
          Vault Master Migration to Production
          ========================================
          Target: {{ vault_master_host }} ({{ vault_master_ip }})
          Strategy: Blue-Green Deployment
          Timestamp: {{ migration_timestamp }}

          This playbook will:
          1. Export transit keys from dev instance
          2. Deploy production configuration
          3. Deploy TLS certificates
          4. Initialize and configure transit engine
          5. Update production nodes
          6. Verify and cutover
          ========================================

    - name: Confirm migration
      pause:
        prompt: |

          WARNING: This will migrate vault-master-lloyd to production mode.

          Pre-requisites checklist:
          - [ ] Infisical credentials configured
          - [ ] Vault PKI infrastructure operational (Issues #95-97)
          - [ ] Production cluster nodes accessible
          - [ ] Backup of current configuration completed

          Type 'yes' to proceed with migration
      register: confirmation

    - name: Abort if not confirmed
      fail:
        msg: "Migration aborted by user"
      when: confirmation.user_input != 'yes'

    - name: Phase 1 - Export Transit Keys from Dev Instance
      import_playbook: export-transit-keys.yml
      vars:
        ansible_host_key_checking: false

    - name: Phase 2 - Initialize Production Configuration
      import_playbook: initialize-production-vault.yml
      vars:
        ansible_host_key_checking: false

    - name: Phase 3 - Deploy TLS Certificates
      import_playbook: deploy-tls-certificates.yml
      vars:
        ansible_host_key_checking: false

    - name: Phase 4 - Start Production Vault Service
      block:
        - name: Start Vault in production mode
          systemd:
            name: vault
            state: started
            enabled: yes
          delegate_to: "{{ vault_master_host }}"
          become: yes

        - name: Wait for Vault to be ready
          uri:
            url: "{{ production_vault_addr }}/v1/sys/health"
            method: GET
            validate_certs: no
            status_code: [200, 429, 501, 503]
          register: vault_health
          until: vault_health.status in [200, 429, 501, 503]
          retries: 30
          delay: 2
          delegate_to: localhost

    - name: Phase 5 - Configure Transit Engine
      import_playbook: configure-transit-engine.yml
      vars:
        ansible_host_key_checking: false

    - name: Phase 6 - Update Production Nodes Configuration
      block:
        - name: Create auto-unseal configuration for production nodes
          copy:
            content: |
              # Auto-unseal configuration
              # Generated by migration playbook
              seal "transit" {
                address = "{{ production_vault_addr }}"
                token = "{{ vault_autounseal_token }}"
                disable_renewal = "false"
                key_name = "autounseal"
                mount_path = "transit/"

                # TLS Configuration
                tls_ca_cert = "/opt/vault/tls/ca.crt"
                tls_client_cert = "/opt/vault/tls/tls.crt"
                tls_client_key = "/opt/vault/tls/tls.key"
                tls_server_name = "vault-master-lloyd.vault.spaceships.work"
              }
            dest: /tmp/vault-autounseal-{{ item }}.hcl
            mode: '0600'
          loop: "{{ production_nodes }}"
          delegate_to: localhost

        - name: Display node update instructions
          debug:
            msg: |
              Production nodes need to be updated with new auto-unseal configuration.

              For each node ({{ production_nodes | join(', ') }}):
              1. Add the seal configuration to /etc/vault.d/vault.hcl
              2. Restart Vault service
              3. Verify auto-unseal is working

              Configuration files created in /tmp/vault-autounseal-*.hcl

    - name: Phase 7 - Verification and Testing
      block:
        - name: Test transit encryption
          uri:
            url: "{{ production_vault_addr }}/v1/transit/encrypt/autounseal"
            method: POST
            headers:
              X-Vault-Token: "{{ vault_autounseal_token }}"
            body_format: json
            body:
              plaintext: "{{ 'migration-test' | b64encode }}"
            validate_certs: no
            status_code: [200]
          register: encrypt_test
          delegate_to: localhost

        - name: Verify encryption response
          assert:
            that:
              - encrypt_test.json.data.ciphertext is defined
              - encrypt_test.json.data.ciphertext | length > 0
            fail_msg: "Transit encryption test failed"
            success_msg: "Transit encryption verified successfully"

    - name: Phase 8 - Cutover and Cleanup
      block:
        - name: Stop dev instance if still running
          systemd:
            name: vault-dev
            state: stopped
            enabled: no
          delegate_to: "{{ vault_master_host }}"
          become: yes
          ignore_errors: yes

        - name: Create migration report
          copy:
            content: |
              Vault Master Migration Report
              ==============================
              Migration Date: {{ ansible_date_time.iso8601 }}
              Target Host: {{ vault_master_host }}

              Status: COMPLETED

              Configuration:
              - Mode: Production with Raft storage
              - TLS: Enabled with PKI certificates
              - Transit Engine: Configured
              - Auto-unseal: Available

              Post-Migration Tasks:
              1. Update all production nodes with new auto-unseal configuration
              2. Verify all nodes can auto-unseal
              3. Update monitoring and alerting
              4. Document new operational procedures
              5. Schedule certificate renewal (TTL: 1 year)

              Backup Locations:
              - Transit keys: /opt/vault/backup/transit-export-{{ migration_timestamp }}.tar.gz
              - Previous certificates: /opt/vault/tls/backup-*

              Service Access:
              - URL: {{ production_vault_addr }}
              - UI: {{ production_vault_addr }}/ui

              Commands:
              - Status: systemctl status vault
              - Logs: journalctl -u vault -f
              - Seal status: vault status
            dest: "/opt/vault/migration-report-{{ migration_timestamp }}.txt"
          delegate_to: "{{ vault_master_host }}"
          become: yes

    - name: Migration Complete
      debug:
        msg: |
          ========================================
          Migration Completed Successfully!
          ========================================

          vault-master-lloyd is now running in production mode.

          Service URL: {{ production_vault_addr }}

          Next Steps:
          1. Update production nodes with new auto-unseal config
          2. Verify all nodes can auto-unseal
          3. Test failover scenarios
          4. Update documentation

          Migration report saved to:
          /opt/vault/migration-report-{{ migration_timestamp }}.txt
          ========================================
