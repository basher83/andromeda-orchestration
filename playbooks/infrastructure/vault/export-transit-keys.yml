---
# Export Transit Keys from Development Instance
# Part of Issue #99: Migrate vault-master-lloyd to Production Mode
#
# This playbook exports transit keys from the development Vault instance
# to prepare for migration to production mode with persistent storage.

- name: Export Transit Keys from Development Vault
  hosts: vault-master-lloyd
  gather_facts: yes
  vars:
    vault_addr: 'http://{{ ansible_default_ipv4.address }}:8200'
    backup_dir: '/opt/vault/backup/transit-export-{{ ansible_date_time.epoch }}'

    # Retrieve Vault token from Infisical
    vault_token: >-
      {{ (lookup('infisical.vault.read_secrets',
                 universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                 universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                 project_id='7b832220-24c0-45bc-a5f1-ce9794a31259',
                 env_slug='prod',
                 path='/apollo-13/vault',
                 secret_name='VAULT_TRANSIT_TOKEN')).value }}

  tasks:
    - name: Create backup directory
      file:
        path: '{{ backup_dir }}'
        state: directory
        mode: '0700'
        owner: vault
        group: vault

    - name: Check if transit engine is enabled
      uri:
        url: '{{ vault_addr }}/v1/sys/mounts'
        method: GET
        headers:
          X-Vault-Token: '{{ vault_token }}'
        status_code: [200]
      register: mounts_response

    - name: Verify transit engine exists
      assert:
        that:
          - "'transit/' in mounts_response.json"
        fail_msg: 'Transit engine not found on development instance'
        success_msg: 'Transit engine found, proceeding with export'

    - name: List all transit keys
      uri:
        url: '{{ vault_addr }}/v1/transit/keys?list=true'
        method: GET
        headers:
          X-Vault-Token: '{{ vault_token }}'
        status_code: [200, 404]
      register: transit_keys_list

    - name: Set transit keys fact
      set_fact:
        transit_keys: '{{ transit_keys_list.json.data.keys | default([]) }}'
      when: transit_keys_list.status == 200

    - name: Display found transit keys
      debug:
        msg: "Found {{ transit_keys | length }} transit keys: {{ transit_keys | join(', ') }}"
      when: transit_keys is defined

    - name: Export each transit key
      uri:
        url: '{{ vault_addr }}/v1/transit/export/encryption-key/{{ item }}'
        method: GET
        headers:
          X-Vault-Token: '{{ vault_token }}'
        status_code: [200, 400, 404]
      register: key_export
      loop: '{{ transit_keys | default([]) }}'
      when: transit_keys is defined

    - name: Save exported keys to files
      copy:
        content: '{{ item.json | to_nice_json }}'
        dest: '{{ backup_dir }}/transit-key-{{ item.item }}.json'
        mode: '0600'
        owner: vault
        group: vault
      loop: '{{ key_export.results }}'
      when:
        - key_export is defined
        - item.status == 200
      loop_control:
        label: '{{ item.item }}'

    - name: Export transit policies
      uri:
        url: '{{ vault_addr }}/v1/transit/keys/{{ item }}'
        method: GET
        headers:
          X-Vault-Token: '{{ vault_token }}'
        status_code: [200]
      register: key_policies
      loop: '{{ transit_keys | default([]) }}'
      when: transit_keys is defined

    - name: Save key policies
      copy:
        content: '{{ item.json | to_nice_json }}'
        dest: '{{ backup_dir }}/transit-policy-{{ item.item }}.json'
        mode: '0600'
        owner: vault
        group: vault
      loop: '{{ key_policies.results }}'
      when:
        - key_policies is defined
        - item.status == 200
      loop_control:
        label: '{{ item.item }}'

    - name: Create backup manifest
      copy:
        content: |
          Transit Keys Export Manifest
          =============================
          Export Date: {{ ansible_date_time.iso8601 }}
          Source: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})
          Vault Version: Development Mode

          Exported Keys:
          {% for key in transit_keys | default([]) %}
          - {{ key }}
          {% endfor %}

          Backup Location: {{ backup_dir }}

          Files Created:
          {% for key in transit_keys | default([]) %}
          - transit-key-{{ key }}.json
          - transit-policy-{{ key }}.json
          {% endfor %}

          IMPORTANT: These files contain sensitive key material.
          Store securely and delete after successful migration.
        dest: '{{ backup_dir }}/MANIFEST.txt'
        mode: '0600'
        owner: vault
        group: vault

    - name: Create tarball of exported keys
      archive:
        path: '{{ backup_dir }}'
        dest: '/opt/vault/backup/transit-export-{{ ansible_date_time.epoch }}.tar.gz'
        mode: '0600'
        owner: vault
        group: vault
        format: gz

    - name: Display backup location
      debug:
        msg: |
          Transit keys exported successfully!

          Backup location: {{ backup_dir }}
          Archive: /opt/vault/backup/transit-export-{{ ansible_date_time.epoch }}.tar.gz

          Next steps:
          1. Copy the archive to the new production instance
          2. Run the production initialization playbook
          3. Import the transit keys
          4. Verify auto-unseal functionality
