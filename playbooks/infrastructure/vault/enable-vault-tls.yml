---
# Enable TLS for Vault Production Cluster
# This will:
# 1. Generate self-signed certificates (temporary until Vault PKI is set up)
# 2. Update Vault configuration to enable TLS
# 3. Restart Vault services
# 4. Update Consul health checks
#
# Usage:
# uv run ansible-playbook playbooks/infrastructure/vault/enable-vault-tls.yml \
#   -i inventory/environments/vault-cluster/production.yaml

- name: Enable TLS for Vault Cluster
  hosts: vault_cluster
  gather_facts: true

  vars:
    vault_validate_certs: "{{ vault_validate_certs | default(false) }}"  # Set to true for production with proper CA
    vault_ca_path: "{{ vault_ca_path | default(omit) }}"  # Optional CA certificate path
    vault_tls_dir: '/opt/vault/tls'
    cert_country: 'US'
    cert_state: 'HomeLabState'
    cert_locality: 'HomeLab'
    cert_org: 'HomeLab'
    cert_ou: 'Infrastructure'
    cert_common_name: '{{ inventory_hostname }}.vault.spaceships.work'
    cert_san: >-
      DNS:{{ inventory_hostname }},
      DNS:{{ inventory_hostname }}.vault.spaceships.work,
      DNS:vault.spaceships.work,
      DNS:vault.service.consul,
      DNS:localhost,
      IP:{{ ansible_default_ipv4.address }},
      IP:127.0.0.1

  pre_tasks:
    - name: Preflight | Validate no hardcoded IPs in play vars
      ansible.builtin.import_tasks: "{{ playbook_dir }}/../../../tasks/validate-no-hardcoded-ips.yml"
      vars:
        validate_hostlike_vars: {}
        validate_allowlist:
          - '127.0.0.1'
          - '::1'
      tags: [preflight]

  tasks:
    - name: Create TLS directory
      ansible.builtin.file:
        path: '{{ vault_tls_dir }}'
        state: directory
        owner: vault
        group: vault
        mode: '0755'
      become: true

    - name: Check if certificates already exist
      ansible.builtin.stat:
        path: '{{ vault_tls_dir }}/tls.crt'
      register: cert_exists
      become: true

    - name: Generate private key
      community.crypto.openssl_privatekey:
        path: '{{ vault_tls_dir }}/tls.key'
        size: 4096
        type: RSA
        owner: vault
        group: vault
        mode: '0400'
      become: true
      when: not cert_exists.stat.exists

    - name: Generate CSR
      community.crypto.openssl_csr:
        path: '{{ vault_tls_dir }}/tls.csr'
        privatekey_path: '{{ vault_tls_dir }}/tls.key'
        country_name: '{{ cert_country }}'
        state_or_province_name: '{{ cert_state }}'
        locality_name: '{{ cert_locality }}'
        organization_name: '{{ cert_org }}'
        organizational_unit_name: '{{ cert_ou }}'
        common_name: '{{ cert_common_name }}'
        subject_alt_name: '{{ cert_san }}'
        owner: vault
        group: vault
        mode: '0644'
      become: true
      when: not cert_exists.stat.exists

    - name: Generate self-signed certificate (temporary)
      community.crypto.x509_certificate:
        path: '{{ vault_tls_dir }}/tls.crt'
        csr_path: '{{ vault_tls_dir }}/tls.csr'
        privatekey_path: '{{ vault_tls_dir }}/tls.key'
        provider: selfsigned
        selfsigned_digest: sha256
        selfsigned_not_after: '+365d'
        owner: vault
        group: vault
        mode: '0644'
      become: true
      when: not cert_exists.stat.exists

    - name: Copy certificate as CA for self-signed setup
      ansible.builtin.copy:
        src: '{{ vault_tls_dir }}/tls.crt'
        dest: '{{ vault_tls_dir }}/ca.crt'
        remote_src: true
        owner: vault
        group: vault
        mode: '0644'
      become: true
      when: not cert_exists.stat.exists

    - name: Backup current Vault configuration
      ansible.builtin.copy:
        src: /etc/vault.d/vault.hcl
        dest: /etc/vault.d/vault.hcl.bak.{{ ansible_date_time.epoch }}
        remote_src: true
        owner: vault
        group: vault
        mode: '0640'
      become: true

    - name: Update Vault configuration to enable TLS (production nodes)
      ansible.builtin.replace:
        path: /etc/vault.d/vault.hcl
        regexp: 'tls_disable = true'
        replace: |
          tls_disable = false
            tls_cert_file = "{{ vault_tls_dir }}/tls.crt"
            tls_key_file = "{{ vault_tls_dir }}/tls.key"
      become: true
      when: vault_role == "production"
      notify: restart vault

    - name: Update cluster_addr to use HTTPS (production nodes)
      ansible.builtin.replace:
        path: /etc/vault.d/vault.hcl
        regexp: 'cluster_addr = "http://(.*):8201"'
        replace: 'cluster_addr = "https://\1:8201"'
      become: true
      when: vault_role == "production"
      notify: restart vault

    - name: Update api_addr to use HTTPS (production nodes)
      ansible.builtin.replace:
        path: /etc/vault.d/vault.hcl
        regexp: 'api_addr = "http://(.*):8200"'
        replace: 'api_addr = "https://\1:8200"'
      become: true
      when: vault_role == "production"
      notify: restart vault

    - name: Note about master node
      ansible.builtin.debug:
        msg:
          - '⚠️ {{ inventory_hostname }} is running in DEV mode'
          - "DEV mode doesn't support TLS configuration"
          - 'This node will continue to run on HTTP for transit unseal'
          - 'Consider migrating to production mode with TLS in future'
      when: vault_role == "master"

  handlers:
    - name: restart vault
      ansible.builtin.systemd:
        name: vault
        state: restarted
        daemon_reload: true
      become: true
      register: vault_restart

    - name: wait for vault to start
      ansible.builtin.wait_for:
        port: 8200
        host: '{{ ansible_default_ipv4.address }}'
        delay: 5
        timeout: 30
      when: vault_restart.changed

- name: Verify TLS is Working
  hosts: vault_cluster
  gather_facts: false

  tasks:
    - name: Test HTTPS connectivity (production nodes)
      ansible.builtin.uri:
        url: 'https://{{ ansible_default_ipv4.address }}:8200/v1/sys/health'
        method: GET
        validate_certs: "{{ vault_validate_certs }}"
        ca_path: "{{ vault_ca_path }}"
        status_code: [200, 429, 473, 501, 503]
      register: https_test
      when: vault_role == "production"
      failed_when: false

    - name: Display TLS verification results
      ansible.builtin.debug:
        msg:
          - "{{ inventory_hostname }}: {{ 'HTTPS ENABLED ✅' if https_test.status is defined and \
              https_test.status in [200, 501, 503] else 'Still on HTTP (DEV mode)' if vault_role == 'master' \
              else 'HTTPS FAILED ❌' }}"

- name: Update Consul Health Checks to Use HTTPS
  hosts: vault_cluster
  gather_facts: true

  tasks:
    - name: Get node-specific token from Infisical
      ansible.builtin.set_fact:
        node_token_name: "CONSUL_TOKEN_{{ inventory_hostname | upper | replace('-', '_') }}"
      when: vault_role == "production"

    - name: Retrieve token from Infisical
      ansible.builtin.shell: |
        infisical secrets get {{ node_token_name }} --env=prod --path=/apollo-13/vault --plain
      delegate_to: localhost
      become: false
      register: consul_token_result
      no_log: true
      environment:
        INFISICAL_UNIVERSAL_AUTH_CLIENT_ID: "{{ lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID') }}"
        INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET: "{{ lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET') }}"
      changed_when: false
      when: vault_role == "production"

    - name: Update Consul service with HTTPS health check
      ansible.builtin.uri:
        url: 'http://127.0.0.1:8500/v1/agent/service/register'
        method: PUT
        headers:
          X-Consul-Token: '{{ consul_token_result.stdout }}'
        body_format: json
        no_log: true
        body:
          ID: 'vault-{{ inventory_hostname }}'
          Name: 'vault'
          HTTP: >-
            {{ 'https' if vault_role == 'production' else 'http' }}://
            {{ ansible_default_ipv4.address }}:8200/v1/sys/health?standbyok=true&perfstandbyok=true
          TLSSkipVerify: "{{ (not vault_validate_certs) | bool }}"
          Tags:
            - "{{ 'transit' if vault_role == 'master' else 'raft' }}"
            - "{{ 'https' if vault_role == 'production' else 'http' }}"
          Port: 8200
          Address: '{{ ansible_default_ipv4.address }}'
          Check:
            CheckID: 'vault-health'
            Name: 'Vault Health Check'
            HTTP: >-
              {{ 'https' if vault_role == 'production' else 'http' }}://
              {{ ansible_default_ipv4.address }}:8200/v1/sys/health?standbyok=true&perfstandbyok=true
            TLSSkipVerify: true
            Interval: '10s'
            Timeout: '5s'
        status_code: 200
      when: vault_role == "production"

    - name: Display final status
      ansible.builtin.debug:
        msg:
          - '✅ TLS has been enabled for {{ inventory_hostname }}'
          - '   - Self-signed certificates generated (temporary)'
          - '   - Vault configuration updated'
          - '   - Consul health checks updated'
          - ''
          - 'Next steps:'
          - '   1. Verify Vault is unsealed and operational'
          - '   2. Set up Vault PKI engine for proper CA'
          - '   3. Replace self-signed certificates with PKI-issued ones'
      when: vault_role == "production"
