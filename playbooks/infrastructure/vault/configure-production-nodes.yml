---
# Configure Production Vault Nodes with Auto-Unseal
# This playbook configures production Vault nodes to use auto-unseal via transit engine

- name: Configure Production Vault Cluster with Auto-Unseal
  hosts: vault_production
  gather_facts: true

  pre_tasks:
    - name: Retrieve Vault transit token securely
      ansible.builtin.include_tasks: "{{ playbook_dir }}/../../../tasks/infisical-secret-lookup.yml"
      vars:
        secret_name: 'VAULT_TRANSIT_TOKEN'
        secret_var_name: 'vault_transit_token'
        fallback_env_var: 'VAULT_TRANSIT_TOKEN'
        infisical_path: '/apollo-13/vault'
      tags: [secrets]

    - name: Validate Infisical transit token is available
      ansible.builtin.fail:
        msg: 'VAULT_TRANSIT_TOKEN not found in Infisical at /apollo-13/vault'
      when: vault_transit_token is undefined or vault_transit_token == ""

    - name: Test connectivity to master Vault
      ansible.builtin.uri:
        url: '{{ vault_master_addr }}/v1/sys/health'
        method: GET
        timeout: 10
      register: master_health_check
      failed_when: false

    - name: Verify master Vault is accessible
      ansible.builtin.fail:
        msg: 'Master Vault at {{ vault_master_addr }} is not accessible'
      when: master_health_check.status != 200

    - name: Test transit engine accessibility
      ansible.builtin.uri:
        url: '{{ vault_master_addr }}/v1/transit/encrypt/autounseal'
        method: POST
        headers:
          X-Vault-Token: '{{ vault_transit_token }}'
        body_format: json
        body:
          plaintext: dGVzdCBkYXRh # base64 encoded "test data"
        status_code: [200, 204]
      register: transit_test
      failed_when: false

    - name: Verify transit engine is working
      ansible.builtin.fail:
        msg: 'Transit engine test failed - check token permissions'
      when: transit_test.status not in [200, 204]

  vars:
    vault_master_addr: 'http://vault-master-lloyd.tailfb3ea.ts.net:8200'

  tasks:
    - name: Generate Vault configuration with auto-unseal
      ansible.builtin.template:
        src: vault-auto-unseal.hcl.j2
        dest: '{{ vault_config_dir }}/vault.hcl'
        owner: '{{ vault_user }}'
        group: '{{ vault_group }}'
        mode: '0640'
        backup: yes
      notify: restart vault
      vars:
        # Pass transit token securely to template
        transit_token: '{{ vault_transit_token }}'

    - name: Create Vault systemd service file
      ansible.builtin.template:
        src: vault.service.j2
        dest: /etc/systemd/system/vault.service
        owner: root
        group: root
        mode: '0644'
      notify:
        - reload systemd
        - restart vault

    - name: Create Vault directories
      ansible.builtin.file:
        path: '{{ item }}'
        state: directory
        owner: '{{ vault_user }}'
        group: '{{ vault_group }}'
        mode: '0750'
      loop:
        - '{{ vault_data_dir }}'
        - '{{ vault_log_dir }}'
        - '{{ vault_config_dir }}'

    - name: Enable and start Vault service
      ansible.builtin.systemd:
        name: vault
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Wait for Vault to be ready
      ansible.builtin.uri:
        url: 'http://{{ ansible_default_ipv4.address }}:8200/v1/sys/health'
        method: GET
      register: vault_health
      until: vault_health.status in [200, 501, 503] # 501=not initialized, 503=sealed
      retries: 30
      delay: 2

    - name: Check if Vault is initialized
      ansible.builtin.uri:
        url: 'http://{{ ansible_default_ipv4.address }}:8200/v1/sys/init'
        method: GET
      register: init_status

    - name: Initialize Vault cluster (first node only)
      ansible.builtin.uri:
        url: 'http://{{ ansible_default_ipv4.address }}:8200/v1/sys/init'
        method: POST
        body_format: json
        body:
          secret_shares: 5
          secret_threshold: 3
          recovery_shares: 5
          recovery_threshold: 3
      register: vault_init
      when:
        - not init_status.json.initialized
        - inventory_hostname == groups['vault_production'][0] # Only first node

    - name: Store Vault root token securely in Infisical
      ansible.builtin.command:
        argv:
          - infisical
          - secrets
          - set
          - VAULT_ROOT_TOKEN={{ vault_init.json.root_token }}
          - --path=/apollo-13/vault
          - --env=prod
      environment:
        INFISICAL_UNIVERSAL_AUTH_CLIENT_ID: "{{ lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID') }}"
        INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET: "{{ lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET') }}"
      delegate_to: localhost
      no_log: true
      changed_when: true
      when: vault_init.json is defined and vault_init.json.root_token is defined

    - name: Store Vault recovery keys securely in Infisical
      ansible.builtin.command:
        argv:
          - infisical
          - secrets
          - set
          - VAULT_RECOVERY_KEY_{{ item.0 + 1 }}={{ item.1 }}
          - --path=/apollo-13/vault/recovery-keys
          - --env=prod
      environment:
        INFISICAL_UNIVERSAL_AUTH_CLIENT_ID: "{{ lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID') }}"
        INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET: "{{ lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET') }}"
      loop: "{{ vault_init.json.recovery_keys | default([]) | with_indexed_items }}"
      delegate_to: localhost
      no_log: true
      changed_when: true
      when: vault_init.json is defined and vault_init.json.recovery_keys is defined

    - name: Display initialization summary
      ansible.builtin.debug:
        msg:
          - 'VAULT INITIALIZATION COMPLETE âœ…'
          - 'Root token and recovery keys have been securely stored in Infisical'
          - ''
          - 'Summary:'
          - "Root Token: Stored as VAULT_ROOT_TOKEN in /apollo-13/vault"
          - >-
            Recovery Keys: {{ vault_init.json.recovery_keys | default([]) | length }}
            keys stored as VAULT_RECOVERY_KEY_1..N in /apollo-13/vault/recovery-keys
          - ''
          - 'Security Notes:'
          - '- Tokens and keys are stored securely using argv to prevent shell interpretation'
          - '- No sensitive data is logged or displayed in playbook output'
          - '- Recovery keys are distributed across separate secure locations'
      when: vault_init.json is defined

    - name: Join Raft cluster (follower nodes)
      ansible.builtin.uri:
        url: 'http://{{ ansible_default_ipv4.address }}:8200/v1/sys/storage/raft/join'
        method: POST
        body_format: json
        body:
          leader_api_addr: "http://{{ groups['vault_production'][0] }}:8200"
        status_code: [200, 204]
      register: raft_join
      when: inventory_hostname != groups['vault_production'][0]
      failed_when: false

    - name: Display cluster status
      ansible.builtin.debug:
        msg:
          - 'Node: {{ inventory_hostname }}'
          - 'Role: {{ vault_role }}'
          - 'Auto-unseal: Enabled via {{ vault_master_addr }}'
          - >-
            Raft join status: {{ 'Leader' if inventory_hostname == groups['vault_production'][0]
            else ('Joined' if raft_join.status in [200, 204] else 'Join Failed') }}
          - ''
          - 'Next steps:'
          - '1. Verify cluster status: vault operator raft list-peers'
          - '2. Configure secret engines and policies'
          - '3. Test auto-unseal functionality'

  handlers:
    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: restart vault
      ansible.builtin.systemd:
        name: vault
        state: restarted
