---
# Setup Consul ACL tokens for Nomad integration
# This playbook creates the necessary ACL policies and tokens for Nomad to register with Consul
#
# Usage:
#   uv run ansible-playbook playbooks/infrastructure/consul-nomad/setup-consul-acl-for-nomad.yml \
#     -i inventory/doggos-homelab/infisical.proxmox.yml

- name: Setup Consul ACL for Nomad Integration
  hosts: nomad-server-1-lloyd
  vars:
    consul_api: "http://127.0.0.1:8500"
    
  tasks:
    - name: Check if Consul ACL is bootstrapped
      ansible.builtin.uri:
        url: "{{ consul_api }}/v1/acl/tokens"
        method: GET
        status_code: [200, 403]
      register: acl_check
      ignore_errors: true

    - name: Bootstrap Consul ACL if needed
      when: acl_check.status == 403 and 'ACL system must be bootstrapped' in (acl_check.json.Errors | default(['']) | join(''))
      block:
        - name: Bootstrap ACL system
          ansible.builtin.uri:
            url: "{{ consul_api }}/v1/acl/bootstrap"
            method: PUT
            body_format: json
          register: bootstrap_result
          
        - name: Save bootstrap token
          ansible.builtin.set_fact:
            consul_management_token: "{{ bootstrap_result.json.SecretID }}"
            
        - name: Display bootstrap token
          ansible.builtin.debug:
            msg: 
              - "IMPORTANT: Save this bootstrap token securely!"
              - "Bootstrap Token: {{ consul_management_token }}"
              - "This token has unlimited permissions and should be stored in Infisical"

    - name: Create Nomad server policy
      ansible.builtin.copy:
        content: |
          # Policy for Nomad servers to integrate with Consul
          agent_prefix "" {
            policy = "read"
          }
          
          node_prefix "" {
            policy = "read"
          }
          
          service_prefix "" {
            policy = "write"
          }
          
          acl = "write"
        dest: /tmp/nomad-server-policy.hcl
        mode: '0644'

    - name: Create Nomad client policy
      ansible.builtin.copy:
        content: |
          # Policy for Nomad clients to integrate with Consul
          agent_prefix "" {
            policy = "read"
          }
          
          node_prefix "" {
            policy = "read"
          }
          
          service_prefix "" {
            policy = "write"
          }
          
          # Allow Nomad clients to update their own node info
          node "" {
            policy = "write"
          }
        dest: /tmp/nomad-client-policy.hcl
        mode: '0644'

    - name: Get existing Consul management token
      when: consul_management_token is not defined
      block:
        - name: Prompt for Consul management token
          ansible.builtin.pause:
            prompt: |
              
              Consul ACL is already bootstrapped. Please provide the management token.
              You can find it in:
              1. The initial bootstrap output
              2. Infisical at /consul/tokens/management (if stored)
              3. Your secure password manager
              
              Enter Consul management token
          register: token_input
          
        - name: Set management token
          ansible.builtin.set_fact:
            consul_management_token: "{{ token_input.user_input }}"

    - name: Create Nomad server ACL policy
      ansible.builtin.uri:
        url: "{{ consul_api }}/v1/acl/policy"
        method: PUT
        headers:
          X-Consul-Token: "{{ consul_management_token }}"
        body_format: json
        body:
          Name: "nomad-server"
          Description: "Policy for Nomad servers"
          Rules: |
            agent_prefix "" {
              policy = "read"
            }
            node_prefix "" {
              policy = "read"
            }
            service_prefix "" {
              policy = "write"
            }
            acl = "write"
      register: server_policy
      failed_when: false

    - name: Create Nomad client ACL policy
      ansible.builtin.uri:
        url: "{{ consul_api }}/v1/acl/policy"
        method: PUT
        headers:
          X-Consul-Token: "{{ consul_management_token }}"
        body_format: json
        body:
          Name: "nomad-client"
          Description: "Policy for Nomad clients"
          Rules: |
            agent_prefix "" {
              policy = "read"
            }
            node_prefix "" {
              policy = "read"
            }
            service_prefix "" {
              policy = "write"
            }
            node "" {
              policy = "write"
            }
      register: client_policy
      failed_when: false

    - name: Create token for Nomad servers
      ansible.builtin.uri:
        url: "{{ consul_api }}/v1/acl/token"
        method: PUT
        headers:
          X-Consul-Token: "{{ consul_management_token }}"
        body_format: json
        body:
          Description: "Token for Nomad server integration"
          Policies:
            - Name: "nomad-server"
          ServiceIdentities:
            - ServiceName: "nomad"
      register: server_token_result

    - name: Create token for Nomad clients
      ansible.builtin.uri:
        url: "{{ consul_api }}/v1/acl/token"
        method: PUT
        headers:
          X-Consul-Token: "{{ consul_management_token }}"
        body_format: json
        body:
          Description: "Token for Nomad client integration"
          Policies:
            - Name: "nomad-client"
          ServiceIdentities:
            - ServiceName: "nomad-client"
      register: client_token_result

    - name: Save tokens
      ansible.builtin.set_fact:
        nomad_server_token: "{{ server_token_result.json.SecretID }}"
        nomad_client_token: "{{ client_token_result.json.SecretID }}"

    - name: Display tokens
      ansible.builtin.debug:
        msg:
          - "=== CONSUL ACL TOKENS FOR NOMAD ==="
          - ""
          - "Nomad Server Token: {{ nomad_server_token }}"
          - "Nomad Client Token: {{ nomad_client_token }}"
          - ""
          - "Store these in Infisical at:"
          - "  /consul/tokens/nomad-server"
          - "  /consul/tokens/nomad-client"

    - name: Create token storage script
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          # Store Consul tokens in Infisical
          
          echo "Storing Consul tokens in Infisical..."
          
          # Store management token (if newly created)
          {% if consul_management_token is defined %}
          infisical secrets set MANAGEMENT="{{ consul_management_token }}" \
            --path="/consul/tokens" \
            --env=dev
          {% endif %}
          
          # Store Nomad tokens
          infisical secrets set NOMAD_SERVER="{{ nomad_server_token }}" \
            --path="/consul/tokens" \
            --env=dev
            
          infisical secrets set NOMAD_CLIENT="{{ nomad_client_token }}" \
            --path="/consul/tokens" \
            --env=dev
          
          echo "Tokens stored successfully!"
        dest: /tmp/store-consul-tokens.sh
        mode: '0755'
      delegate_to: localhost

- name: Update Nomad Configuration with Consul Tokens
  hosts: tag_nomad
  become: true
  vars:
    nomad_config_file: /etc/nomad.d/nomad.hcl
    
  tasks:
    - name: Get node type
      ansible.builtin.shell: |
        grep -q "^server {" {{ nomad_config_file }} && echo "server" || echo "client"
      register: node_type
      changed_when: false

    - name: Set appropriate token
      ansible.builtin.set_fact:
        consul_token: "{{ hostvars['nomad-server-1-lloyd']['nomad_server_token'] if node_type.stdout == 'server' else hostvars['nomad-server-1-lloyd']['nomad_client_token'] }}"

    - name: Update Consul stanza with token
      ansible.builtin.blockinfile:
        path: "{{ nomad_config_file }}"
        marker: "# {mark} ANSIBLE MANAGED CONSUL CONFIG WITH TOKEN"
        block: |
          consul {
            address = "127.0.0.1:8500"
            token = "{{ consul_token }}"
            
            # Enable service registration
            auto_advertise = true
            server_auto_join = true
            client_auto_join = true
            
            # Service names
            server_service_name = "nomad"
            client_service_name = "nomad-client"
            
            # Enable service checks
            checks_use_advertise = true
            
            # Keep existing identity settings
            service_identity {
              enabled = true
              auto    = true
            }
            
            task_identity {
              enabled = true
            }
          }
        state: present
        validate: "nomad config validate %s"
      register: config_updated

    - name: Restart Nomad if configuration changed
      ansible.builtin.systemd:
        name: nomad
        state: restarted
        daemon_reload: true
      when: config_updated.changed

    - name: Wait for Nomad to be ready
      ansible.builtin.wait_for:
        port: 4646
        host: "{{ ansible_default_ipv4.address }}"
        delay: 5
        timeout: 30
      when: config_updated.changed

- name: Verify Integration
  hosts: nomad-server-1-lloyd
  tasks:
    - name: Wait for services to register
      ansible.builtin.pause:
        seconds: 15

    - name: Check Consul for Nomad services with token
      ansible.builtin.command: |
        consul catalog services -token={{ hostvars['nomad-server-1-lloyd']['consul_management_token'] }}
      register: consul_services
      changed_when: false

    - name: Display registered services
      ansible.builtin.debug:
        msg: 
          - "Registered services in Consul:"
          - "{{ consul_services.stdout_lines }}"

    - name: Check Nomad service details
      ansible.builtin.command: |
        consul catalog nodes -service=nomad -token={{ hostvars['nomad-server-1-lloyd']['consul_management_token'] }}
      register: nomad_nodes
      changed_when: false
      failed_when: false

    - name: Display Nomad nodes in Consul
      ansible.builtin.debug:
        msg: "{{ nomad_nodes.stdout_lines }}"
      when: nomad_nodes.rc == 0

    - name: Final status
      ansible.builtin.debug:
        msg: |
          {% if 'nomad' in consul_services.stdout %}
          ✅ SUCCESS: Consul-Nomad integration is working!
          {% else %}
          ❌ FAILED: Nomad services not found in Consul
          {% endif %}