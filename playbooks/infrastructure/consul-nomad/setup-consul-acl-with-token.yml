---
# Setup Consul ACL tokens for Nomad integration using existing master token
# This playbook creates the necessary ACL policies and tokens for Nomad to register with Consul
#
# Usage:
#   uv run ansible-playbook playbooks/infrastructure/consul-nomad/setup-consul-acl-with-token.yml \
#     -i inventory/doggos-homelab/infisical.proxmox.yml

- name: Setup Consul ACL for Nomad Integration
  hosts: nomad-server-1-lloyd
  vars:
    consul_api: 'http://127.0.0.1:8500'
    consul_management_token: >-
      {{ (lookup('infisical.vault.read_secrets',
                 universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                 universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                 project_id='7b832220-24c0-45bc-a5f1-ce9794a31259',
                 env_slug='dev',
                 path='/apollo-13/consul',
                 secret_name='CONSUL_MASTER_TOKEN')).value }}

  tasks:
    - name: Test Consul API with management token
      ansible.builtin.uri:
        url: '{{ consul_api }}/v1/status/leader'
        method: GET
        headers:
          X-Consul-Token: '{{ consul_management_token }}'
      register: consul_test

    - name: Create Nomad server ACL policy
      ansible.builtin.uri:
        url: '{{ consul_api }}/v1/acl/policy'
        method: PUT
        headers:
          X-Consul-Token: '{{ consul_management_token }}'
        body_format: json
        body:
          Name: 'nomad-server'
          Description: 'Policy for Nomad servers'
          Rules: |
            agent_prefix "" {
              policy = "read"
            }
            node_prefix "" {
              policy = "read"
            }
            service_prefix "" {
              policy = "write"
            }
            acl = "write"
      register: server_policy
      failed_when: false

    - name: Create Nomad client ACL policy
      ansible.builtin.uri:
        url: '{{ consul_api }}/v1/acl/policy'
        method: PUT
        headers:
          X-Consul-Token: '{{ consul_management_token }}'
        body_format: json
        body:
          Name: 'nomad-client'
          Description: 'Policy for Nomad clients'
          Rules: |
            agent_prefix "" {
              policy = "read"
            }
            node_prefix "" {
              policy = "read"
            }
            service_prefix "" {
              policy = "write"
            }
            node "" {
              policy = "write"
            }
      register: client_policy
      failed_when: false

    - name: Create token for Nomad servers
      ansible.builtin.uri:
        url: '{{ consul_api }}/v1/acl/token'
        method: PUT
        headers:
          X-Consul-Token: '{{ consul_management_token }}'
        body_format: json
        body:
          Description: 'Token for Nomad server integration'
          Policies:
            - Name: 'nomad-server'
      register: server_token_result

    - name: Create token for Nomad clients
      ansible.builtin.uri:
        url: '{{ consul_api }}/v1/acl/token'
        method: PUT
        headers:
          X-Consul-Token: '{{ consul_management_token }}'
        body_format: json
        body:
          Description: 'Token for Nomad client integration'
          Policies:
            - Name: 'nomad-client'
      register: client_token_result

    - name: Save tokens
      ansible.builtin.set_fact:
        nomad_server_token: '{{ server_token_result.json.SecretID }}'
        nomad_client_token: '{{ client_token_result.json.SecretID }}'

    - name: Display tokens
      ansible.builtin.debug:
        msg:
          - '=== CONSUL ACL TOKENS FOR NOMAD ==='
          - ''
          - 'Nomad Server Token: {{ nomad_server_token }}'
          - 'Nomad Client Token: {{ nomad_client_token }}'
          - ''
          - 'These tokens will be automatically applied to Nomad configuration'

    - name: Store tokens in Infisical
      delegate_to: localhost
      block:
        - name: Store Nomad server token
          ansible.builtin.shell: |
            export INFISICAL_CLIENT_ID="{{ lookup('env', 'INFISICAL_CLIENT_ID') }}"
            export INFISICAL_CLIENT_SECRET="{{ lookup('env', 'INFISICAL_CLIENT_SECRET') }}"
            infisical secrets set NOMAD_SERVER_TOKEN="{{ nomad_server_token }}" \
              --projectId="7b832220-24c0-45bc-a5f1-ce9794a31259" \
              --path="/apollo-13/consul" \
              --env=dev

        - name: Store Nomad client token
          ansible.builtin.shell: |
            export INFISICAL_CLIENT_ID="{{ lookup('env', 'INFISICAL_CLIENT_ID') }}"
            export INFISICAL_CLIENT_SECRET="{{ lookup('env', 'INFISICAL_CLIENT_SECRET') }}"
            infisical secrets set NOMAD_CLIENT_TOKEN="{{ nomad_client_token }}" \
              --projectId="7b832220-24c0-45bc-a5f1-ce9794a31259" \
              --path="/apollo-13/consul" \
              --env=dev

- name: Update Nomad Configuration with Consul Tokens
  hosts: tag_nomad
  become: true
  vars:
    nomad_config_file: /etc/nomad.d/nomad.hcl

  tasks:
    - name: Get node type
      ansible.builtin.shell: |
        grep -q "^server {" {{ nomad_config_file }} && echo "server" || echo "client"
      register: node_type
      changed_when: false

    - name: Set appropriate token
      ansible.builtin.set_fact:
        consul_token: "{{ hostvars['nomad-server-1-lloyd']['nomad_server_token'] if node_type.stdout == 'server' else hostvars['nomad-server-1-lloyd']['nomad_client_token'] }}"

    - name: Update Consul stanza with token
      ansible.builtin.blockinfile:
        path: '{{ nomad_config_file }}'
        marker: '# {mark} ANSIBLE MANAGED CONSUL CONFIG WITH TOKEN'
        block: |
          consul {
            address = "127.0.0.1:8500"
            token = "{{ consul_token }}"

            # Enable service registration
            auto_advertise = true
            server_auto_join = true
            client_auto_join = true

            # Service names
            server_service_name = "nomad"
            client_service_name = "nomad-client"

            # Enable service checks
            checks_use_advertise = true

            # Keep existing identity settings
            service_identity {
              enabled = true
              auto    = true
            }

            task_identity {
              enabled = true
            }
          }
        state: present
        validate: 'nomad config validate %s'
      register: config_updated

    - name: Restart Nomad if configuration changed
      ansible.builtin.systemd:
        name: nomad
        state: restarted
        daemon_reload: true
      when: config_updated.changed

    - name: Wait for Nomad to be ready
      ansible.builtin.wait_for:
        port: 4646
        host: '{{ ansible_default_ipv4.address }}'
        delay: 5
        timeout: 30
      when: config_updated.changed

- name: Verify Integration
  hosts: nomad-server-1-lloyd
  vars:
    consul_management_token: >-
      {{ (lookup('infisical.vault.read_secrets',
                 universal_auth_client_id=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_ID'),
                 universal_auth_client_secret=lookup('env', 'INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET'),
                 project_id='7b832220-24c0-45bc-a5f1-ce9794a31259',
                 env_slug='dev',
                 path='/apollo-13/consul',
                 secret_name='CONSUL_MASTER_TOKEN')).value }}

  tasks:
    - name: Wait for services to register
      ansible.builtin.pause:
        seconds: 15

    - name: Check Consul for Nomad services
      ansible.builtin.command: |
        consul catalog services -token={{ consul_management_token }}
      register: consul_services
      changed_when: false

    - name: Display registered services
      ansible.builtin.debug:
        msg:
          - 'Registered services in Consul:'
          - '{{ consul_services.stdout_lines }}'

    - name: Check Nomad service details
      ansible.builtin.command: |
        consul catalog nodes -service=nomad -token={{ consul_management_token }}
      register: nomad_nodes
      changed_when: false
      failed_when: false

    - name: Display Nomad nodes in Consul
      ansible.builtin.debug:
        msg: '{{ nomad_nodes.stdout_lines }}'
      when: nomad_nodes.rc == 0

    - name: Final status
      ansible.builtin.debug:
        msg: |
          {% if 'nomad' in consul_services.stdout %}
          ✅ SUCCESS: Consul-Nomad integration is working!
          Nomad services are now registered in Consul.
          {% else %}
          ❌ FAILED: Nomad services not found in Consul
          Check Nomad logs for errors.
          {% endif %}
