---
# Enable Consul-Nomad Integration on doggos-homelab cluster
# This playbook configures Nomad to integrate with Consul for service discovery
# and automated service registration
#
# Usage:
#   uv run ansible-playbook playbooks/consul-nomad-integration.yml \
#     -i inventory/doggos-homelab/infisical.proxmox.yml
#   uv run ansible-playbook playbooks/consul-nomad-integration.yml \
#     -i inventory/doggos-homelab/infisical.proxmox.yml --check
#   uv run ansible-playbook playbooks/consul-nomad-integration.yml \
#     -i inventory/doggos-homelab/infisical.proxmox.yml --tags backup
#   uv run ansible-playbook playbooks/consul-nomad-integration.yml \
#     -i inventory/doggos-homelab/infisical.proxmox.yml --tags verify

- name: Enable Consul-Nomad Integration
  hosts: tag_nomad
  gather_facts: true
  become: true
  vars:
    nomad_config_dir: /etc/nomad.d
    nomad_config_file: "{{ nomad_config_dir }}/nomad.hcl"
    backup_dir: "/var/backups/nomad/{{ ansible_date_time.date }}"
    consul_address: "127.0.0.1:8500"
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}"
    report_dir: "{{ playbook_dir }}/../reports/nomad"

  tasks:
    # Pre-flight checks
    - name: Pre-flight checks
      tags: [always]
      block:
        - name: Verify Nomad is installed
          ansible.builtin.command: which nomad
          register: nomad_installed
          changed_when: false
          failed_when: nomad_installed.rc != 0

        - name: Verify Consul is running
          ansible.builtin.systemd:
            name: consul
            state: started
          register: consul_service
          failed_when: consul_service.status.ActiveState != 'active'

        - name: Test Consul API connectivity
          ansible.builtin.uri:
            url: "http://{{ consul_address }}/v1/status/leader"
            method: GET
            timeout: 5
          register: consul_api_test
          failed_when: consul_api_test.status != 200

    # Backup existing configuration
    - name: Backup existing configuration
      tags: [backup]
      block:
        - name: Create backup directory
          ansible.builtin.file:
            path: "{{ backup_dir }}"
            state: directory
            mode: '0755'
            owner: root
            group: root

        - name: Check if Nomad config exists
          ansible.builtin.stat:
            path: "{{ nomad_config_file }}"
          register: config_stat

        - name: Backup current Nomad configuration
          ansible.builtin.copy:
            src: "{{ nomad_config_file }}"
            dest: "{{ backup_dir }}/nomad.hcl.{{ timestamp }}"
            remote_src: true
            mode: '0644'
          when: config_stat.stat.exists

        - name: Backup entire config directory
          ansible.builtin.archive:
            path: "{{ nomad_config_dir }}"
            dest: "{{ backup_dir }}/nomad-config-{{ timestamp }}.tar.gz"
            format: gz
          when: config_stat.stat.exists

    # Determine node type and configure accordingly
    - name: Configure Consul integration
      tags: [configure]
      block:
        - name: Check if this is a Nomad server
          ansible.builtin.shell: |
            grep -q "^server {" {{ nomad_config_file }} && echo "server" || echo "client"
          register: node_type
          changed_when: false

        - name: Read current Nomad configuration
          ansible.builtin.slurp:
            src: "{{ nomad_config_file }}"
          register: current_config

        - name: Check if consul stanza already exists
          ansible.builtin.set_fact:
            consul_configured: "{{ 'consul {' in current_config.content | b64decode }}"

        - name: Add Consul stanza to Nomad configuration
          ansible.builtin.blockinfile:
            path: "{{ nomad_config_file }}"
            marker: "# {mark} ANSIBLE MANAGED CONSUL INTEGRATION"
            block: |
              # Consul integration configuration
              consul {
                # The address to the Consul agent
                address = "{{ consul_address }}"

                # Automatically register Nomad services with Consul
                auto_advertise = true

                # Automatically register server with Consul
                server_auto_join = true

                # Automatically register client with Consul
                client_auto_join = true

                # Service name for Nomad servers in Consul
                {% if node_type.stdout == 'server' %}
                server_service_name = "nomad"
                {% endif %}

                # Service name for Nomad clients in Consul
                {% if node_type.stdout == 'client' %}
                client_service_name = "nomad-client"
                {% endif %}

                # Check name for Nomad services in Consul
                checks_use_advertise = true
              }
            insertafter: "^data_dir"
            validate: "nomad config validate %s"
            backup: true
          when: not consul_configured
          register: config_updated

        - name: Validate Nomad configuration
          ansible.builtin.command: nomad config validate {{ nomad_config_file }}
          changed_when: false

    # Restart Nomad service if configuration changed
    - name: Restart Nomad service
      tags: [restart]
      when: config_updated is changed
      block:
        - name: Restart Nomad service
          ansible.builtin.systemd:
            name: nomad
            state: restarted
            daemon_reload: true
          register: nomad_restart

        - name: Wait for Nomad to be ready
          ansible.builtin.wait_for:
            port: "{{ '4647' if node_type.stdout == 'server' else '4646' }}"
            host: "{{ ansible_default_ipv4.address }}"
            timeout: 30
            delay: 5

        - name: Verify Nomad is running after restart
          ansible.builtin.systemd:
            name: nomad
            state: started
          register: nomad_status
          failed_when: nomad_status.status.ActiveState != 'active'

    # Verification tasks
    - name: Verify Consul integration
      tags: [verify]
      block:
        - name: Wait for services to register (if configuration was updated)
          ansible.builtin.pause:
            seconds: 10
          when: config_updated is changed

        - name: Query Consul for Nomad services
          ansible.builtin.uri:
            url: "http://{{ consul_address }}/v1/catalog/services"
            method: GET
          register: consul_services
          delegate_to: "{{ inventory_hostname }}"

        - name: Check if Nomad services are registered
          ansible.builtin.set_fact:
            nomad_in_consul: "{{ 'nomad' in consul_services.json }}"
            nomad_client_in_consul: >-
              {{ 'nomad-client' in consul_services.json }}

        - name: Get Nomad service details from Consul
          ansible.builtin.uri:
            url: >-
              http://{{ consul_address }}/v1/catalog/service/{{
              'nomad' if node_type.stdout == 'server' else 'nomad-client' }}
            method: GET
          register: nomad_service_details
          when: >-
            (node_type.stdout == 'server' and nomad_in_consul) or
            (node_type.stdout == 'client' and nomad_client_in_consul)

        - name: Compile node integration status
          ansible.builtin.set_fact:
            integration_status:
              hostname: "{{ ansible_hostname }}"
              node_type: "{{ node_type.stdout }}"
              consul_stanza_configured: true
              nomad_service_registered: >-
                {{ nomad_in_consul if node_type.stdout == 'server'
                else nomad_client_in_consul }}
              service_details: >-
                {{ nomad_service_details.json | default([]) }}
              timestamp: "{{ ansible_date_time.iso8601 }}"

        - name: Display integration status
          ansible.builtin.debug:
            msg:
              - "Node: {{ ansible_hostname }} ({{ node_type.stdout }})"
              - "Consul integration: {{ 'Enabled'
                if integration_status.consul_stanza_configured else 'Not configured' }}"
              - "Service registered in Consul: {{ 'Yes' if integration_status.nomad_service_registered else 'No' }}"
              - "Service instances: {{ integration_status.service_details | length }}"

# Generate summary report
- name: Generate integration summary report
  hosts: localhost
  gather_facts: true
  vars:
    report_dir: "{{ playbook_dir }}/../reports/nomad"
    timestamp: "{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}"

  tasks:
    - name: Create report directory
      ansible.builtin.file:
        path: "{{ report_dir }}"
        state: directory
        mode: '0755'

    - name: Query Consul for all Nomad services
      ansible.builtin.uri:
        url: "http://192.168.11.11:8500/v1/catalog/service/nomad"
        method: GET
      register: nomad_servers_in_consul
      failed_when: false

    - name: Query Consul for all Nomad client services
      ansible.builtin.uri:
        url: "http://192.168.11.11:8500/v1/catalog/service/nomad-client"
        method: GET
      register: nomad_clients_in_consul
      failed_when: false

    - name: Generate integration report
      ansible.builtin.copy:
        content: |
          # Consul-Nomad Integration Report
          Generated: {{ ansible_date_time.iso8601 }}

          ## Summary
          - Playbook execution completed successfully
          - All Nomad nodes now have Consul integration configured
          - Services are automatically registering with Consul

          ## Registered Services in Consul

          ### Nomad Servers
          {% if nomad_servers_in_consul.json is defined %}
          Total registered: {{ nomad_servers_in_consul.json | length }}
          {% for service in nomad_servers_in_consul.json %}
          - {{ service.Node }} ({{ service.Address }}:{{ service.ServicePort }})
          {% endfor %}
          {% else %}
          No Nomad server services found in Consul
          {% endif %}

          ### Nomad Clients
          {% if nomad_clients_in_consul.json is defined %}
          Total registered: {{ nomad_clients_in_consul.json | length }}
          {% for service in nomad_clients_in_consul.json %}
          - {{ service.Node }} ({{ service.Address }}:{{ service.ServicePort }})
          {% endfor %}
          {% else %}
          No Nomad client services found in Consul
          {% endif %}

          ## Next Steps
          1. Verify service health checks in Consul UI
          2. Test service discovery using Consul DNS
          3. Deploy a test job that uses Consul for service discovery
          4. Configure Consul Connect for secure service mesh (optional)

          ## Verification Commands
          ```bash
          # Check Nomad services in Consul
          consul catalog services

          # Check specific service details
          consul catalog nodes -service=nomad
          consul catalog nodes -service=nomad-client

          # Test DNS resolution
          dig @127.0.0.1 -p 8600 nomad.service.consul
          dig @127.0.0.1 -p 8600 nomad-client.service.consul

          # Check from Nomad side
          nomad server members
          nomad node status
          ```
        dest: "{{ report_dir }}/consul-nomad-integration-{{ timestamp }}.md"
        mode: '0644'

    - name: Display completion message
      ansible.builtin.debug:
        msg:
          - "Consul-Nomad integration configuration complete!"
          - "Report saved to: {{ report_dir }}/consul-nomad-integration-{{ timestamp }}.md"
          - ""
          - "Run the following command to verify integration:"
          - "  consul catalog services | grep nomad"
