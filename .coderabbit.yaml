# yaml-language-server: $schema=https://coderabbit.ai/integrations/schema.v2.json

# CodeRabbit configuration for andromeda-orchestration infrastructure automation repository
# This configuration is tailored for Ansible, Terraform, Nomad, and infrastructure-as-code workflows

# Review settings
reviews:
  # Request reviews for all pull requests
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "## Summary\n\nThis PR modifies infrastructure automation components. Please review for:\n- Security implications and secrets management\n- Infrastructure best practices and HashiCorp standards\n- Compatibility with existing Nomad/Consul/Vault services\n- Documentation updates for operational procedures"
  poem: false
  review_status: true
  collapse_walkthrough: false

  # Enable enhanced features for infrastructure repos
  enable_free_tier: true

  # Auto-review configuration
  auto_review:
    enabled: true
    labels: []
    ignore_title_keywords:
      - "WIP"
      - "DO NOT MERGE"
      - "[WIP]"
      - "[DRAFT]"
      - "DRAFT:"
    drafts: false
    base_branches:
      - main
      - develop
      - '^feat/.*$'
      - '^feature/.*$'
      - '^hotfix/.*$'

  # Tool configurations for linting and security
  tools:
    # Python linting with ruff
    ruff:
      enabled: true

    # YAML linting
    yamllint:
      enabled: true

    # Shell script linting
    shellcheck:
      enabled: true

    # Markdown linting
    markdownlint:
      enabled: true

    # GitHub Actions workflow linting
    actionlint:
      enabled: true

    # GitHub checks integration
    github-checks:
      enabled: true

    # Secret detection
    gitleaks:
      enabled: true

    # Infrastructure as code security scanning
    checkov:
      enabled: true

    # Dockerfile linting
    hadolint:
      enabled: true

  # Path filters - what to review (exclusions use '!' prefix)
  path_filters:
    - "**/*.yml"
    - "**/*.yaml"
    - "**/*.py"
    - "**/*.j2"
    - "**/*.hcl"
    - "**/*.nomad"
    - "**/*.tf"
    - "**/*.md"
    - "**/Dockerfile"
    - "**/*.sh"
    - ".github/**"
    - "!**/*.lock"
    - "!**/package-lock.json"
    - "!**/.terraform.lock.hcl"
    - "!**/ansible.cfg"
    - "!docs/archive/**"
    - "!**/*.log"
    - "!**/*.tmp"
    - "!.venv/**"
    - "!venv/**"
    - "!__pycache__/**"

  # Review instructions specific to this infrastructure automation repository
  path_instructions:
    - path: "**/*.yml"
      instructions: |
        Review Ansible playbook syntax and YAML structure for best practices.
        Ensure proper task naming, idempotency, and error handling.
        Verify variables are properly templated and not hardcoded.
        Check for correct use of handlers, conditionals, and loops.
        Validate that all secrets use Infisical lookups or environment variables.

    - path: "**/*.yaml"
      instructions: |
        Review YAML syntax and structure for consistency with project standards.
        For Nomad job files, ensure proper resource allocation and health checks.
        For Docker Compose files, verify service dependencies and networking.
        Check for proper indentation and YAML best practices.

    - path: "**/*.hcl"
      instructions: |
        Review Nomad job specifications for HashiCorp best practices.
        Ensure proper resource constraints (CPU, memory, disk).
        Verify service definitions include health checks and proper networking.
        Check for appropriate restart policies and update strategies.
        Validate template stanzas use proper escaping and variable references.

    - path: "**/*.nomad"
      instructions: |
        Focus on Nomad-specific syntax and job deployment patterns.
        Ensure proper constraint definitions for node placement.
        Verify volume mounts and persistent storage configurations.
        Check for appropriate service registration with Consul.
        Validate network modes and port allocations follow project standards.

    - path: "**/*.tf"
      instructions: |
        Review Terraform configurations for best practices and security.
        Ensure proper resource naming conventions and tagging.
        Verify state management and backend configurations.
        Check for appropriate use of variables, outputs, and modules.
        Validate that sensitive values use proper variable types.

    - path: "**/*.py"
      instructions: |
        Review Python code for PEP 8 compliance and best practices.
        Ensure proper error handling and logging.
        Verify API integrations use proper authentication and retries.
        Check for appropriate use of type hints and docstrings.
        Validate that scripts work with 'uv run' execution as per CLAUDE.md.

    - path: "**/*.j2"
      instructions: |
        Review Jinja2 templates for proper syntax and security.
        Ensure variables are properly escaped to prevent injection.
        Verify template logic is clear and maintainable.
        Check for appropriate use of filters and functions.

    - path: "**/*.sh"
      instructions: |
        Review shell scripts for POSIX compliance and best practices.
        Ensure proper error handling with set -euo pipefail.
        Verify variables are properly quoted and escaped.
        Check for appropriate use of functions and error checking.
        Validate that scripts handle edge cases and provide useful output.

    - path: "playbooks/**/*"
      instructions: |
        Focus on Ansible playbook structure and operational safety.
        Ensure playbooks are idempotent and can be run multiple times safely.
        Verify proper use of tags for selective execution.
        Check that inventory references use dynamic inventory plugins.
        Validate that sensitive operations have appropriate confirmation prompts.

    - path: "nomad-jobs/**/*"
      instructions: |
        Review Nomad job configurations for production readiness.
        Ensure proper resource allocation and scaling policies.
        Verify service mesh integration and networking configurations.
        Check for appropriate logging and monitoring configurations.
        Validate that persistent storage is configured correctly.

    - path: "docs/**/*"
      instructions: |
        Review documentation for clarity, accuracy, and completeness.
        Ensure operational procedures are well-documented.
        Verify that architectural decisions are properly explained.
        Check for proper markdown formatting and link validity.
        Validate that examples and commands are current and functional.

    - path: "inventory/**/*"
      instructions: |
        Review inventory configurations for accuracy and security.
        Ensure dynamic inventory plugins are properly configured.
        Verify group variables and host variables are appropriately scoped.
        Check that sensitive inventory data uses proper encryption.

    - path: ".github/**/*"
      instructions: |
        Review CI/CD workflow configurations for efficiency and security.
        Ensure proper secret management in workflows.
        Verify that workflows follow infrastructure deployment best practices.
        Check for appropriate use of caching and artifact management.
        Validate that security scanning and linting steps are included.

  # Automatic labeling instructions for PRs
  labeling_instructions:
    # Infrastructure and DevOps
    - label: "üèóÔ∏è infrastructure"
      instructions: "Apply when PR modifies infrastructure provisioning, Nomad jobs, Consul services, or cluster management"
    - label: "üèóÔ∏è terraform"
      instructions: "Apply when PR modifies Terraform configurations or Infrastructure as Code"
    - label: "ü§ñ ansible"
      instructions: "Apply when PR modifies Ansible playbooks, roles, or configuration management"
    - label: "üîß crew-devops"
      instructions: "Apply when PR modifies infrastructure code, DevOps tooling, or operational processes"
    - label: "‚òÅÔ∏è cloud"
      instructions: "Apply when PR involves cloud platform services, resources, or configurations"
    - label: "üåê networking"
      instructions: "Apply when PR modifies network configuration, DNS, firewalls, or network security"
    - label: "üíæ database"
      instructions: "Apply when PR modifies database operations, PostgreSQL, or data management"
    - label: "üì± container"
      instructions: "Apply when PR modifies Docker configurations, containerized applications, or container orchestration"

    # API and Integration
    - label: "‚ö° api"
      instructions: "Apply when PR modifies NetBox API integration, inventory plugins, or external API integrations"
    - label: "üîå mcp-server"
      instructions: "Apply when PR modifies Model Context Protocol server development or MCP integrations"
    - label: "üîÑ automation"
      instructions: "Apply when PR adds workflow automation, process improvements, or task automation"

    # Security and Secrets
    - label: "üîí security"
      instructions: "Apply when PR addresses security vulnerabilities, authentication, or authorization"
    - label: "üîê secrets-mgmt"
      instructions: "Apply when PR modifies SOPS configuration, Infisical integration, or secrets management"
    - label: "üõ°Ô∏è policy"
      instructions: "Apply when PR modifies OPA/Rego policies or infrastructure security policies"
    - label: "üîê auth"
      instructions: "Apply when PR modifies authentication systems or authorization frameworks"

    # Monitoring and Observability
    - label: "üìä monitoring"
      instructions: "Apply when PR modifies Netdata, monitoring configurations, or observability systems"
    - label: "üìà metrics"
      instructions: "Apply when PR adds performance metrics, monitoring dashboards, or telemetry"
    - label: "üíæ backup-restore"
      instructions: "Apply when PR modifies backup strategies, disaster recovery, or data protection"

    # Development and Code Quality
    - label: "üêõ bug"
      instructions: "Apply when PR fixes bugs, resolves issues, or corrects errors"
    - label: "‚ú® enhancement"
      instructions: "Apply when PR adds new features, capabilities, or improvements"
    - label: "üßπ refactor"
      instructions: "Apply when PR refactors code without changing functionality"
    - label: "‚ö° performance"
      instructions: "Apply when PR includes performance optimization, caching, or efficiency improvements"
    - label: "üíé breaking-change"
      instructions: "Apply when PR introduces breaking changes to APIs, configurations, or interfaces"

    # Documentation and Configuration
    - label: "üìö documentation"
      instructions: "Apply when PR updates README.md, CLAUDE.md, or documentation in docs/ directory"
    - label: "üìù crew-docs"
      instructions: "Apply when PR significantly updates documentation or adds comprehensive guides"
    - label: "üîß config"
      instructions: "Apply when PR modifies configuration files, settings, or environment configurations"
    - label: "üìã template"
      instructions: "Apply when PR adds or modifies templates, boilerplate code, or reusable patterns"

    # Dependencies and Automation
    - label: "üì¶ dependencies"
      instructions: "Apply when PR updates Python packages, Ansible collections, or dependency versions"
    - label: "ü§ñ renovate"
      instructions: "Apply when PR is created by Renovate bot for automated dependency updates"
    - label: "ü§ñ dependabot"
      instructions: "Apply when PR is created by Dependabot for automated security updates"
    - label: "üîÑ ci-cd"
      instructions: "Apply when PR modifies GitHub workflows, CI/CD pipelines, or automation processes"

    # Testing and Quality
    - label: "üß™ testing"
      instructions: "Apply when PR adds or modifies tests, test automation, or testing infrastructure"
    - label: "üß™ staging"
      instructions: "Apply when PR affects staging environment or staging-specific configurations"
    - label: "üîç linting"
      instructions: "Apply when PR modifies linting rules, code quality tools, or static analysis"

    # Platform and Environment Specific
    - label: "üåç production"
      instructions: "Apply when PR affects production environment or production-critical systems"
    - label: "üíª development"
      instructions: "Apply when PR affects development environment or developer experience"
    - label: "üè† local"
      instructions: "Apply when PR affects local development setup or local environment configuration"

    # Language and Tool Specific
    - label: "üêç python"
      instructions: "Apply when PR modifies Python scripts, modules, or Python-based automation"
    - label: "üêö shell"
      instructions: "Apply when PR modifies shell scripts, bash automation, or command-line tools"
    - label: "üîå cli"
      instructions: "Apply when PR modifies command-line interfaces or CLI tool configurations"

    # Process and Workflow
    - label: "üè∑Ô∏è auto-labeled"
      instructions: "Apply to all PRs to indicate CodeRabbit has automatically reviewed and labeled"
    - label: "üéØ mission-critical"
      instructions: "Apply when PR affects essential systems for project success and mission completion"
    - label: "üÜò emergency"
      instructions: "Apply when PR addresses critical system issues requiring immediate attention"

# Chat settings
chat:
  auto_reply: true

# Enable early access features
early_access: true
