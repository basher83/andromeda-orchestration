---
# Install Vault
# Based on HashiCorp official installation patterns

- name: install | Create vault group
  ansible.builtin.group:
    name: '{{ vault_group }}'
    system: true
    state: present

- name: install | Create vault user
  ansible.builtin.user:
    name: '{{ vault_user }}'
    group: '{{ vault_group }}'
    system: true
    shell: /bin/false
    home: '{{ vault_base_dir }}'
    create_home: false

- name: install | Create vault directories
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ vault_user }}'
    group: '{{ vault_group }}'
    mode: '0755'
  loop:
    - '{{ vault_base_dir }}'
    - '{{ vault_config_dir }}'
    - '{{ vault_data_dir }}'
    - '{{ vault_log_dir }}'
    - '{{ vault_tls_dir }}'

- name: install | Install required packages
  ansible.builtin.package:
    name:
      - unzip
      - jq
      - curl
    state: present

- name: install | Check if Vault is already installed
  ansible.builtin.stat:
    path: /usr/local/bin/vault
  register: vault_binary

- name: install | Get installed Vault version
  ansible.builtin.command: vault version
  register: vault_installed_version
  changed_when: false
  failed_when: false
  when: vault_binary.stat.exists

- name: install | Parse installed version
  ansible.builtin.set_fact:
    vault_installed_version_parsed: "{{ vault_installed_version.stdout | regex_search('v([0-9.]+)', '\\1') | first }}"
  when:
    - vault_binary.stat.exists
    - vault_installed_version.rc == 0
    - vault_installed_version.stdout != ""

- name: install | Download Vault binary
  ansible.builtin.unarchive:
    src: '{{ vault_download_url }}'
    dest: /tmp
    remote_src: true
    owner: root
    group: root
    mode: '0755'
  when: >
    not vault_binary.stat.exists or
    (vault_installed_version_parsed is defined and vault_installed_version_parsed != vault_version)

- name: install | Install Vault binary
  ansible.builtin.copy:
    src: /tmp/vault
    dest: /usr/local/bin/vault
    owner: root
    group: root
    mode: '0755'
    remote_src: true
  when: >
    not vault_binary.stat.exists or
    (vault_installed_version_parsed is defined and vault_installed_version_parsed != vault_version)
  notify: restart vault

- name: install | Create Vault systemd service file
  ansible.builtin.template:
    src: "{{ 'vault-dev.service.j2' if vault_mode == 'dev' else 'vault.service.j2' }}"
    dest: /etc/systemd/system/vault.service
    owner: root
    group: root
    mode: '0644'
  notify:
    - reload systemd
    - restart vault

- name: install | Set vault binary capabilities
  community.general.capabilities:
    path: /usr/local/bin/vault
    capability: cap_ipc_lock+ep
    state: present
  when: not vault_disable_mlock | bool

- name: install | Clean up temporary files
  ansible.builtin.file:
    path: /tmp/vault
    state: absent
