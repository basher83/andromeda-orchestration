---
# 1. Set architecture facts
- name: Determine system architecture for CNI plugins
  ansible.builtin.set_fact:
    cni_arch_detected: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

- name: Set CNI architecture fact for Consul CNI
  ansible.builtin.set_fact:
    arch_cni: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

# 2. Download all required artifacts
- name: Download CNI plugins
  ansible.builtin.get_url:
    url: 'https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-{{ cni_arch_detected | default(cni_arch) }}-v{{ cni_version }}.tgz'
    dest: '/tmp/cni-plugins.tgz'
    mode: '0644'
  become: true

- name: Download Consul CNI plugin v1.6.3
  ansible.builtin.get_url:
    url: 'https://releases.hashicorp.com/consul-cni/1.6.3/consul-cni_1.6.3_linux_{{ arch_cni }}.zip'
    dest: '/tmp/consul-cni.zip'
    mode: '0644'
  become: true

# 3. Extract/unarchive plugins
- name: Extract CNI plugins to correct location
  ansible.builtin.unarchive:
    src: '/tmp/cni-plugins.tgz'
    dest: '/opt/cni/bin'
    remote_src: yes
    creates: '/opt/cni/bin/bridge'
  become: true

- name: Unzip Consul CNI plugin to /opt/cni/bin (excluding LICENSE.txt)
  ansible.builtin.unarchive:
    src: '/tmp/consul-cni.zip'
    dest: '/opt/cni/bin'
    remote_src: yes
    exclude:
      - LICENSE.txt
  become: true

# Ensure bridge kernel module is loaded
- name: Ensure bridge kernel module is loaded
  ansible.builtin.modprobe:
    name: bridge
    state: present
  become: true

- name: Ensure br_netfilter kernel module is loaded
  ansible.builtin.modprobe:
    name: br_netfilter
    state: present
  become: true

- name: Wait for /proc/sys/net/bridge/bridge-nf-call-arptables to exist
  ansible.builtin.wait_for:
    path: /proc/sys/net/bridge/bridge-nf-call-arptables
    state: present
    timeout: 10
  become: true

- name: Ensure bridge sysctl parameters are set for iptables processing
  ansible.builtin.sysctl:
    name: '{{ item.name }}'
    value: '1'
    state: present
    sysctl_set: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-arptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
  become: true

# 4. Configure system networking
- name: Enable IP forwarding for bridge networking
  ansible.builtin.sysctl:
    name: net.bridge.bridge-nf-call-arptables
    value: '1'
    state: present
    sysctl_set: yes
  become: true

- name: Configure bridge netfilter settings
  ansible.builtin.sysctl:
    name: '{{ item }}'
    value: '1'
    state: present
    sysctl_set: yes
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward
  become: true

# Persist bridge sysctl settings
- name: Persist bridge sysctl settings
  ansible.builtin.copy:
    dest: /etc/sysctl.d/bridge.conf
    content: |
      net.bridge.bridge-nf-call-arptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
    owner: root
    group: root
    mode: '0644'
  become: true

# Apply bridge sysctl settings immediately
- name: Apply bridge sysctl settings
  ansible.builtin.command: sysctl --system
  become: true
