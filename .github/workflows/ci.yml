name: CI

'on':
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  # Combined linting job using MegaLinter (replaces separate ansible-lint, yaml-lint, python-quality, markdown-lint jobs)
  lint-and-quality:
    name: Lint & Quality (MegaLinter) - ${{ contains(github.ref, 'main') && 'Full' || 'Fast' }} Mode
    runs-on: ubuntu-latest
    timeout-minutes: ${{ contains(github.ref, 'main') && 20 || 15 }}
    env:
      ANSIBLE_CONFIG: ${{ github.workspace }}/ansible.cfg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for git-related linters

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Sync project dependencies
        run: |
          uv sync --extra dev
          uv run python -V

      - name: Cache Ansible Galaxy collections
        uses: actions/cache@v4
        with:
          path: ~/.ansible/collections
          key: ansible-galaxy-${{ runner.os }}-${{ hashFiles('requirements.yml') }}
          restore-keys: ansible-galaxy-${{ runner.os }}-

      - name: Install Ansible Galaxy collections
        run: uv run ansible-galaxy collection install -r requirements.yml

      - name: Run MegaLinter
        uses: oxsecurity/megalinter@v8
        env:
          # Conditional linter set based on branch
          ENABLE_LINTERS: ${{ contains(github.ref, 'main') && 'ANSIBLE_ANSIBLE_LINT,YAML_YAMLLINT,YAML_PRETTIER,YAML_V8R,PYTHON_RUFF,MARKDOWN_MARKDOWNLINT,REPOSITORY_SECRETLINT,REPOSITORY_TRIVY,REPOSITORY_GITLEAKS,ACTION_ACTIONLINT' || 'ANSIBLE_ANSIBLE_LINT,YAML_YAMLLINT,YAML_PRETTIER,PYTHON_RUFF,MARKDOWN_MARKDOWNLINT,REPOSITORY_SECRETLINT,ACTION_ACTIONLINT' }}
          APPLY_FIXES: YAML_PRETTIER,MARKDOWN_MARKDOWNLINT
          DISABLE_ERRORS_LINTERS: YAML_YAMLLINT
          FILTER_REGEX_EXCLUDE: '(^|/)(.git/|.tox/|.venv/|dist/|build/|node_modules/|vendor/|megalinter-reports/|docs/archive/|reports/|kics-results/)'
          FILTER_REGEX_INCLUDE: '(^|/)(ansible/|roles/|playbooks/|jobs/|nomad/|environments/|inventory/|plugins/|scripts/|tests/|docs/)'
          PYTHON_RUFF_CONFIG_FILE: pyproject.toml
          YAML_YAMLLINT_CONFIG_FILE: .github/linters/.yamllint
          ANSIBLE_ANSIBLE_LINT_CONFIG_FILE: .github/linters/.ansible-lint
          MARKDOWN_MARKDOWNLINT_CONFIG_FILE: .github/linters/.markdownlint.json
          PARALLEL: true
          PARALLEL_PROCESS_COUNT: 4
          FAIL_ON_ERROR: ${{ contains(github.ref, 'main') && 'true' || 'false' }}
          OUTPUT_FORMAT: github-annotation-native
          SARIF_REPORTER: true
          SARIF_REPORT_FILE: megalinter-reports/megalinter-report.sarif
          # Performance optimizations
          LOG_LEVEL: INFO
          PRINT_ALL_FILES: false

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: megalinter-reports/megalinter-report.sarif
          category: code-quality

      - name: Upload MegaLinter results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: megalinter-results
          path: megalinter-reports/
          retention-days: 30

      - name: Syntax-check playbooks
        run: |
          set -euo pipefail
          mapfile -d '' files < <(git ls-files -z 'playbooks/**/*.yml' 'tests/test_*.yml')
          if [ ${#files[@]} -eq 0 ]; then
            echo "No playbooks found to syntax-check."
            exit 0
          fi
          for f in "${files[@]}"; do
            echo "::group::Syntax-check $f"
            uv run ansible-playbook -i 'localhost,' -c local --syntax-check "$f"
            echo "::endgroup::"
          done

      - name: Run localhost test playbook
        run: uv run ansible-playbook -i inventory/localhost.yml tests/test_localhost.yml

  secret-scan:
    name: Secret Scanning (Infisical)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2 # Only fetch last 2 commits for PR scans

      - name: Install Infisical CLI
        run: |
          curl -fsSL 'https://artifacts-cli.infisical.com/setup.deb.sh' | sudo -E bash
          git fetch --depth=1 origin ${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          sudo apt-get update && sudo apt-get install -y infisical

      - name: Run Infisical scan
        run: |
          # For PRs, scan only the changes. For pushes, scan current commit
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Scan only files changed in the PR
            git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
            if [ -s changed_files.txt ]; then
              infisical scan \
                --report-format sarif \
                --report-path infisical-results.sarif \
                --no-color \
                --verbose \
                $(cat changed_files.txt | tr '\n' ' ')
            else
              echo "No files changed, skipping scan"
              echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Infisical","version":"1.0.0"}},"results":[]}]}' > infisical-results.sarif
            fi
          else
            # For push events, scan files in the current commit
            infisical scan \
              --report-format sarif \
              --report-path infisical-results.sarif \
              --no-color \
              --verbose \
              .
          fi

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: infisical-results.sarif
          category: secret-scanning

      - name: Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: infisical-scan-results
          path: infisical-results.sarif
          retention-days: 30

  # Nomad jobs are now handled by the mega-linter.yml workflow for better integration

  kics-scan:
    name: Infrastructure Security (KICS)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run KICS scan
        uses: checkmarx/kics-github-action@v2.1.13
        with:
          path: '.'
          config_path: './kics.config'
          output_path: kics-results
          output_formats: 'json,sarif'
          fail_on: high
          enable_comments: true

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kics-results/results.sarif
          category: infrastructure-security

      - name: Upload KICS results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kics-scan-results
          path: kics-results/
          retention-days: 30

  # Only run on non-scheduled events (push/PR)
  test-summary:
    name: Test Summary
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    needs: [lint-and-quality, secret-scan, kics-scan]
    steps:
      - name: Summary
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Quality (MegaLinter) | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Security | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Note: MegaLinter consolidates ansible-lint, yamllint, ruff, markdownlint, and secretlint into a single, efficient workflow._" >> $GITHUB_STEP_SUMMARY
