name: CI

'on':
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  ansible-lint:
    name: Ansible Lint & Syntax
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      ANSIBLE_CONFIG: ${{ github.workspace }}/ansible.cfg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Sync project dependencies
        run: |
          uv sync --extra dev
          uv run python -V

      - name: Cache Ansible Galaxy collections
        uses: actions/cache@v4
        with:
          path: ~/.ansible/collections
          key: ansible-galaxy-${{ runner.os }}-${{ hashFiles('requirements.yml') }}
          restore-keys: ansible-galaxy-${{ runner.os }}-

      - name: Install Ansible Galaxy collections
        run: uv run ansible-galaxy collection install -r requirements.yml

      - name: Run ansible-lint
        run: |
          uv run ansible-lint --version
          uv run ansible-lint .

      - name: Syntax-check playbooks
        run: |
          set -euo pipefail
          mapfile -d '' files < <(git ls-files -z 'playbooks/**/*.yml' 'tests/test_*.yml')
          if [ ${#files[@]} -eq 0 ]; then
            echo "No playbooks found to syntax-check."
            exit 0
          fi
          for f in "${files[@]}"; do
            echo "::group::Syntax-check $f"
            uv run ansible-playbook -i 'localhost,' -c local --syntax-check "$f"
            echo "::endgroup::"
          done

      - name: Run localhost test playbook
        run: uv run ansible-playbook -i inventory/localhost.yml tests/test_localhost.yml

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Sync dependencies
        run: uv sync --extra dev

      - name: Run yamllint
        run: |
          echo "### YAMLLint Results" >> $GITHUB_STEP_SUMMARY
          if uv run yamllint . 2>&1 | tee yamllint.log; then
            echo "✅ YAMLLint passed" >> $GITHUB_STEP_SUMMARY
          else
            cat yamllint.log >> $GITHUB_STEP_SUMMARY
            if grep -q "error" yamllint.log; then
              echo "❌ YAMLLint found errors" >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "⚠️ YAMLLint found warnings" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  python-quality:
    name: Python Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Sync dependencies
        run: uv sync --extra dev

      - name: Run ruff
        run: |
          uv run ruff check plugins scripts tests
          uv run ruff format plugins scripts tests --check

      - name: Run mypy
        run: uv run mypy plugins scripts || true

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Run markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          globs: '**/*.md'
        continue-on-error: true  # Don't fail CI on markdown issues

  secret-scan:
    name: Secret Scanning (Infisical)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for scanning

      - name: Install Infisical CLI
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
          sudo apt-get update && sudo apt-get install -y infisical

      - name: Run Infisical scan
        run: |
          infisical scan \
            --report-format sarif \
            --report-path infisical-results.sarif \
            --no-color \
            --verbose

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: infisical-results.sarif
          category: secret-scanning

      - name: Upload scan results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: infisical-scan-results
          path: infisical-results.sarif
          retention-days: 30

  kics-scan:
    name: Infrastructure Security (KICS)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run KICS scan
        uses: checkmarx/kics-github-action@v2.1.13
        with:
          path: '.'
          output_path: kics-results
          output_formats: 'json,sarif'
          exclude_paths: '.venv/,kics-results/,docs/,playbooks/infrastructure/.debug/,playbooks/infrastructure/.archive/'
          fail_on: high
          enable_comments: true

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: kics-results/results.sarif
          category: infrastructure-security

      - name: Upload KICS results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kics-scan-results
          path: kics-results/
          retention-days: 30

  # Only run on non-scheduled events (push/PR)
  test-summary:
    name: Test Summary
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    needs: [ansible-lint, yaml-lint, python-quality, markdown-lint]
    steps:
      - name: Summary
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Ansible Lint | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| YAML Lint | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Quality | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Markdown Lint | ✅ |" >> $GITHUB_STEP_SUMMARY
