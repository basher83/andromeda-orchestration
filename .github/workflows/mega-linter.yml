name: MegaLinter

'on':
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  megalinter:
    name: MegaLinter
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for git-related linters

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up uv
        uses: astral-sh/setup-uv@v6

      - name: Sync project dependencies
        run: |
          uv sync --extra dev
          uv run python -V

      - name: Cache Ansible Galaxy collections
        uses: actions/cache@v4
        with:
          path: ~/.ansible/collections
          key: ansible-galaxy-${{ runner.os }}-${{ hashFiles('requirements.yml') }}
          restore-keys: ansible-galaxy-${{ runner.os }}-

      - name: Install Ansible Galaxy collections
        run: uv run ansible-galaxy collection install -r requirements.yml

      - name: MegaLinter
        uses: oxsecurity/megalinter@v8
        env:
          ENABLE_LINTERS: ANSIBLE_ANSIBLE_LINT,YAML_YAMLLINT,YAML_PRETTIER,YAML_V8R,PYTHON_RUFF,PYTHON_MYPY,MARKDOWN_MARKDOWNLINT,REPOSITORY_SECRETLINT,REPOSITORY_TRIVY,REPOSITORY_GITLEAKS,ACTION_ACTIONLINT
          APPLY_FIXES: YAML_PRETTIER,MARKDOWN_MARKDOWNLINT
          DISABLE_ERRORS_LINTERS: YAML_YAMLLINT
          FILTER_REGEX_EXCLUDE: '(^|/)(.git/|.tox/|.venv/|dist/|build/|node_modules/|vendor/|megalinter-reports/|docs/archive/|reports/|kics-results/)'
          FILTER_REGEX_INCLUDE: '(^|/)(ansible/|roles/|playbooks/|jobs/|nomad/|environments/|inventory/|plugins/|scripts/|tests/|docs/)'
          PYTHON_RUFF_CONFIG_FILE: pyproject.toml
          PYTHON_MYPY_CONFIG_FILE: pyproject.toml
          YAML_YAMLLINT_CONFIG_FILE: .github/linters/.yamllint
          ANSIBLE_ANSIBLE_LINT_CONFIG_FILE: .github/linters/.ansible-lint
          MARKDOWN_MARKDOWNLINT_CONFIG_FILE: .github/linters/.markdownlint.json
          PARALLEL: true
          PARALLEL_PROCESS_COUNT: 4
          FAIL_ON_ERROR: true
          OUTPUT_FORMAT: github-annotation-native
          SARIF_REPORTER: true
          SARIF_REPORT_FILE: megalinter-report.sarif

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: megalinter-report.sarif
          category: code-quality

      - name: Upload MegaLinter results as artifact
        if: always()
        uses: github/upload-artifact@v4
        with:
          name: megalinter-results
          path: megalinter-reports/
          retention-days: 30

  hcl-format:
    name: HCL Format & Nomad Validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nomad CLI
        run: |
          set -euo pipefail
          NOMAD_VERSION="1.8.2"
          curl -fsSL -o nomad.zip "https://releases.hashicorp.com/nomad/${NOMAD_VERSION}/nomad_${NOMAD_VERSION}_linux_amd64.zip"
          sudo apt-get update && sudo apt-get install -y unzip
          unzip -o nomad.zip
          sudo install -m 0755 nomad /usr/local/bin/nomad
          nomad version

      - name: Install Terragrunt (for HCL formatting)
        run: |
          set -euo pipefail
          TERRAGRUNT_VERSION="v0.55.1"
          curl -fsSL -o terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_linux_amd64"
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/
          terragrunt --version

      - name: Format and check Nomad HCL files
        run: |
          if [ -d "nomad-jobs" ]; then
            echo "Running terragrunt hclfmt to check formatting..."
            terragrunt hclfmt --check --recursive nomad-jobs
          else
            echo "No nomad-jobs directory found."
          fi

      - name: Validate Nomad job files
        run: |
          set -euo pipefail
          if [ -d "nomad-jobs" ]; then
            mapfile -t files < <(find nomad-jobs -type f -name '*.nomad.hcl' -print)
            if [ ${#files[@]} -eq 0 ]; then
              echo "No Nomad job files found."
              exit 0
            fi
            for f in "${files[@]}"; do
              echo "::group::Validating $f"
              nomad job validate "$f"
              echo "::endgroup::"
            done
          else
            echo "No nomad-jobs directory found."
          fi
