---
description: Ansible Development Rules - DRY Principles & Best Practices
globs:
  - "*.yml"
  - "*.yaml"
  - "playbooks/**/*"
  - "roles/**/*"
  - "inventories/**/*"
  - "group_vars/**/*"
  - "host_vars/**/*"
alwaysApply: true
---

# Ansible Development Rules

## DRY (Don't Repeat Yourself) Principles

### Variables & Data Management

- **ALWAYS** use variables instead of hardcoded values
- Store common variables in `group_vars/all.yml` or appropriate group files
- Use `host_vars/` for host-specific configurations
- Leverage `defaults/main.yml` in roles for default values
- Use `vars/main.yml` for role-specific variables that shouldn't be overridden

### Role Structure & Reusability

- Create reusable roles instead of copying tasks
- Use role dependencies in `meta/main.yml` when roles depend on others
- Design roles to be modular and single-purpose
- Use `include_role` and `import_role` appropriately
- Parameterize roles with variables to increase reusability

### Task Organization

- Use `include_tasks` and `import_tasks` to break down complex playbooks
- Create task files for common operations (e.g., `tasks/install.yml`, `tasks/configure.yml`)
- Use loops (`with_items`, `loop`) instead of repeating similar tasks
- Leverage `block` statements for error handling and conditional execution

## Ansible Best Practices

### Directory Structure

```
├── ansible.cfg
├── inventories/
│   ├── production/
│   └── staging/
├── group_vars/
├── host_vars/
├── roles/
│   └── role_name/
│       ├── tasks/main.yml
│       ├── handlers/main.yml
│       ├── templates/
│       ├── files/
│       ├── vars/main.yml
│       ├── defaults/main.yml
│       └── meta/main.yml
├── playbooks/
└── requirements.yml
```

### Naming Conventions

- Use descriptive, lowercase names with underscores for variables
- Prefix role variables with role name (e.g., `nginx_port`, `mysql_user`)
- Use descriptive task names that explain what the task does
- Name playbooks and roles clearly (e.g., `webserver.yml`, `database-setup`)

### Task Writing Guidelines

- **ALWAYS** include `name` for every task for better readability
- Use `become` only when necessary and be explicit about privilege escalation
- Implement proper error handling with `failed_when`, `ignore_errors`, and `rescue`
- Use `tags` for task categorization and selective execution
- Ensure tasks are idempotent - can be run multiple times safely

### Security Best Practices

- **NEVER** store passwords or sensitive data in plain text
- Use Ansible Vault for encrypting sensitive variables
- Use `no_log: true` for tasks handling sensitive information
- Validate user inputs and sanitize variables
- Use specific versions in requirements.yml and role dependencies

### Performance & Efficiency

- Use `serial` for controlled parallel execution
- Implement `strategy: free` when tasks are independent
- Use `delegate_to` for tasks that need to run on specific hosts
- Leverage `run_once: true` for tasks that only need to run once
- Use `changed_when` to properly report task changes

### Templates & Files

- Use Jinja2 templates instead of static files when configuration varies
- Keep templates simple and readable
- Use `validate` parameter for configuration files when possible
- Organize templates in role-specific `templates/` directories

### Error Handling & Debugging

- Implement comprehensive error handling with `block/rescue/always`
- Use `assert` module to validate prerequisites and assumptions
- Add meaningful error messages with `fail` module
- Use `debug` module for troubleshooting (remove before production)

### Testing & Validation

- Test playbooks in staging environment before production
- Use `--check` mode for dry runs
- Implement syntax validation in CI/CD pipelines
- Use `ansible-lint` for code quality checks
- Document role functionality and usage in README files

### Handler Best Practices

- Use handlers for service restarts and notifications
- Keep handler names descriptive and unique
- Use `listen` directive for grouping related handlers
- Place handlers in appropriate `handlers/main.yml` files

### Documentation Requirements

- Document all variables in role README files
- Include example playbook usage
- Document any external dependencies
- Maintain changelog for role versions
- Use clear, descriptive commit messages

## Code Examples

### Good Variable Usage

```yaml
# group_vars/webservers.yml
nginx_port: 80
nginx_ssl_port: 443
nginx_user: www-data

# Bad: hardcoded values in tasks
# Good: using variables
- name: Configure nginx port
  lineinfile:
    path: /etc/nginx/nginx.conf
    regexp: '^listen'
    line: "listen {{ nginx_port }};"
```

### Proper Loop Usage

```yaml
# Good: using loops
- name: Install required packages
  package:
    name: "{{ item }}"
    state: present
  loop:
    - nginx
    - python3
    - git
# Bad: repeating tasks for each package
```

### Error Handling Example

```yaml
- name: Configure application
  block:
    - name: Copy configuration file
      template:
        src: app.conf.j2
        dest: /etc/app/app.conf
        validate: "app-validator %s"
  rescue:
    - name: Log configuration error
      debug:
        msg: "Configuration failed, using default settings"
    - name: Copy default configuration
      copy:
        src: default.conf
        dest: /etc/app/app.conf
```
