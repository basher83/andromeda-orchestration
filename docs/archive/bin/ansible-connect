#!/usr/bin/env bash
# Universal Ansible wrapper for 1Password Connect integration
#
# Usage:
#   ./bin/ansible-connect <command> [args...]
#
# Examples:
#   ./bin/ansible-connect inventory -i inventory/og-homelab/proxmox.yml --list
#   ./bin/ansible-connect playbook playbooks/site.yml
#   ./bin/ansible-connect all -i inventory/og-homelab/proxmox.yml -m ping

set -euo pipefail

# Determine the script directory and project root
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Fix macOS fork() issue
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

# Get the command (inventory, playbook, etc.)
if [ $# -eq 0 ]; then
    echo "Error: No command specified"
    echo "Usage: $0 <command> [args...]"
    echo "Commands: playbook, inventory, vault, galaxy, doc, config, console, pull"
    exit 1
fi

COMMAND=$1
shift

# Source 1Password Connect environment
if [ -f "$PROJECT_ROOT/scripts/set-1password-env.sh" ]; then
    source "$PROJECT_ROOT/scripts/set-1password-env.sh" >/dev/null 2>&1
else
    echo "Error: 1Password environment script not found at $PROJECT_ROOT/scripts/set-1password-env.sh" >&2
    exit 1
fi

# Validate environment
if [ -z "${OP_CONNECT_HOST:-}" ] || [ -z "${OP_CONNECT_TOKEN:-}" ]; then
    echo "Error: OP_CONNECT_HOST and OP_CONNECT_TOKEN must be set" >&2
    echo "Please check your scripts/set-1password-env.sh file" >&2
    exit 1
fi

# Fetch secrets from 1Password Connect
echo "Fetching secrets from 1Password Connect..." >&2
TOKEN=$("$PROJECT_ROOT/scripts/get-secret-from-connect.py" "Proxmox API - og-homelab" "token_secret" 2>/dev/null)
if [ -z "$TOKEN" ]; then
    echo "Error: Failed to fetch token from 1Password Connect" >&2
    exit 1
fi

# Create temporary directory for processed files
TEMP_DIR=$(mktemp -d)
trap 'rm -rf $TEMP_DIR' EXIT

# Process inventory files and replace token placeholder
for arg in "$@"; do
    if [[ -f "$arg" && "$arg" == *".yml" ]]; then
        # Replace the onepassword lookup with the actual token
        sed "s|{{ lookup('community.general.onepassword', 'Proxmox API - og-homelab', field='token_secret') }}|$TOKEN|g" "$arg" > "$TEMP_DIR/$(basename "$arg")"
    fi
done

# Build new argument list with temp files
NEW_ARGS=()
for arg in "$@"; do
    if [[ -f "$arg" && "$arg" == *".yml" && -f "$TEMP_DIR/$(basename "$arg")" ]]; then
        NEW_ARGS+=("$TEMP_DIR/$(basename "$arg")")
    else
        NEW_ARGS+=("$arg")
    fi
done

# Change to project root for consistent execution
cd "$PROJECT_ROOT"

# Execute the ansible command
exec ansible-"$COMMAND" "${NEW_ARGS[@]}"
