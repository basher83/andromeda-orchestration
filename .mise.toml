# Mise configuration for Andromeda Orchestration
# Focused on: Development setup, Linting/Testing, and Cluster health checks
# For infrastructure operations, use Ansible playbooks directly

# ============================================================================
# TOOLS & ENVIRONMENT
# ============================================================================

[tools]
# Core Python/Ansible tools
python = "3.13.7"
uv = "0.8.14"
pre-commit = "4.3.0"

# Linting tools
ruff = "0.12.12"
markdownlint-cli2 = "0.18.1"
yamllint = "1.35.1"
# ansible-lint is installed via uv/pip, not mise

# Optional tools (comment out if not needed)
act = "0.2.80" # GitHub Actions local testing
jq = "latest"  # JSON processing

# HashiCorp CLIs for status checks only
consul = "1.21.4"
nomad = "1.10.4"
vault = "1.20.3"
eza = "0.23.0"
fd = "10.3.0"
rg = "14.1.1"

[settings]
python.uv_venv_auto = true
auto_install = true
color = true
experimental = true

[env]
# Default to local LAN environment (when at home)
NOMAD_REGION = "global"
NOMAD_ADDR = "http://192.168.11.11:4646"
CONSUL_HTTP_ADDR = "http://192.168.11.11:8500"
# VAULT_ADDR = "https://vault-prod-1-holly.tailfb3ea.ts.net:8200"  # Commented out to avoid conflicts with dynamic Vault configuration

# Ansible configuration
# ANSIBLE_INVENTORY = "inventory/environments/doggos-homelab"  # Temporarily disabled for Infisical testing
ANSIBLE_HOST_KEY_CHECKING = "False"
ANSIBLE_PYTHON_INTERPRETER = "auto_silent"

# To use Tailscale IPs when remote:
# Run: mise run env:remote
# Or manually override in .mise.local.toml

# ============================================================================
# SETUP - Development Environment Setup
# ============================================================================

[tasks.setup]
description = "Smart setup - only installs what's needed"
run = '''
#!/usr/bin/env bash
set -euo pipefail

echo "üöÄ Andromeda Orchestration Smart Setup"
echo "======================================="
echo ""

# Step 1: Python dependencies (uv is fast, always sync)
echo "üì¶ Step 1: Python dependencies..."
echo "----------------------------------"
# Always sync base and dev - uv is fast enough
uv sync --extra dev || {
  echo "‚ùå Failed to install base dependencies"
  exit 1
}

# Try secrets extra separately (platform-specific)
if ! uv pip list 2>/dev/null | grep -q "infisicalsdk"; then
  echo "   Attempting to install secrets extra..."
  uv sync --extra secrets 2>/dev/null || {
    echo "   ‚ö†Ô∏è  infisicalsdk installation failed"
    echo "   Using Infisical CLI instead"
  }
fi
echo "‚úÖ Python environment ready"

# Step 2: Ansible collections (check if update needed)
echo ""
echo "üìö Step 2: Ansible collections..."
echo "---------------------------------"
COLLECTIONS_DIR="$(pwd)/.ansible/collections/ansible_collections"
REQUIREMENTS_FILE="requirements.yml"

# Ensure ansible uses local collections path
export ANSIBLE_COLLECTIONS_PATH="$(pwd)/.ansible/collections:${ANSIBLE_COLLECTIONS_PATH:-}"

# Check if collections need updating
needs_update=false
if [ ! -d "$COLLECTIONS_DIR" ]; then
  echo "   No collections found, installing..."
  needs_update=true
elif [ "$REQUIREMENTS_FILE" -nt "$COLLECTIONS_DIR" ]; then
  echo "   requirements.yml changed, updating..."
  needs_update=true
else
  # Check if all required collections exist
  while IFS= read -r collection; do
    if [[ "$collection" =~ ^[[:space:]]*-[[:space:]]*name:[[:space:]]*(.+) ]]; then
      coll_name="${BASH_REMATCH[1]}"
      coll_path="$COLLECTIONS_DIR/${coll_name//.//}"
      if [ ! -d "$coll_path" ]; then
        echo "   Missing collection: $coll_name"
        needs_update=true
        break
      fi
    fi
  done < "$REQUIREMENTS_FILE"
fi

if [ "$needs_update" = true ]; then
  uv run ansible-galaxy collection install -r requirements.yml --force -p "$(pwd)/.ansible/collections"
  echo "‚úÖ Collections installed/updated"
else
  echo "‚úÖ Collections already up-to-date"
fi

# Step 3: Pre-commit hooks (only if not installed)
echo ""
echo "üîß Step 3: Pre-commit hooks..."
echo "------------------------------"
if [ ! -f ".git/hooks/pre-commit" ]; then
  uv run pre-commit install
  echo "‚úÖ Pre-commit hooks installed"
else
  echo "‚úÖ Pre-commit hooks already installed"
fi

# Step 4: Infisical scanning (optional)
echo ""
echo "üîê Step 4: Security scanning..."
echo "-------------------------------"
if command -v infisical >/dev/null 2>&1; then
  if ! grep -q "infisical scan" .git/hooks/pre-commit 2>/dev/null; then
    infisical scan install --pre-commit-hook >/dev/null 2>&1 && \
      echo "‚úÖ Infisical scanning enabled" || \
      echo "‚úÖ Infisical scanning already enabled"
  else
    echo "‚úÖ Infisical scanning already enabled"
  fi
else
  echo "‚ÑπÔ∏è  Infisical CLI not installed (optional)"
fi

# Step 5: Quick verification
echo ""
echo "üìã Verification"
echo "--------------"
echo "‚Ä¢ Python: $(uv run python --version 2>&1 | head -1)"
echo "‚Ä¢ Ansible: $(uv run ansible --version 2>&1 | head -1)"
echo "‚Ä¢ Collections: $(find $COLLECTIONS_DIR -maxdepth 2 -type d 2>/dev/null | wc -l) installed"

# Check for credentials
echo ""
if [ -n "${INFISICAL_TOKEN:-}" ] || [ -n "${INFISICAL_MACHINE_IDENTITY_CLIENT_ID:-}" ]; then
  echo "‚úÖ Infisical credentials configured"
elif [ -f ".mise.local.toml" ]; then
  echo "‚úÖ Local config found (.mise.local.toml)"
else
  echo "‚ÑπÔ∏è  Remember to configure credentials in .mise.local.toml"
fi

echo ""
echo "‚ú® Ready to work! Try: mise run status"
'''
tools = { "uv" = "0.8.13", "python" = "3.13.7" }

[tasks."setup:quick"]
description = "Ultra-fast refresh - sync Python deps only"
run = '''
echo "‚ö° Quick Refresh"
echo "==============="

# Just sync Python deps - uv is blazing fast
uv sync --extra dev 2>/dev/null || uv sync

# Quick check
echo "‚úÖ $(uv run python --version 2>&1 | head -1)"
echo "‚úÖ $(uv run ansible --version 2>&1 | head -1)"
echo ""
echo "Ready! Run 'mise setup' for full setup if needed."
'''
tools = { "uv" = "0.8.13", "python" = "3.13.7" }

[tasks."setup:force"]
description = "Force reinstall everything (clean slate)"
run = '''
echo "üîÑ Force Reinstall"
echo "=================="
echo ""
echo "‚ö†Ô∏è  This will reinstall all dependencies from scratch"
echo ""

# Clean Python environment
echo "Cleaning Python environment..."
rm -rf .venv
uv venv
uv sync --extra dev --extra secrets

# Force reinstall collections
echo "Reinstalling Ansible collections..."
rm -rf .ansible/collections
uv run ansible-galaxy collection install -r requirements.yml --force

# Reinstall pre-commit
echo "Reinstalling pre-commit hooks..."
uv run pre-commit uninstall 2>/dev/null || true
uv run pre-commit install
uv run pre-commit install --install-hooks

echo ""
echo "‚úÖ Everything reinstalled from scratch!"
'''
tools = { "uv" = "0.8.13", "python" = "3.13.7" }

# ============================================================================
# ENVIRONMENT - Environment Configuration
# ============================================================================

[tasks."env:status"]
description = "Show current environment configuration"
run = '''
echo "üåç Current Environment Configuration"
echo "===================================="
echo ""
echo "Nomad:  ${NOMAD_ADDR}"
echo "Consul: ${CONSUL_HTTP_ADDR}"
echo "Vault:  ${VAULT_ADDR}"
echo ""
echo "Testing connectivity..."
echo "----------------------"

# Test Nomad
if nomad status &>/dev/null; then
  echo "‚úÖ Nomad:  Connected"
else
  echo "‚ùå Nomad:  Cannot connect"
fi

# Test Consul
if consul members &>/dev/null; then
  echo "‚úÖ Consul: Connected"
else
  echo "‚ùå Consul: Cannot connect"
fi

# Test Vault
if vault status &>/dev/null; then
  echo "‚úÖ Vault:  Connected"
else
  echo "‚ùå Vault:  Cannot connect"
fi
'''

[tasks."env:local"]
description = "Switch to local environment (LAN IPs)"
run = '''
echo "üè† Switching to LOCAL environment (LAN)"
echo "======================================="
cat > .mise.local.toml << 'EOF'
[env]
NOMAD_REGION = "global"
NOMAD_ADDR = "http://192.168.11.11:4646"
CONSUL_HTTP_ADDR = "http://192.168.11.11:8500"
VAULT_ADDR = "http://192.168.11.11:8200"
EOF
echo "‚úÖ Switched to local environment"
echo "   Run 'mise trust' to apply changes"
'''

[tasks."env:remote"]
description = "Switch to remote environment (Tailscale IPs)"
run = '''
echo "üåê Switching to REMOTE environment (Tailscale)"
echo "=============================================="
cat > .mise.local.toml << 'EOF'
# Using Tailscale environment
# Comment out the [env] section to use defaults from main .mise.toml
#[env]
EOF
echo "‚úÖ Switched to remote environment (using defaults)"
echo "   Run 'mise trust' to apply changes"
'''

# ============================================================================
# STATUS - Cluster Health Checks
# ============================================================================

[tasks.status]
description = "Quick cluster health check (no auth required)"
run = '''
echo "üìä HashiCorp Stack Health Check"
echo "================================"
echo ""

# Run each check sequentially for clean output
mise run status:quick:consul
echo ""
mise run status:quick:nomad
echo ""
mise run status:quick:vault

echo ""
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "For authenticated status: mise run status:full"
'''


[tasks."status:quick:consul"]
description = "Quick Consul health check (no auth required)"
run = '''
echo "üè• Consul Status"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Check connectivity using members (no auth required)
if consul members >/dev/null 2>&1; then
  server_count=$(consul members 2>/dev/null | grep -c "server" || echo "0")
  client_count=$(consul members 2>/dev/null | grep -c "client" || echo "0")
  echo "‚úÖ Connected to ${CONSUL_HTTP_ADDR}"
  echo "   Servers: $server_count | Clients: $client_count"
else
  echo "‚ùå Cannot connect to ${CONSUL_HTTP_ADDR}"
fi
'''

[tasks."status:quick:nomad"]
description = "Quick Nomad health check (no auth required)"
run = '''
echo "üöÄ Nomad Status"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Check connectivity using server members (no auth required)
if nomad server members >/dev/null 2>&1; then
  server_count=$(nomad server members 2>/dev/null | grep -c "^nomad" || echo "0")
  # Get client count from node status (no auth required)
  client_count=$(nomad node status 2>/dev/null | grep -c "ready" || echo "0")
  echo "‚úÖ Connected to ${NOMAD_ADDR}"
  echo "   Servers: $server_count | Clients: $client_count"
else
  echo "‚ùå Cannot connect to ${NOMAD_ADDR}"
fi
'''

[tasks."status:quick:vault"]
description = "Quick Vault health check (no auth required)"
run = '''
echo "üîê Vault Status"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Check connectivity and seal status
vault_exit_code=0
vault status >/dev/null 2>&1 || vault_exit_code=$?

if [ $vault_exit_code -eq 0 ]; then
  version=$(vault status 2>/dev/null | grep "Version" | awk '{print $2}' || echo "unknown")
  echo "‚úÖ Connected to ${VAULT_ADDR}"
  echo "   Version: $version | Status: UNSEALED"
elif [ $vault_exit_code -eq 2 ]; then
  echo "‚ö†Ô∏è  Connected to ${VAULT_ADDR}"
  echo "   Status: SEALED (unseal required)"
else
  echo "‚ùå Cannot connect to ${VAULT_ADDR}"
fi
'''

[tasks."status:full"]
description = "Full authenticated status check using Ansible playbook"
run = '''
echo "üîê Running full authenticated status check..."
echo "==========================================="
echo ""
echo "This uses Infisical to retrieve ACL tokens for authentication."
echo ""

# Source .envrc if it exists to get credentials
if [ -f .envrc ]; then
  source .envrc 2>/dev/null || true
fi

# Export the variables explicitly for the subprocess
export INFISICAL_UNIVERSAL_AUTH_CLIENT_ID="${INFISICAL_UNIVERSAL_AUTH_CLIENT_ID}"
export INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET="${INFISICAL_UNIVERSAL_AUTH_CLIENT_SECRET}"

# Run the authenticated assessment playbook (localhost only, no inventory needed)
ANSIBLE_INVENTORY="" uv run ansible-playbook playbooks/assessment/quick-status.yml -i localhost, -c local

echo ""
echo "For even more detailed assessments, try:"
echo "  ‚Ä¢ uv run ansible-playbook playbooks/assessment/consul-assessment.yml -i localhost, -c local"
echo "  ‚Ä¢ uv run ansible-playbook playbooks/assessment/infrastructure-readiness.yml"
echo "  ‚Ä¢ uv run ansible-playbook playbooks/assessment/nomad-cluster-check.yml"
'''

# ============================================================================
# LINTING - Code Quality Checks
# ============================================================================

[tasks.lint]
description = "Run all linters"
depends = ["lint:ansible", "lint:python", "lint:yaml", "lint:markdown"]

[tasks."lint:ansible"]
description = "Lint Ansible playbooks and roles"
run = '''
echo "üîç Linting Ansible files..."
uv run ansible-lint
'''

[tasks."lint:python"]
description = "Lint Python code"
run = '''
echo "üîç Linting Python files..."
uv run ruff check .
'''
tools = { "ruff" = "0.12.9" }

[tasks."lint:yaml"]
description = "Lint YAML files"
run = '''
echo "üîç Linting YAML files..."
yamllint -c .yamllint .
'''
tools = { "yamllint" = "1.35.1" }

[tasks."lint:markdown"]
description = "Lint Markdown files"
run = '''
echo "üîç Linting Markdown files..."
markdownlint-cli2 "**/*.md" "#.venv"
'''
tools = { "markdownlint-cli2" = "0.18.1" }

# ============================================================================
# TESTING - Test Execution
# ============================================================================

[tasks.test]
description = "Run all tests"
run = '''
echo "üß™ Running all tests..."
uv run pytest tests/ -v
'''

[tasks."test:syntax"]
description = "Check Ansible playbook syntax"
run = '''
echo "üîç Checking Ansible syntax..."
for playbook in playbooks/**/*.yml; do
  echo "Checking: $playbook"
  uv run ansible-playbook --syntax-check "$playbook" || exit 1
done
echo "‚úÖ All playbooks have valid syntax"
'''

# ============================================================================
# üî• Smoke Tests
# ============================================================================

[tasks.smoke-vault]
description = "Run smoke test for Vault"
run = '''
echo "üî• Running smoke tests..."
uv run ansible-playbook playbooks/infrastructure/vault/smoke-test.yml \
      -i inventory/environments/vault-cluster/production.yaml
'''

[tasks.smoke-vault-recovery]
description = "Vault smoke test including recovery key retrieval"
run = '''
  echo "üî• Running smoke tests with recovery key verification..."
  uv run ansible-playbook playbooks/infrastructure/vault/smoke-test.yml \
        -i inventory/environments/vault-cluster/production.yaml \
        --extra-vars "test_recovery_keys=true"
  '''

# ============================================================================
# SECURITY - Security Scanning
# ============================================================================

[tasks.security]
description = "Run all security scans"
depends = ["security:secrets", "security:kics"]

[tasks."security:secrets"]
description = "Scan for exposed secrets"
run = '''
echo "üîç Scanning for exposed secrets..."
if [ -f "./scripts/scan-secrets.sh" ]; then
  ./scripts/scan-secrets.sh full
else
  infisical scan --baseline-path=.infisical-scan-baseline.json --verbose
fi
'''

[tasks."security:kics"]
description = "Run KICS infrastructure security scan"
run = '''
echo "üîç Running KICS security scan..."
mkdir -p kics-results
docker run -t -v "$(pwd)":/path checkmarx/kics:latest scan \
  -p /path \
  --config /path/kics.config \
  -o /path/kics-results
echo "Results saved to kics-results/"
'''

# ============================================================================
# UTILITIES - Helper Tasks
# ============================================================================

[tasks.clean]
description = "Remove generated files and caches"
run = '''
echo "üßπ Cleaning up..."
find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
find . -type f -name "*.pyc" -delete 2>/dev/null || true
rm -rf .ruff_cache .mypy_cache 2>/dev/null || true
echo "‚úÖ Cleaned up generated files and caches"
'''

[tasks.pm-status]
description = "Check PM documentation freshness and health"
run = '''
echo "üìä Project Management Health Check"
echo "=================================="
echo ""
echo "üìÖ Last Updated:"
echo "  ROADMAP.md: $(git log -1 --format='%ar (%ad)' --date=short ROADMAP.md 2>/dev/null || echo 'Not tracked')"
echo "  Current Sprint: $(git log -1 --format='%ar (%ad)' --date=short docs/project-management/current-sprint.md 2>/dev/null || echo 'Not tracked')"
echo ""
echo "üìù Recent Decisions:"
ls -lt docs/project-management/decisions/*.md 2>/dev/null | grep -v TEMPLATE | head -3 | while read -r line; do
  file=$(echo "$line" | awk '{print $NF}')
  basename "$file" .md
done || echo "  No ADRs found"
echo ""
echo "‚ö†Ô∏è  Potentially Stale Files (>7 days old):"
find docs/project-management -name "*.md" -mtime +7 -not -path "*/archive/*" -not -path "*/completed/*" 2>/dev/null | while read -r file; do
  echo "  - $(basename "$file"): $(git log -1 --format='%ar' "$file" 2>/dev/null || echo 'untracked')"
done || echo "  All files are fresh!"
echo ""
echo "üìä Sprint Progress:"
if [ -f "docs/project-management/current-sprint.md" ]; then
  completed=$(grep -c "‚úÖ" docs/project-management/current-sprint.md 2>/dev/null || echo 0)
  in_progress=$(grep -c "üöß\|In Progress" docs/project-management/current-sprint.md 2>/dev/null || echo 0)
  blocked=$(grep -c "‚õî\|Blocked" docs/project-management/current-sprint.md 2>/dev/null || echo 0)
  echo "  Completed: $completed | In Progress: $in_progress | Blocked: $blocked"
else
  echo "  No current sprint file found"
fi
echo ""
echo "üí° Tip: Run 'mise run pm-status' weekly to keep PM docs fresh!"
'''

[tasks.help]
description = "Show how to use Ansible for operations"
run = '''
echo "üöÄ Andromeda Orchestration - Quick Reference"
echo "==========================================="
echo ""
echo "MISE COMMANDS (Development & Status)"
echo "------------------------------------"
echo "  mise run setup          # Setup development environment"
echo "  mise run status         # Check cluster health"
echo "  mise run pm-status      # Check PM documentation health"
echo "  mise run lint           # Lint code"
echo "  mise run test           # Run tests"
echo "  mise run security       # Security scanning"
echo ""
echo "ANSIBLE OPERATIONS (Infrastructure Management)"
echo "----------------------------------------------"
echo "Deploy services:"
echo "  uv run ansible-playbook playbooks/infrastructure/nomad/deploy-job.yml -e job=traefik"
echo ""
echo "Manage Consul:"
echo "  uv run ansible-playbook playbooks/infrastructure/consul/service-register.yml"
echo ""
echo "Manage Vault:"
echo "  uv run ansible-playbook playbooks/infrastructure/vault/manage-secrets.yml"
echo "  uv run ansible-playbook playbooks/infrastructure/vault/unseal-vault.yml"
echo ""
echo "Assessment:"
echo "  uv run ansible-playbook playbooks/assessment/infrastructure-readiness.yml"
echo ""
echo "Note: Inventory auto-configured via ANSIBLE_INVENTORY environment variable"
'''

# ============================================================================
# INVENTORY - Inventory Management Tasks
# ============================================================================

[tasks."inventory:doggos"]
description = "Use doggos-homelab inventory"
run = '''
echo "üéØ Switching to doggos-homelab inventory"
echo "export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab'"
echo "Or use:  -i inventory/environments/doggos-homelab"
'''

[tasks."inventory:og"]
description = "Use og-homelab inventory"
run = '''
echo "üéØ Switching to og-homelab inventory"
echo "export ANSIBLE_INVENTORY='inventory/environments/og-homelab'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/environments/og-homelab'"
echo "Or use:  -i inventory/environments/og-homelab"
'''

[tasks."inventory:netbox"]
description = "Use NetBox dynamic inventory"
run = '''
echo "üåê Switching to NetBox inventory"
echo "export ANSIBLE_INVENTORY='inventory/dynamic/netbox.yml'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/dynamic/netbox.yml'"
echo "Or use:  -i inventory/dynamic/netbox.yml"
echo ""
echo "Note: Requires Infisical authentication (uses infisical.vault lookup)"
'''

[tasks."inventory:combined"]
description = "Use multiple inventories (Proxmox + NetBox)"
run = '''
echo "üîó Using combined inventories"
echo "export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab:inventory/dynamic/netbox.yml'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab:inventory/dynamic/netbox.yml'"
echo "Or use:  -i inventory/environments/doggos-homelab -i inventory/dynamic/netbox.yml"
'''

[tasks."inventory:list"]
description = "List available inventory sources"
run = '''
echo "üìã Available Inventory Sources"
echo "=============================="
echo ""
echo "Environments:"
echo "  ‚Ä¢ doggos-homelab - Primary homelab (Proxmox)"
echo "  ‚Ä¢ og-homelab     - Original homelab (Proxmox)"
echo "  ‚Ä¢ vault-cluster  - Dedicated Vault cluster"
echo ""
echo "Dynamic Sources:"
echo "  ‚Ä¢ netbox         - NetBox IPAM (with caching)"
echo "  ‚Ä¢ tailscale      - Tailscale network inventory"
echo ""
echo "Current setting: $ANSIBLE_INVENTORY"
'''

# Note: Git hooks are handled by pre-commit framework
# Run 'mise run setup' to install pre-commit hooks
