[settings]
experimental = true
auto_install = true
not_found_auto_install = true
color = true
jobs = 4
pin = true

[settings.python]
uv_venv_auto = true

[tools]
act = "0.2.80"
age = "1.2.1"
ansible-core = "2.19.0"
consul = "1.21.4"
eza = "0.23.0"
fd = "10.2.0"
github-markdown-toc = "0.10.0"
jq = "1.8.1"
markdownlint-cli2 = "0.18.1"
nomad = "1.10.4"
pre-commit = "4.3.0"
python = "3.13.7"
rg = "14.1.1"
ruff = "0.12.9"
sops = "3.10.2"
uv = "0.8.12"
vault = "1.20.2"

# ============================================================================
# CORE TASKS - Primary developer actions
# ============================================================================

[tasks."setup:mcp"]
description = "Generate .mcp.json from template using Infisical secrets"
run = "./scripts/generate-mcp-config.sh"
sources = [
  "mcp.json.template",
  "scripts/generate-mcp-config.sh",
  ".infisical.json",
]
outputs = [".mcp.json"]
tools = { "jq" = "latest" }

[tasks."setup:act-symlink"]
description = "Ensure act is symlinked for VS Code extension"
run = '''
# Check if act is installed via mise
if command -v act >/dev/null 2>&1; then
  ACT_PATH=$(which act)
  SYMLINK_PATH="/usr/local/bin/act"
  
  # Check if symlink already exists and points to correct location
  if [ -L "$SYMLINK_PATH" ] && [ "$(readlink -f $SYMLINK_PATH)" = "$(readlink -f $ACT_PATH)" ]; then
    echo "‚úÖ Act symlink already configured correctly"
  else
    echo "üîß Creating symlink for act..."
    sudo ln -sf "$ACT_PATH" "$SYMLINK_PATH"
    echo "‚úÖ Act symlinked to $SYMLINK_PATH"
  fi
  
  # Verify it works
  if $SYMLINK_PATH --version >/dev/null 2>&1; then
    echo "‚úÖ Act is accessible system-wide (version: $($SYMLINK_PATH --version))"
  else
    echo "‚ùå Failed to create working symlink" && exit 1
  fi
else
  echo "‚ö†Ô∏è  Act not installed, skipping symlink setup"
fi
'''
tools = { "act" = "0.2.80" }

# ============================================================================
# UTILITY - Helper tasks
# ============================================================================

[tasks."tailscale:auth"]
run = "sudo tailscale up --accept-routes"

[tasks."tailscale:status"]
run = "sudo tailscale status"

[tasks."network_utils:install"]
run = "sudo apt-get update && sudo apt-get install -y iputils-ping iputils-tracepath dnsutils netcat-openbsd curl wget telnet mtr tcpdump"

[tasks.mcp]
description = "MCP configuration management"
alias = "m"
tools = { "jq" = "latest" }
run = '''
echo "üîß MCP Configuration Management"
echo "================================"
if [ -f ".mcp.json" ]; then
  echo "‚úÖ .mcp.json exists"
  echo ""
  echo "Available actions:"
  echo "  1) Regenerate from template (overwrites current)"
  echo "  2) Validate JSON syntax"
  echo "  3) Show current servers"
  echo "  4) Exit"
  echo ""
  read -p "Choose action [1-4]: " choice
  case $choice in
    1) mise run setup:mcp ;;
    2) jq empty .mcp.json && echo "‚úÖ Valid JSON" || echo "‚ùå Invalid JSON" ;;
    3) jq '.mcpServers | keys[]' .mcp.json 2>/dev/null || echo "‚ùå Unable to parse servers" ;;
    4) echo "Exiting..." ;;
    *) echo "Invalid choice" ;;
  esac
else
  echo "‚ùå .mcp.json not found"
  echo ""
  if [ -f "mcp.json.template" ]; then
    echo "Template found. Generate config? (y/n)"
    read -p "> " confirm
    [ "$confirm" = "y" ] && mise run setup:mcp
  else
    echo "No template found. Please create mcp.json.template first."
  fi
fi
'''

[tasks."mcp:clean"]
description = "Remove generated MCP configuration"
run = '''
if [ -f ".mcp.json" ]; then
  echo "‚ö†Ô∏è  This will delete .mcp.json (can be regenerated from template)"
  read -p "Continue? (y/n): " confirm
  if [ "$confirm" = "y" ]; then
    rm -f .mcp.json
    echo "‚úÖ .mcp.json removed"
  else
    echo "Cancelled"
  fi
else
  echo "No .mcp.json file to remove"
fi
'''
# ============================================================================
# LINTING
# ============================================================================

[tasks."lint:markdown"]
description = "Lint Markdown files"
run = "markdownlint-cli2 **/*.md"
tools = { "markdownlint-cli2" = "0.18.1" }

[tasks."lint:python"]
description = "Lint Python files"
run = "ruff check plugins scripts tests"
tools = { "ruff" = "0.12.9" }

# ============================================================================
# FIX
# ============================================================================
[tasks."fix:markdown"]
description = "Fix Markdown files"
run = "markdownlint-cli2 --fix **/*.md"
tools = { "markdownlint-cli2" = "0.18.1" }

# ============================================================================
# NOMAD
# ============================================================================
# Nomad Development Tasks
[tasks."lint:nomad"]
description = "Lint Nomad files"
run = "nomad fmt -check -recursive nomad-jobs"
tools = { "nomad" = "1.10.4" }

[tasks."fmt:nomad"]
description = "Format Nomad files"
run = "nomad fmt -recursive nomad-jobs"
tools = { "nomad" = "1.10.4" }

[tasks."validate:nomad"]
description = "Validate all Nomad job syntax"
run = '''
echo "üîç Validating Nomad jobs..."
failed=0
for file in $(find nomad-jobs -name "*.nomad.hcl"); do
  echo "Validating $file..."
  if ! nomad job validate "$file"; then
    failed=1
  fi
done
if [ $failed -eq 1 ]; then
  echo "‚ùå Some jobs failed validation"
  exit 1
else
  echo "‚úÖ All jobs validated successfully"
fi
'''
tools = { "nomad" = "1.10.4" }

[tasks."validate:nomad:job"]
description = "Validate specific Nomad job (usage: mise run validate:nomad:job -- <job-file>)"
run = 'nomad job validate "$1"'
tools = { "nomad" = "1.10.4" }

[tasks."plan:nomad"]
description = "Plan a specific Nomad job (usage: mise run plan:nomad -- <job-file>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run plan:nomad -- <job-file>"
  echo "Example: mise run plan:nomad -- nomad-jobs/core-infrastructure/traefik.nomad.hcl"
  exit 1
fi
nomad job plan "$1"
'''
tools = { "nomad" = "1.10.4" }

[tasks."status:nomad"]
description = "Show status of all Nomad jobs"
run = '''
echo "üìä Nomad Cluster Status:"
echo "======================="
nomad job status
echo ""
echo "üìç Node Status:"
echo "==============="
nomad node status
'''
tools = { "nomad" = "1.10.4" }

[tasks."stop:nomad"]
description = "Stop a Nomad job (usage: mise run stop:nomad -- <job-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run stop:nomad -- <job-name>"
  echo "Available jobs:"
  nomad job status | grep -v "ID" | awk "{print \$1}"
  exit 1
fi
nomad job stop "$1"
'''
tools = { "nomad" = "1.10.4" }

[tasks."logs:nomad"]
description = "Show logs for a Nomad allocation (usage: mise run logs:nomad -- <alloc-id>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run logs:nomad -- <alloc-id>"
  echo "Recent allocations:"
  nomad job status | grep -v "ID" | head -5 | while read job _; do
    echo "Job: $job"
    nomad job status "$job" | grep "running\|failed" | head -3
  done
  exit 1
fi
nomad alloc logs "$1"
'''
tools = { "nomad" = "1.10.4" }

[tasks."deploy:traefik"]
description = "Deploy Traefik load balancer"
run = '''
echo "üöÄ Deploying Traefik..."
nomad job run nomad-jobs/core-infrastructure/traefik.nomad.hcl
'''
tools = { "nomad" = "1.10.4" }

[tasks."deploy:postgresql"]
description = "Deploy PostgreSQL database"
run = '''
echo "üöÄ Deploying PostgreSQL..."
nomad job run nomad-jobs/platform-services/postgresql.nomad.hcl
'''
tools = { "nomad" = "1.10.4" }

[tasks."deploy:powerdns"]
description = "Deploy PowerDNS with variables"
run = '''
echo "üöÄ Deploying PowerDNS..."
# Using your Ansible deployment pattern with uv
uv run ansible-playbook playbooks/infrastructure/nomad/deploy-job.yml \
  -i inventory/doggos-homelab/infisical.proxmox.yml \
  -e job=nomad-jobs/platform-services/powerdns-auth.nomad.hcl
'''
tools = { "nomad" = "1.10.4", "uv" = "0.8.12" }

[tasks."health:nomad"]
description = "Check health of Nomad services in Consul"
run = '''
echo "üè• Nomad Service Health in Consul:"
echo "=================================="
consul catalog services | grep -E "(traefik|postgres|powerdns)" | while read service; do
  echo "Service: $service"
  consul health service "$service" | head -10
  echo ""
done
'''
tools = { "nomad" = "1.10.4", "consul" = "1.21.4" }

[tasks."debug:nomad"]
description = "Debug failed Nomad allocation (usage: mise run debug:nomad -- <job-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run debug:nomad -- <job-name>"
  echo "Failed jobs:"
  nomad job status | grep failed
  exit 1
fi

echo "üîç Debugging job: $1"
echo "=================="
nomad job status "$1"
echo ""

echo "üìã Recent allocations:"
alloc_id=$(nomad job status "$1" | grep -E "failed|running" | head -1 | awk "{print \$1}")
if [ -n "$alloc_id" ]; then
  echo "Allocation: $alloc_id"
  nomad alloc status "$alloc_id"
  echo ""
  echo "üìù Logs:"
  nomad alloc logs "$alloc_id"
fi
'''
tools = { "nomad" = "1.10.4" }

[tasks."clean:nomad"]
description = "Clean up completed/failed Nomad allocations"
run = '''
echo "üßπ Cleaning up Nomad allocations..."
echo "Stopping failed jobs..."
nomad job status | grep failed | awk "{print \$1}" | while read job; do
  echo "Stopping failed job: $job"
  nomad job stop -purge "$job" || true
done

echo "‚úÖ Cleanup complete"
'''
tools = { "nomad" = "1.10.4" }

# Combined tasks
[tasks."ci:nomad"]
description = "Run all Nomad CI checks (format, validate)"
run = '''
echo "üîß Running Nomad CI checks..."
mise run fmt:nomad
mise run lint:nomad  
mise run validate:nomad
echo "‚úÖ All Nomad CI checks passed!"
'''
depends = ["fmt:nomad", "lint:nomad", "validate:nomad"]

[tasks."deploy:core"]
description = "Deploy core infrastructure (Traefik)"
run = '''
echo "üöÄ Deploying core infrastructure..."
mise run deploy:traefik
echo "‚è≥ Waiting for Traefik to be ready..."
sleep 10
mise run status:nomad
'''
depends = ["deploy:traefik"]

[tasks."deploy:platform"]
description = "Deploy platform services (PostgreSQL, PowerDNS)"
run = '''
echo "üöÄ Deploying platform services..."
mise run deploy:postgresql
echo "‚è≥ Waiting for PostgreSQL..."
sleep 15
mise run deploy:powerdns
echo "‚è≥ Waiting for PowerDNS..."
sleep 10
mise run status:nomad
'''
depends = ["deploy:postgresql", "deploy:powerdns"]

# ============================================================================
# CONSUL
# ============================================================================

[tasks."validate:consul"]
description = "Validate Consul configuration files"
run = '''
echo "üîç Validating Consul configurations..."
failed=0
for file in $(find . -name "*.hcl" -path "*/consul/*" -o -name "consul.json"); do
  if [ -f "$file" ]; then
    echo "Validating $file..."
    if ! consul validate "$file"; then
      failed=1
    fi
  fi
done
if [ $failed -eq 1 ]; then
  echo "‚ùå Some Consul configs failed validation"
  exit 1
else
  echo "‚úÖ All Consul configs validated successfully"
fi
'''
tools = { "consul" = "1.21.4" }

# Cluster Status & Monitoring
[tasks."status:consul"]
description = "Show Consul cluster status"
run = '''
echo "üìä Consul Cluster Status:"
echo "========================"
consul members
echo ""
echo "üéØ Consul Leader:"
echo "================="
consul operator raft list-peers
echo ""
echo "üíæ Consul Info:"
echo "==============="
consul info
'''
tools = { "consul" = "1.21.4" }

[tasks."health:consul"]
description = "Check Consul cluster health"
run = '''
echo "üè• Consul Health Checks:"
echo "========================"
consul operator raft list-peers
echo ""
echo "üîç Service Health Overview:"
echo "==========================="
consul catalog services | while read service; do
  echo "Service: $service"
  healthy=$(consul health service "$service" | grep -c "passing" || echo "0")
  total=$(consul health service "$service" | grep -c "critical\|warning\|passing" || echo "0")
  echo "  Status: $healthy/$total healthy"
done
'''
tools = { "consul" = "1.21.4" }

[tasks."nodes:consul"]
description = "List Consul nodes and their status"
run = '''
echo "üñ•Ô∏è  Consul Nodes:"
echo "=================="
consul catalog nodes -detailed
echo ""
echo "üîß Node Health:"
echo "==============="
consul catalog nodes | tail -n +2 | while read node address; do
  echo "Node: $node ($address)"
  consul health node "$node" | head -5
  echo ""
done
'''
tools = { "consul" = "1.21.4" }

# Service Discovery
[tasks."services:consul"]
description = "List all registered services"
run = '''
echo "üéØ Consul Services:"
echo "==================="
consul catalog services -tags
echo ""
echo "üìç Service Details:"
echo "==================="
consul catalog services | while read service; do
  echo "Service: $service"
  consul catalog service "$service" | jq -r ".[] | \"  Node: \\(.Node) Address: \\(.ServiceAddress):\\(.ServicePort) Health: \\(.Checks | length) checks\""
  echo ""
done
'''
tools = { "consul" = "1.21.4", "jq" = "latest" }

[tasks."service:consul"]
description = "Get details for specific service (usage: mise run service:consul -- <service-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run service:consul -- <service-name>"
  echo "Available services:"
  consul catalog services
  exit 1
fi
echo "üéØ Service Details: $1"
echo "======================"
consul catalog service "$1" | jq .
echo ""
echo "üè• Health Status:"
echo "================="
consul health service "$1"
'''
tools = { "consul" = "1.21.4", "jq" = "latest" }

[tasks."dns:consul"]
description = "Test Consul DNS resolution (usage: mise run dns:consul -- <service-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run dns:consul -- <service-name>"
  echo "Examples:"
  echo "  mise run dns:consul -- traefik"
  echo "  mise run dns:consul -- postgres"
  exit 1
fi
echo "üîç DNS Resolution Test for: $1"
echo "==============================="
echo "A record:"
dig @localhost -p 8600 "$1.service.consul" A
echo ""
echo "SRV record:"
dig @localhost -p 8600 "$1.service.consul" SRV
'''
tools = { "consul" = "1.21.4" }

# KV Store Operations
[tasks."kv:list"]
description = "List Consul KV store keys (usage: mise run kv:list -- [prefix])"
run = '''
prefix=${1:-""}
echo "üóÇÔ∏è  Consul KV Keys: $prefix"
echo "=========================="
consul kv get -recurse -keys "$prefix" | sort
'''
tools = { "consul" = "1.21.4" }

[tasks."kv:get"]
description = "Get Consul KV value (usage: mise run kv:get -- <key>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run kv:get -- <key>"
  echo "Common keys in your setup:"
  echo "  pdns/db/host"
  echo "  pdns/db/port"
  echo "  pdns/db/name"
  exit 1
fi
echo "üîë KV Value for: $1"
echo "==================="
consul kv get "$1"
'''
tools = { "consul" = "1.21.4" }

[tasks."kv:put"]
description = "Set Consul KV value (usage: mise run kv:put -- <key> <value>)"
run = '''
if [ -z "$1" ] || [ -z "$2" ]; then
  echo "Usage: mise run kv:put -- <key> <value>"
  echo "Example: mise run kv:put -- pdns/db/host postgres.service.consul"
  exit 1
fi
echo "üìù Setting KV: $1 = $2"
consul kv put "$1" "$2"
'''
tools = { "consul" = "1.21.4" }

[tasks."kv:setup-powerdns"]
description = "Setup PowerDNS KV configuration"
run = '''
echo "üîß Setting up PowerDNS KV configuration..."
consul kv put pdns/db/host "postgres.service.consul"
consul kv put pdns/db/port "5432"
consul kv put pdns/db/name "powerdns"
consul kv put pdns/db/user "pdns"
echo "‚úÖ PowerDNS KV configuration complete"
echo ""
echo "üìã Current values:"
mise run kv:list -- pdns/
'''
tools = { "consul" = "1.21.4" }

# Health & Debugging
[tasks."checks:consul"]
description = "Show all health checks"
run = '''
echo "üè• All Health Checks:"
echo "====================="
consul catalog services | while read service; do
  echo "Service: $service"
  consul health checks "$service" | head -10
  echo ""
done
'''
tools = { "consul" = "1.21.4" }

[tasks."logs:consul"]
description = "Follow Consul logs (if running via systemd)"
run = '''
echo "üìù Consul Logs:"
echo "==============="
if command -v journalctl >/dev/null; then
  sudo journalctl -u consul -f --no-pager
else
  echo "‚ö†Ô∏è  journalctl not available. Check your Consul logs manually."
  echo "Common locations:"
  echo "  - /var/log/consul/"
  echo "  - /opt/consul/logs/"
  echo "  - Docker: docker logs <consul-container>"
fi
'''
tools = { "consul" = "1.21.4" }

[tasks."debug:consul"]
description = "Debug Consul connectivity and configuration"
run = '''
echo "üîç Consul Debug Information:"
echo "============================"
echo "1. Connection Test:"
consul members 2>/dev/null && echo "‚úÖ Consul connection OK" || echo "‚ùå Consul connection failed"
echo ""
echo "2. Agent Info:"
consul info | grep -E "(Version|Datacenter|Server)"
echo ""
echo "3. DNS Test:"
dig @localhost -p 8600 consul.service.consul +short 2>/dev/null && echo "‚úÖ Consul DNS OK" || echo "‚ùå Consul DNS failed"
echo ""
echo "4. Environment:"
echo "CONSUL_HTTP_ADDR: ${CONSUL_HTTP_ADDR:-not set}"
echo "CONSUL_HTTP_TOKEN: ${CONSUL_HTTP_TOKEN:+***set***}"
echo ""
echo "5. Critical Services:"
for svc in traefik postgres powerdns-auth consul; do
  if consul catalog service "$svc" >/dev/null 2>&1; then
    echo "‚úÖ $svc registered"
  else
    echo "‚ùå $svc not found"
  fi
done
'''
tools = { "consul" = "1.21.4" }

# Integration with your infrastructure
[tasks."nomad-services:consul"]
description = "Show services registered by Nomad"
run = '''
echo "üéØ Nomad-Registered Services:"
echo "============================="
consul catalog services -tags | grep -E "(traefik|postgres|powerdns)" | while read service; do
  echo "Service: $service"
  consul catalog service "$service" | jq -r ".[] | \"  Node: \\(.Node) Port: \\(.ServicePort) Tags: \\(.ServiceTags | join(\",\"))\""
  echo ""
done
'''
tools = { "consul" = "1.21.4", "jq" = "latest" }

[tasks."traefik-services:consul"]
description = "Show services configured for Traefik"
run = '''
echo "üö¶ Traefik-Enabled Services:"
echo "============================"
consul catalog services | while read service; do
  tags=$(consul catalog service "$service" | jq -r ".[0].ServiceTags[]?" 2>/dev/null | grep "traefik" || true)
  if [ -n "$tags" ]; then
    echo "Service: $service"
    echo "Traefik tags:"
    echo "$tags" | sed "s/^/  /"
    echo ""
  fi
done
'''
tools = { "consul" = "1.21.4", "jq" = "latest" }

# Maintenance
[tasks."backup:consul"]
description = "Backup Consul data (KV store)"
run = '''
backup_dir="backups/consul/$(date +%Y%m%d-%H%M%S)"
mkdir -p "$backup_dir"
echo "üíæ Backing up Consul data to: $backup_dir"
echo "======================================"
consul snapshot save "$backup_dir/consul-snapshot.snap"
consul kv export > "$backup_dir/kv-export.json"
echo "‚úÖ Backup complete"
ls -la "$backup_dir"
'''
tools = { "consul" = "1.21.4" }

[tasks."cleanup:consul"]
description = "Clean up deregistered services and checks"
run = '''
echo "üßπ Consul Cleanup:"
echo "=================="
echo "Deregistered services will be cleaned automatically by Consul"
echo "Manual cleanup options:"
echo "1. Force leave dead nodes:"
echo "   consul force-leave <node-name>"
echo ""
echo "2. Current dead nodes:"
consul members | grep "left\|failed" || echo "No dead nodes found"
'''
tools = { "consul" = "1.21.4" }

# Combined tasks
[tasks."ci:consul"]
description = "Run Consul health checks and validation"
run = '''
echo "üîß Running Consul CI checks..."
mise run validate:consul
mise run health:consul
echo "‚úÖ Consul CI checks complete!"
'''
depends = ["validate:consul", "health:consul"]

[tasks."dashboard:consul"]
description = "Open Consul UI (if available)"
run = '''
consul_ui="http://localhost:8500"
echo "üåê Opening Consul UI: $consul_ui"
if command -v open >/dev/null; then
  open "$consul_ui"
elif command -v xdg-open >/dev/null; then
  xdg-open "$consul_ui"
else
  echo "Please open: $consul_ui"
fi
'''
tools = { "consul" = "1.21.4" }

# ============================================================================
# VAULT
# ============================================================================
# Vault Development Tasks

# Cluster Status & Health
[tasks."status:vault"]
description = "Show Vault cluster status"
run = '''
echo "üîê Vault Cluster Status:"
echo "========================"
vault status
echo ""
echo "üîë Auth Methods:"
echo "================"
vault auth list
echo ""
echo "üéØ Secret Engines:"
echo "=================="
vault secrets list
'''
tools = { "vault" = "1.20.2" }

[tasks."health:vault"]
description = "Check Vault health and seal status"
run = '''
echo "üè• Vault Health Check:"
echo "======================"
if vault status >/dev/null 2>&1; then
  echo "‚úÖ Vault is reachable"
  sealed=$(vault status -format=json | jq -r .sealed)
  if [ "$sealed" = "false" ]; then
    echo "‚úÖ Vault is unsealed"
  else
    echo "‚ùå Vault is sealed"
  fi
else
  echo "‚ùå Cannot reach Vault"
  exit 1
fi
echo ""
echo "üìä Vault System Health:"
vault read sys/health -format=json | jq .
'''
tools = { "vault" = "1.20.2", "jq" = "latest" }

[tasks."unseal:vault"]
description = "Unseal Vault (interactive)"
run = '''
echo "üîì Unsealing Vault:"
echo "==================="
if vault status | grep -q "Sealed.*false"; then
  echo "‚úÖ Vault is already unsealed"
else
  echo "üîë Please provide unseal key:"
  vault operator unseal
fi
'''
tools = { "vault" = "1.20.2" }

# Authentication
[tasks."auth:vault"]
description = "Authenticate to Vault (interactive)"
run = '''
echo "üîê Vault Authentication:"
echo "========================"
echo "Current token info:"
vault token lookup 2>/dev/null || echo "No valid token"
echo ""
echo "Available auth methods:"
vault auth list
echo ""
echo "üí° Login examples:"
echo "  vault login                    # Token auth"
echo "  vault login -method=userpass  # Username/password"
echo "  vault login -method=oidc      # OIDC/SSO"
'''
tools = { "vault" = "1.20.2" }

[tasks."token:vault"]
description = "Show current token information"
run = '''
echo "üé´ Current Token Information:"
echo "============================="
vault token lookup
'''
tools = { "vault" = "1.20.2" }

# Secret Management (KV v2)
[tasks."secrets:list"]
description = "List secrets in KV store (usage: mise run secrets:list -- [path])"
run = '''
path=${1:-""}
echo "üóÇÔ∏è  Vault Secrets: $path"
echo "======================="
vault kv list "secret/$path" 2>/dev/null || vault kv list "$path" 2>/dev/null || echo "No secrets found or insufficient permissions"
'''
tools = { "vault" = "1.20.2" }

[tasks."secret:get"]
description = "Get secret from KV store (usage: mise run secret:get -- <path>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run secret:get -- <path>"
  echo "Examples:"
  echo "  mise run secret:get -- pdns"
  echo "  mise run secret:get -- database/postgres"
  exit 1
fi
echo "üîë Secret: $1"
echo "=============="
vault kv get "secret/$1" 2>/dev/null || vault kv get "$1"
'''
tools = { "vault" = "1.20.2" }

[tasks."secret:put"]
description = "Store secret in KV store (usage: mise run secret:put -- <path> key=value [key2=value2...])"
run = '''
if [ $# -lt 2 ]; then
  echo "Usage: mise run secret:put -- <path> key=value [key2=value2...]"
  echo "Examples:"
  echo "  mise run secret:put -- pdns db_password=secret123 api_key=abc123"
  echo "  mise run secret:put -- database/postgres password=supersecret"
  exit 1
fi
path=$1
shift
echo "üìù Storing secret: $path"
vault kv put "secret/$path" "$@"
'''
tools = { "vault" = "1.20.2" }

[tasks."secret:delete"]
description = "Delete secret from KV store (usage: mise run secret:delete -- <path>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run secret:delete -- <path>"
  echo "‚ö†Ô∏è  This will permanently delete the secret!"
  exit 1
fi
echo "üóëÔ∏è  Deleting secret: $1"
echo "Are you sure? (y/N)"
read -r confirm
if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
  vault kv delete "secret/$1"
  echo "‚úÖ Secret deleted"
else
  echo "‚ùå Cancelled"
fi
'''
tools = { "vault" = "1.20.2" }

# Database Secrets Engine (PowerDNS Integration)
[tasks."db:status"]
description = "Show database secrets engine status"
run = '''
echo "üóÑÔ∏è  Database Secrets Engine:"
echo "============================="
echo "Configurations:"
vault list database/config/ 2>/dev/null || echo "No database configs found"
echo ""
echo "Roles:"
vault list database/roles/ 2>/dev/null || echo "No database roles found"
echo ""
echo "Active leases:"
vault list sys/leases/lookup/database/creds/ 2>/dev/null || echo "No active leases"
'''
tools = { "vault" = "1.20.2" }

[tasks."db:config"]
description = "Show database connection configuration (usage: mise run db:config -- <name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run db:config -- <config-name>"
  echo "Available configs:"
  vault list database/config/
  exit 1
fi
echo "üîß Database Config: $1"
echo "======================"
vault read "database/config/$1"
'''
tools = { "vault" = "1.20.2" }

[tasks."db:role"]
description = "Show database role configuration (usage: mise run db:role -- <role-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run db:role -- <role-name>"
  echo "Available roles:"
  vault list database/roles/
  exit 1
fi
echo "üë§ Database Role: $1"
echo "===================="
vault read "database/roles/$1"
'''
tools = { "vault" = "1.20.2" }

[tasks."db:creds"]
description = "Generate database credentials (usage: mise run db:creds -- <role-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run db:creds -- <role-name>"
  echo "Available roles:"
  vault list database/roles/
  exit 1
fi
echo "üîë Generating credentials for role: $1"
echo "======================================"
vault read "database/creds/$1"
'''
tools = { "vault" = "1.20.2" }

[tasks."db:setup-powerdns"]
description = "Setup PowerDNS database secrets engine"
run = '''
echo "üîß Setting up PowerDNS Database Secrets Engine..."
echo "=================================================="

# Get PostgreSQL connection details from user
echo "Please provide PostgreSQL connection details:"
read -p "PostgreSQL host (default: postgres.service.consul): " pghost
read -p "PostgreSQL port (default: 5432): " pgport
pghost=${pghost:-postgres.service.consul}
pgport=${pgport:-5432}

echo ""
echo "Creating database configuration..."
vault write database/config/powerdns-database \
  plugin_name="postgresql-database-plugin" \
  allowed_roles="powerdns-role" \
  connection_url="postgresql://{{username}}:{{password}}@$pghost:$pgport/powerdns" \
  username="vaultuser" \
  password="vaultpass" \
  password_authentication="scram-sha-256"

echo ""
echo "Creating PowerDNS role..."
vault write database/roles/powerdns-role \
  db_name="powerdns-database" \
  creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD ''{{password}}'' VALID UNTIL ''{{expiration}}''; \
    GRANT USAGE ON SCHEMA public TO \"{{name}}\"; \
    GRANT SELECT, INSERT, UPDATE, DELETE ON domains, records, supermasters, comments, domainmetadata, cryptokeys, tsigkeys TO \"{{name}}\"; \
    GRANT SELECT, USAGE ON domains_id_seq, records_id_seq, comments_id_seq, domainmetadata_id_seq, cryptokeys_id_seq, tsigkeys_id_seq TO \"{{name}}\";" \
  default_ttl="1h" \
  max_ttl="24h"

echo ""
echo "‚úÖ PowerDNS database secrets engine setup complete!"
echo ""
echo "Test with: mise run db:creds -- powerdns-role"
'''
tools = { "vault" = "1.20.2" }

# Policies
[tasks."policies:vault"]
description = "List Vault policies"
run = '''
echo "üìã Vault Policies:"
echo "=================="
vault policy list
'''
tools = { "vault" = "1.20.2" }

[tasks."policy:vault"]
description = "Show specific policy (usage: mise run policy:vault -- <policy-name>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run policy:vault -- <policy-name>"
  echo "Available policies:"
  vault policy list
  exit 1
fi
echo "üìã Policy: $1"
echo "============="
vault policy read "$1"
'''
tools = { "vault" = "1.20.2" }

# Leases Management
[tasks."leases:vault"]
description = "List active leases"
run = '''
echo "‚è∞ Active Vault Leases:"
echo "======================="
vault list sys/leases/lookup/ 2>/dev/null || echo "No active leases found"
echo ""
echo "Database leases:"
vault list sys/leases/lookup/database/creds/ 2>/dev/null || echo "No database leases"
'''
tools = { "vault" = "1.20.2" }

[tasks."lease:revoke"]
description = "Revoke specific lease (usage: mise run lease:revoke -- <lease-id>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run lease:revoke -- <lease-id>"
  echo "Active leases:"
  mise run leases:vault
  exit 1
fi
echo "üóëÔ∏è  Revoking lease: $1"
vault lease revoke "$1"
'''
tools = { "vault" = "1.20.2" }

[tasks."leases:revoke-prefix"]
description = "Revoke all leases with prefix (usage: mise run leases:revoke-prefix -- <prefix>)"
run = '''
if [ -z "$1" ]; then
  echo "Usage: mise run leases:revoke-prefix -- <prefix>"
  echo "Examples:"
  echo "  mise run leases:revoke-prefix -- database/creds/powerdns-role/"
  exit 1
fi
echo "üóëÔ∏è  Revoking all leases with prefix: $1"
echo "Are you sure? (y/N)"
read -r confirm
if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
  vault lease revoke -prefix "$1"
  echo "‚úÖ Leases revoked"
else
  echo "‚ùå Cancelled"
fi
'''
tools = { "vault" = "1.20.2" }

# Debugging & Maintenance
[tasks."debug:vault"]
description = "Debug Vault connectivity and configuration"
run = '''
echo "üîç Vault Debug Information:"
echo "==========================="
echo "1. Connection Test:"
vault status >/dev/null 2>&1 && echo "‚úÖ Vault connection OK" || echo "‚ùå Vault connection failed"
echo ""
echo "2. Seal Status:"
sealed=$(vault status -format=json 2>/dev/null | jq -r .sealed 2>/dev/null || echo "unknown")
echo "Sealed: $sealed"
echo ""
echo "3. Authentication:"
vault token lookup >/dev/null 2>&1 && echo "‚úÖ Valid token" || echo "‚ùå No valid token"
echo ""
echo "4. Environment:"
echo "VAULT_ADDR: ${VAULT_ADDR:-not set}"
echo "VAULT_TOKEN: ${VAULT_TOKEN:+***set***}"
echo "VAULT_NAMESPACE: ${VAULT_NAMESPACE:-not set}"
echo ""
echo "5. Critical Configurations:"
echo "Secret engines:"
vault secrets list -format=json 2>/dev/null | jq -r 'keys[]' | grep -E "(secret|database)" || echo "Cannot list secret engines"
echo ""
echo "Database configs:"
vault list database/config/ 2>/dev/null | grep -E "(powerdns|postgres)" || echo "No database configs found"
'''
tools = { "vault" = "1.20.2", "jq" = "latest" }

[tasks."logs:vault"]
description = "Show Vault logs (if running via systemd)"
run = '''
echo "üìù Vault Logs:"
echo "==============="
if command -v journalctl >/dev/null; then
  sudo journalctl -u vault -f --no-pager
else
  echo "‚ö†Ô∏è  journalctl not available. Check your Vault logs manually."
  echo "Common locations:"
  echo "  - /var/log/vault/"
  echo "  - /opt/vault/logs/"
  echo "  - Docker: docker logs <vault-container>"
fi
'''
tools = { "vault" = "1.20.2" }

# Backup & Restore
[tasks."backup:vault"]
description = "Backup Vault data (requires appropriate permissions)"
run = '''
backup_dir="backups/vault/$(date +%Y%m%d-%H%M%S)"
mkdir -p "$backup_dir"
echo "üíæ Backing up Vault data to: $backup_dir"
echo "==========================================="

echo "Backing up KV secrets..."
vault kv list -format=json secret/ 2>/dev/null | jq -r '.[]' | while read path; do
  echo "Backing up secret/$path"
  vault kv get -format=json "secret/$path" > "$backup_dir/secret-$(echo $path | tr '/' '-').json"
done

echo "Backing up policies..."
vault policy list | while read policy; do
  if [ "$policy" != "default" ] && [ "$policy" != "root" ]; then
    echo "Backing up policy: $policy"
    vault policy read "$policy" > "$backup_dir/policy-$policy.hcl"
  fi
done

echo "‚úÖ Backup complete"
ls -la "$backup_dir"
'''
tools = { "vault" = "1.20.2", "jq" = "latest" }

# Integration Tasks
[tasks."setup:vault-powerdns"]
description = "Complete PowerDNS Vault integration setup"
run = '''
echo "üîß Complete PowerDNS Vault Setup:"
echo "=================================="

echo "1. Setting up database secrets engine..."
mise run db:setup-powerdns

echo ""
echo "2. Creating PowerDNS secrets..."
echo "Please provide PowerDNS secrets:"
read -p "Database password for pdns user: " -s db_password
echo ""
read -p "PowerDNS API key: " api_key

vault kv put secret/pdns \
  db_password="$db_password" \
  api_key="$api_key"

echo ""
echo "‚úÖ PowerDNS Vault integration complete!"
echo ""
echo "Test database credentials:"
echo "  mise run db:creds -- powerdns-role"
echo ""
echo "View stored secrets:"
echo "  mise run secret:get -- pdns"
'''
tools = { "vault" = "1.20.2" }

[tasks."test:vault-integration"]
description = "Test Vault integration with infrastructure"
run = '''
echo "üß™ Testing Vault Integration:"
echo "============================="

echo "1. Testing KV secrets..."
if vault kv get secret/pdns >/dev/null 2>&1; then
  echo "‚úÖ PowerDNS secrets accessible"
else
  echo "‚ùå PowerDNS secrets not found"
fi

echo ""
echo "2. Testing database secrets engine..."
if vault read database/creds/powerdns-role >/dev/null 2>&1; then
  echo "‚úÖ PowerDNS database credentials can be generated"
else
  echo "‚ùå PowerDNS database role not working"
fi

echo ""
echo "3. Testing Consul integration..."
if vault kv get secret/consul >/dev/null 2>&1; then
  echo "‚úÖ Consul secrets found"
else
  echo "‚ö†Ô∏è  Consul secrets not configured"
fi

echo ""
echo "4. Testing Nomad integration..."
# This would test Nomad's ability to get secrets
echo "‚ÑπÔ∏è  Nomad integration test requires running job"
'''
tools = { "vault" = "1.20.2" }

# Combined tasks
[tasks."ci:vault"]
description = "Run Vault health checks"
run = '''
echo "üîß Running Vault CI checks..."
mise run health:vault
mise run debug:vault
echo "‚úÖ Vault CI checks complete!"
'''
depends = ["health:vault", "debug:vault"]

[tasks."dashboard:vault"]
description = "Open Vault UI (if available)"
run = '''
vault_ui="${VAULT_ADDR:-http://localhost:8200}/ui"
echo "üåê Opening Vault UI: $vault_ui"
if command -v open >/dev/null; then
  open "$vault_ui"
elif command -v xdg-open >/dev/null; then
  xdg-open "$vault_ui"
else
  echo "Please open: $vault_ui"
fi
'''
tools = { "vault" = "1.20.2" }

# ============================================================================
# HOOKS
# ============================================================================
[hooks]
enter = "echo 'Welcome to the Andromeda-Orchestration repository!'"
leave = "echo 'Goodbye!'"

[env]
_.file = ".env.json"
NOMAD_ADDR = "http://100.108.219.48:4646"
NOMAD_REGION = "global"
VAULT_ADDR = "http://100.108.219.48:8200"
CONSUL_HTTP_ADDR = "http://100.108.219.48:8500"
