# Mise configuration for Andromeda Orchestration
# Focused on: Development setup, Linting/Testing, and Cluster health checks
# For infrastructure operations, use Ansible playbooks directly

# ============================================================================
# TOOLS & ENVIRONMENT
# ============================================================================

[tools]
# Core Python/Ansible tools
python = "3.13.7"
uv = "0.8.13"
pre-commit = "4.3.0"

# Linting tools
ruff = "0.12.9"
markdownlint-cli2 = "0.18.1"
yamllint = "1.35.1"
# ansible-lint is installed via uv/pip, not mise

# Optional tools (comment out if not needed)
act = "0.2.80" # GitHub Actions local testing
jq = "latest"  # JSON processing

# HashiCorp CLIs for status checks only
consul = "1.21.4"
nomad = "1.10.4"
vault = "1.17.5"

[settings]
# Automatically activate uv-managed virtual environments
python.uv_venv_auto = true

[env]
# Default to local LAN environment (when at home)
NOMAD_REGION = "global"
NOMAD_ADDR = "http://192.168.11.11:4646"
CONSUL_HTTP_ADDR = "http://192.168.11.11:8500"
VAULT_ADDR = "http://192.168.10.31:8200"

# Ansible configuration
ANSIBLE_INVENTORY = "inventory/environments/doggos-homelab"  # Default to doggos-homelab environment
ANSIBLE_HOST_KEY_CHECKING = "False"
ANSIBLE_PYTHON_INTERPRETER = "auto_silent"

# To use Tailscale IPs when remote:
# Run: mise run env:remote
# Or manually override in .mise.local.toml

# ============================================================================
# SETUP - Development Environment Setup
# ============================================================================

[tasks.setup]
description = "Complete project setup with all dependencies"
run = '''
#!/usr/bin/env bash
set -euo pipefail

echo "üöÄ Starting Andromeda Orchestration Setup"
echo "========================================="
echo ""

# Step 1: Tool versions (mise handles installation automatically)
echo "üîç Step 1: Tool versions..."
echo "----------------------------"
echo "‚úÖ uv version: $(uv --version)"
echo "‚úÖ Python version: $(python --version)"

# Step 2: Create virtual environment
echo ""
echo "üêç Step 2: Setting up Python virtual environment..."
echo "--------------------------------------------------"
if [ ! -d ".venv" ]; then
  uv venv
  echo "‚úÖ Virtual environment created"
else
  echo "‚úÖ Virtual environment already exists"
fi

# Step 3: Install Python dependencies
echo ""
echo "üì¶ Step 3: Installing Python dependencies..."
echo "-------------------------------------------"
uv sync --extra dev --extra secrets || {
  echo "‚ö†Ô∏è  Some optional dependencies failed, continuing..."
}

# Step 4: Install Ansible collections
echo ""
echo "üìö Step 4: Installing Ansible collections..."
echo "-------------------------------------------"
uv run ansible-galaxy collection install -r requirements.yml --force

# Step 5: Setup pre-commit hooks
echo ""
echo "üîß Step 5: Setting up pre-commit hooks..."
echo "-----------------------------------------"
uv run pre-commit install
echo "‚úÖ Pre-commit hooks installed"

# Step 6: Setup Infisical secret scanning
echo ""
echo "üîê Step 6: Setting up Infisical secret scanning..."
echo "-------------------------------------------------"
if command -v infisical >/dev/null 2>&1; then
  infisical scan install --pre-commit-hook >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "‚úÖ Infisical pre-commit hook installed"
  else
    echo "‚ÑπÔ∏è  Infisical hook already installed"
  fi
else
  echo "‚ÑπÔ∏è  Skipping Infisical (not installed)"
  echo "   Install: brew install infisical/brew/infisical"
fi

# Step 7: Verification
echo ""
echo "üìã Step 7: Verification..."
echo "-------------------------"
echo "Python: $(uv run python --version)"
echo "Ansible: $(uv run ansible --version | head -1)"

# Check Infisical credentials
if [ -n "$INFISICAL_TOKEN" ] || [ -n "$INFISICAL_MACHINE_IDENTITY_CLIENT_ID" ]; then
  echo "‚úÖ Infisical credentials detected"
else
  echo "‚ÑπÔ∏è  Infisical credentials not configured"
fi

echo ""
echo "‚ú® Setup complete! You're ready to use the project."
echo ""
echo "Quick start commands:"
echo "  mise run status      # Check cluster health"
echo "  mise run lint        # Lint your code"
echo "  mise run test        # Run tests"
echo ""
echo "For more: mise tasks"
'''
tools = { "uv" = "0.8.13", "python" = "3.13.7" }

[tasks."setup:quick"]
description = "Quick setup - Python deps and Ansible collections only"
run = '''
echo "‚ö° Quick Setup (dependencies only)"
echo "=================================="

[ ! -d ".venv" ] && uv venv
uv sync --extra dev || echo "‚ö†Ô∏è  Some optional deps failed"
uv run ansible-galaxy collection install -r requirements.yml --force

echo "‚úÖ Quick setup complete!"
'''
tools = { "uv" = "0.8.13", "python" = "3.13.7" }

# ============================================================================
# ENVIRONMENT - Environment Configuration
# ============================================================================

[tasks."env:status"]
description = "Show current environment configuration"
run = '''
echo "üåç Current Environment Configuration"
echo "===================================="
echo ""
echo "Nomad:  ${NOMAD_ADDR}"
echo "Consul: ${CONSUL_HTTP_ADDR}"
echo "Vault:  ${VAULT_ADDR}"
echo ""
echo "Testing connectivity..."
echo "----------------------"

# Test Nomad
if nomad status &>/dev/null; then
  echo "‚úÖ Nomad:  Connected"
else
  echo "‚ùå Nomad:  Cannot connect"
fi

# Test Consul
if consul members &>/dev/null; then
  echo "‚úÖ Consul: Connected"
else
  echo "‚ùå Consul: Cannot connect"
fi

# Test Vault
if vault status &>/dev/null; then
  echo "‚úÖ Vault:  Connected"
else
  echo "‚ùå Vault:  Cannot connect"
fi
'''

[tasks."env:local"]
description = "Switch to local environment (LAN IPs)"
run = '''
echo "üè† Switching to LOCAL environment (LAN)"
echo "======================================="
cat > .mise.local.toml << 'EOF'
[env]
NOMAD_REGION = "global"
NOMAD_ADDR = "http://192.168.11.11:4646"
CONSUL_HTTP_ADDR = "http://192.168.11.11:8500"
VAULT_ADDR = "http://192.168.11.11:8200"
EOF
echo "‚úÖ Switched to local environment"
echo "   Run 'mise trust' to apply changes"
'''

[tasks."env:remote"]
description = "Switch to remote environment (Tailscale IPs)"
run = '''
echo "üåê Switching to REMOTE environment (Tailscale)"
echo "=============================================="
cat > .mise.local.toml << 'EOF'
# Using Tailscale environment
# Comment out the [env] section to use defaults from main .mise.toml
#[env]
EOF
echo "‚úÖ Switched to remote environment (using defaults)"
echo "   Run 'mise trust' to apply changes"
'''

# ============================================================================
# STATUS - Cluster Health Checks
# ============================================================================

[tasks.status]
description = "Check health of all clusters"
depends = ["status:consul", "status:nomad", "status:vault"]

[tasks."status:consul"]
description = "Check Consul cluster health"
run = '''
echo "üè• Consul Health Check"
echo "======================"
echo ""

# Check connectivity
if ! consul info &>/dev/null; then
  echo "‚ùå Cannot connect to Consul at ${CONSUL_HTTP_ADDR}"
  exit 1
fi

# Check for leader
if consul info 2>/dev/null | grep -q "leader = true"; then
  echo "‚úÖ Consul cluster has a leader"
else
  echo "‚ö†Ô∏è  Consul cluster has no leader!"
fi

# Show members
echo ""
echo "Cluster members:"
consul members 2>/dev/null | head -10 || echo "Error getting members"

# Show basic stats
echo ""
echo "Services registered:"
consul catalog services 2>/dev/null | wc -l || echo "0"
'''

[tasks."status:nomad"]
description = "Check Nomad cluster health"
run = '''
echo "üè• Nomad Health Check"
echo "====================="
echo ""

# Check connectivity
if ! nomad status &>/dev/null; then
  echo "‚ùå Cannot connect to Nomad at ${NOMAD_ADDR}"
  exit 1
fi

# Check for leader
if nomad server members 2>/dev/null | grep -q "leader=true"; then
  echo "‚úÖ Nomad cluster has a leader"
else
  echo "‚ö†Ô∏è  Nomad cluster has no leader!"
fi

# Show server members
echo ""
echo "Server members:"
nomad server members 2>/dev/null || echo "Error getting members"

# Show running jobs
echo ""
echo "Running jobs:"
nomad status 2>/dev/null | grep -c "running" || echo "0"
'''

[tasks."status:vault"]
description = "Check Vault cluster health"
run = '''
echo "üè• Vault Health Check"
echo "===================="
echo ""

# Check connectivity and seal status
if ! vault status &>/dev/null; then
  if [ $? -eq 2 ]; then
    echo "‚ö†Ô∏è  Vault is SEALED at ${VAULT_ADDR}"
    vault status 2>&1 | grep -E "Sealed|Version" || true
  else
    echo "‚ùå Cannot connect to Vault at ${VAULT_ADDR}"
  fi
  exit 1
fi

echo "‚úÖ Vault is unsealed and operational"
vault status 2>/dev/null | grep -E "Version|Sealed|Cluster" || true
'''

# ============================================================================
# LINTING - Code Quality Checks
# ============================================================================

[tasks.lint]
description = "Run all linters"
depends = ["lint:ansible", "lint:python", "lint:yaml", "lint:markdown"]

[tasks."lint:ansible"]
description = "Lint Ansible playbooks and roles"
run = '''
echo "üîç Linting Ansible files..."
uv run ansible-lint
'''

[tasks."lint:python"]
description = "Lint Python code"
run = '''
echo "üîç Linting Python files..."
uv run ruff check .
'''
tools = { "ruff" = "0.12.9" }

[tasks."lint:yaml"]
description = "Lint YAML files"
run = '''
echo "üîç Linting YAML files..."
yamllint -c .yamllint .
'''
tools = { "yamllint" = "1.35.1" }

[tasks."lint:markdown"]
description = "Lint Markdown files"
run = '''
echo "üîç Linting Markdown files..."
markdownlint-cli2 "**/*.md" "#.venv"
'''
tools = { "markdownlint-cli2" = "0.18.1" }

# ============================================================================
# TESTING - Test Execution
# ============================================================================

[tasks.test]
description = "Run all tests"
run = '''
echo "üß™ Running all tests..."
uv run pytest tests/ -v
'''

[tasks."test:syntax"]
description = "Check Ansible playbook syntax"
run = '''
echo "üîç Checking Ansible syntax..."
for playbook in playbooks/**/*.yml; do
  echo "Checking: $playbook"
  uv run ansible-playbook --syntax-check "$playbook" || exit 1
done
echo "‚úÖ All playbooks have valid syntax"
'''

# ============================================================================
# SECURITY - Security Scanning
# ============================================================================

[tasks.security]
description = "Run all security scans"
depends = ["security:secrets", "security:kics"]

[tasks."security:secrets"]
description = "Scan for exposed secrets"
run = '''
echo "üîç Scanning for exposed secrets..."
if [ -f "./scripts/scan-secrets.sh" ]; then
  ./scripts/scan-secrets.sh full
else
  infisical scan --source . --verbose
fi
'''

[tasks."security:kics"]
description = "Run KICS infrastructure security scan"
run = '''
echo "üîç Running KICS security scan..."
mkdir -p kics-results
docker run -t -v "$(pwd)":/path checkmarx/kics:latest scan \
  -p /path \
  --config /path/kics.config \
  -o /path/kics-results
echo "Results saved to kics-results/"
'''

# ============================================================================
# UTILITIES - Helper Tasks
# ============================================================================

[tasks.clean]
description = "Remove generated files and caches"
run = '''
echo "üßπ Cleaning up..."
find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
find . -type f -name "*.pyc" -delete 2>/dev/null || true
rm -rf .ruff_cache .mypy_cache 2>/dev/null || true
echo "‚úÖ Cleaned up generated files and caches"
'''

[tasks.pm-status]
description = "Check PM documentation freshness and health"
run = '''
echo "üìä Project Management Health Check"
echo "=================================="
echo ""
echo "üìÖ Last Updated:"
echo "  ROADMAP.md: $(git log -1 --format='%ar (%ad)' --date=short ROADMAP.md 2>/dev/null || echo 'Not tracked')"
echo "  Current Sprint: $(git log -1 --format='%ar (%ad)' --date=short docs/project-management/current-sprint.md 2>/dev/null || echo 'Not tracked')"
echo ""
echo "üìù Recent Decisions:"
ls -lt docs/project-management/decisions/*.md 2>/dev/null | grep -v TEMPLATE | head -3 | while read -r line; do
  file=$(echo "$line" | awk '{print $NF}')
  basename "$file" .md
done || echo "  No ADRs found"
echo ""
echo "‚ö†Ô∏è  Potentially Stale Files (>7 days old):"
find docs/project-management -name "*.md" -mtime +7 -not -path "*/archive/*" -not -path "*/completed/*" 2>/dev/null | while read -r file; do
  echo "  - $(basename "$file"): $(git log -1 --format='%ar' "$file" 2>/dev/null || echo 'untracked')"
done || echo "  All files are fresh!"
echo ""
echo "üìä Sprint Progress:"
if [ -f "docs/project-management/current-sprint.md" ]; then
  completed=$(grep -c "‚úÖ" docs/project-management/current-sprint.md 2>/dev/null || echo 0)
  in_progress=$(grep -c "üöß\|In Progress" docs/project-management/current-sprint.md 2>/dev/null || echo 0)
  blocked=$(grep -c "‚õî\|Blocked" docs/project-management/current-sprint.md 2>/dev/null || echo 0)
  echo "  Completed: $completed | In Progress: $in_progress | Blocked: $blocked"
else
  echo "  No current sprint file found"
fi
echo ""
echo "üí° Tip: Run 'mise run pm-status' weekly to keep PM docs fresh!"
'''

[tasks.help]
description = "Show how to use Ansible for operations"
run = '''
echo "üöÄ Andromeda Orchestration - Quick Reference"
echo "==========================================="
echo ""
echo "MISE COMMANDS (Development & Status)"
echo "------------------------------------"
echo "  mise run setup          # Setup development environment"
echo "  mise run status         # Check cluster health"
echo "  mise run pm-status      # Check PM documentation health"
echo "  mise run lint           # Lint code"
echo "  mise run test           # Run tests"
echo "  mise run security       # Security scanning"
echo ""
echo "ANSIBLE OPERATIONS (Infrastructure Management)"
echo "----------------------------------------------"
echo "Deploy services:"
echo "  uv run ansible-playbook playbooks/infrastructure/nomad/deploy-job.yml -e job=traefik"
echo ""
echo "Manage Consul:"
echo "  uv run ansible-playbook playbooks/infrastructure/consul/service-register.yml"
echo ""
echo "Manage Vault:"
echo "  uv run ansible-playbook playbooks/infrastructure/vault/manage-secrets.yml"
echo "  uv run ansible-playbook playbooks/infrastructure/vault/unseal-vault.yml"
echo ""
echo "Assessment:"
echo "  uv run ansible-playbook playbooks/assessment/infrastructure-readiness.yml"
echo ""
echo "Note: Inventory auto-configured via ANSIBLE_INVENTORY environment variable"
'''

# ============================================================================
# INVENTORY - Inventory Management Tasks
# ============================================================================

[tasks."inventory:doggos"]
description = "Use doggos-homelab inventory"
run = '''
echo "üéØ Switching to doggos-homelab inventory"
echo "export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab'"
echo "Or use:  -i inventory/environments/doggos-homelab"
'''

[tasks."inventory:og"]
description = "Use og-homelab inventory"
run = '''
echo "üéØ Switching to og-homelab inventory"
echo "export ANSIBLE_INVENTORY='inventory/environments/og-homelab'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/environments/og-homelab'"
echo "Or use:  -i inventory/environments/og-homelab"
'''

[tasks."inventory:netbox"]
description = "Use NetBox dynamic inventory"
run = '''
echo "üåê Switching to NetBox inventory"
echo "export ANSIBLE_INVENTORY='inventory/dynamic/netbox.yml'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/dynamic/netbox.yml'"
echo "Or use:  -i inventory/dynamic/netbox.yml"
echo ""
echo "Note: Requires Infisical authentication (uses infisical.vault lookup)"
'''

[tasks."inventory:combined"]
description = "Use multiple inventories (Proxmox + NetBox)"
run = '''
echo "üîó Using combined inventories"
echo "export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab:inventory/dynamic/netbox.yml'"
echo ""
echo "To apply: export ANSIBLE_INVENTORY='inventory/environments/doggos-homelab:inventory/dynamic/netbox.yml'"
echo "Or use:  -i inventory/environments/doggos-homelab -i inventory/dynamic/netbox.yml"
'''

[tasks."inventory:list"]
description = "List available inventory sources"
run = '''
echo "üìã Available Inventory Sources"
echo "=============================="
echo ""
echo "Environments:"
echo "  ‚Ä¢ doggos-homelab - Primary homelab (Proxmox)"
echo "  ‚Ä¢ og-homelab     - Original homelab (Proxmox)"  
echo "  ‚Ä¢ vault-cluster  - Dedicated Vault cluster"
echo ""
echo "Dynamic Sources:"
echo "  ‚Ä¢ netbox         - NetBox IPAM (with caching)"
echo "  ‚Ä¢ tailscale      - Tailscale network inventory"
echo ""
echo "Current setting: $ANSIBLE_INVENTORY"
'''

# Note: Git hooks are handled by pre-commit framework
# Run 'mise run setup' to install pre-commit hooks
