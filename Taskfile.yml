version: '3'

# NOTE: We use 'uv run' with a virtual environment (not 'uv tool') to ensure
# all Ansible executables are available. See docs/getting-started/uv-ansible-notes.md

tasks:
  default:
    desc: Show available tasks
    cmd: task --list

  setup:
    desc: Complete project setup (venv, deps, pre-commit)
    cmds:
      - echo "Setting up NetBox Ansible project..."
      - |
        if command -v uv >/dev/null 2>&1; then
          echo "Using uv for Python environment..."
          uv venv
          source .venv/bin/activate && uv pip install -e ".[dev]"
        else
          echo "Using pip for Python environment..."
          python3 -m venv .venv
          source .venv/bin/activate && pip install -e ".[dev]"
        fi
      - uv run ansible-galaxy collection install -r requirements.yml
      - uv run pre-commit install
      - echo "Setup complete! Activate your environment with':' source .venv/bin/activate"

  lint:
    desc: Run all linters
    cmds:
      - task: lint:yaml
      - task: lint:ansible
      - task: lint:python
      - task: lint:markdown

  lint:yaml:
    desc: Run yamllint
    cmd: uv run yamllint .

  lint:ansible:
    desc: Run ansible-lint
    cmd: uv run ansible-lint

  lint:python:
    desc: Run Python linters
    cmds:
      - uv run ruff check plugins scripts tests
      - uv run mypy plugins scripts || true

  lint:markdown:
    desc: Run markdownlint on all markdown files
    cmd: |
      if command -v markdownlint-cli2 >/dev/null 2>&1; then
        markdownlint-cli2
      elif command -v markdownlint >/dev/null 2>&1; then
        markdownlint "**/*.md"
      else
        echo "markdownlint not found. Install with: npm install -g markdownlint-cli2"
        exit 1
      fi

  fix:
    desc: Auto-fix linting issues where possible
    cmds:
      - uv run ruff check --fix plugins scripts tests
      - uv run ruff format plugins scripts tests
      - uv run ansible-lint --fix || true
      - task: fix:markdown

  fix:markdown:
    desc: Auto-fix markdown linting issues
    cmd: |
      if command -v markdownlint-cli2 >/dev/null 2>&1; then
        markdownlint-cli2 --fix
      elif command -v markdownlint >/dev/null 2>&1; then
        markdownlint --fix "**/*.md"
      else
        echo "markdownlint not found. Install with: npm install -g markdownlint-cli2"
        exit 1
      fi

  test:
    desc: Run all tests
    cmds:
      - task: test:syntax
      - task: test:python
      - task: test:roles

  test:syntax:
    desc: Check playbook syntax
    cmd: |
      echo "Checking playbook syntax..."
      fd -e yml . playbooks -x sh -c 'echo "  Checking: {}" && uv run ansible-playbook {} --syntax-check 2>&1 | grep -v "WARNING" | grep -v "DEPRECATION" || true'
      echo "Syntax check complete!"

  test:python:
    desc: Run Python tests
    cmd: |
      if [ -d "tests" ] && [ -n "$(fd -e py '^test_' tests 2>/dev/null)" ]; then
        uv run pytest tests/
      else
        echo "No Python tests found - consider adding tests for custom modules"
        echo "Modules needing tests:"
        ls plugins/modules/*.py 2>/dev/null | head -5 | sed 's/^/  - /'
      fi

  test:roles:
    desc: Test Ansible roles with molecule (if configured)
    cmd: |
      if command -v molecule >/dev/null 2>&1; then
        echo "Testing roles with molecule..."
        for role in roles/*/; do
          if [ -d "$role/molecule" ]; then
            echo "Testing role: $(basename $role)"
            cd "$role" && uv run molecule test
          fi
        done
      else
        echo "Molecule not configured - skipping role tests"
        echo "Roles that could have tests:"
        ls -d roles/*/ 2>/dev/null | head -5 | sed 's/^/  - /'
      fi

  test:quick:
    desc: Quick smoke test (syntax only, no inventory)
    cmd: |
      echo "Running quick smoke tests..."
      # Test that a simple playbook can be parsed
      echo "---
      - name: Smoke test
        hosts: localhost
        gather_facts: no
        tasks:
          - name: Test task
            debug:
              msg: 'Smoke test passed'" | uv run ansible-playbook --syntax-check /dev/stdin
      echo "✅ Ansible is working correctly"

      # Test that custom modules exist
      echo "Testing custom modules exist..."
      if [ -f "plugins/modules/consul_acl_token.py" ] && [ -f "plugins/modules/nomad_job.py" ]; then
        echo "✅ Custom modules found"
      else
        echo "❌ Custom modules not found"
        exit 1
      fi

  test:integration:
    desc: Run integration tests (requires infrastructure)
    cmd: |
      echo "Integration tests require infrastructure access"
      echo "Run with: task test:integration:run"
      echo ""
      echo "Available integration tests:"
      echo "  - test:integration:consul    Test Consul connectivity"
      echo "  - test:integration:nomad     Test Nomad connectivity"
      echo "  - test:integration:vault     Test Vault connectivity"

  test:integration:consul:
    desc: Test Consul connectivity
    cmd: |
      if command -v consul >/dev/null 2>&1; then
        consul members 2>/dev/null && echo "✅ Consul is accessible" || echo "❌ Consul connection failed"
      else
        echo "Consul CLI not installed"
      fi

  test:integration:nomad:
    desc: Test Nomad connectivity
    cmd: |
      if command -v nomad >/dev/null 2>&1; then
        nomad status 2>/dev/null && echo "✅ Nomad is accessible" || echo "❌ Nomad connection failed"
      else
        echo "Nomad CLI not installed"
      fi

  test:integration:vault:
    desc: Test Vault connectivity
    cmd: |
      if command -v vault >/dev/null 2>&1; then
        vault status 2>/dev/null && echo "✅ Vault is accessible" || echo "❌ Vault connection failed"
      else
        echo "Vault CLI not installed"
      fi

  security:
    desc: Run all security scans
    cmds:
      - task: security:secrets
      - task: security:kics

  security:secrets:
    desc: Run Infisical secrets detection scan
    cmd: |
      echo "Running Infisical secrets scan..."
      ./scripts/scan-secrets.sh full
      echo "Infisical secrets scan complete!"

  security:kics:
    desc: Run KICS infrastructure security scan
    cmd: |
      echo "Running KICS security scan..."
      mkdir -p kics-results
      # Exclude non-source and prototype/debug paths to reduce noise in results
      # Paths are inside the container under /path
      docker run -t -v "$(pwd)":/path checkmarx/kics scan \
        -p /path \
        --exclude-paths \
        "/path/.venv/**,/path/kics-results/**,/path/docs/**,/path/playbooks/infrastructure/.debug/**,/path/playbooks/infrastructure/.archive/**"
      echo "KICS scan complete! Results saved to kics-results/"

  hooks:
    desc: Run all pre-commit hooks
    cmd: uv run pre-commit run --all-files

  clean:
    desc: Remove generated files and caches
    cmds:
      - fd -t d -H '^__pycache__$' . -x rm -rf {} || true
      - fd -e pyc . -x rm {} || true
      - fd -t d -H '^\.pytest_cache$' . -x rm -rf {} || true
      - fd -t d -H '^\.mypy_cache$' . -x rm -rf {} || true
      - fd -t d -H '^\.ruff_cache$' . -x rm -rf {} || true
      - fd -t d '\.egg-info$' . -x rm -rf {} || true
      - rm -rf build/ dist/
      - echo "Cleanup complete!"

  todos:
    desc: Find all TODO tags in documentation
    cmd: ./scripts/find-todos.sh

  tags:
    desc: Find all tags (TODO, FIXME, BUG, etc.) in code and documentation
    cmd: |
      if [ -n "${1:-}" ]; then
        ./scripts/find-tags.sh "$1"
      else
        ./scripts/find-tags.sh
      fi

  tags:all:
    desc: Find all tags across the project
    cmd: ./scripts/find-tags.sh

  tags:critical:
    desc: Find critical issues (SECURITY, FIXME, BUG)
    cmd: |
      echo "Searching for critical tags..."
      for tag in SECURITY FIXME BUG; do
        echo ""
        echo "=== $tag tags ==="
        ./scripts/find-tags.sh "$tag" | grep -E "^[^=].*:" || echo "No $tag tags found"
      done

  lint:docs:
    desc: Lint only documentation markdown files
    cmd: |
      if command -v markdownlint-cli2 >/dev/null 2>&1; then
        markdownlint-cli2 "docs/**/*.md"
      elif command -v markdownlint >/dev/null 2>&1; then
        markdownlint "docs/**/*.md"
      else
        echo "markdownlint not found. Install with: npm install -g markdownlint-cli2"
        exit 1
      fi

  fix:docs:
    desc: Auto-fix markdown issues in documentation
    cmd: |
      if command -v markdownlint-cli2 >/dev/null 2>&1; then
        markdownlint-cli2 --fix "docs/**/*.md"
      elif command -v markdownlint >/dev/null 2>&1; then
        markdownlint --fix "docs/**/*.md"
      else
        echo "markdownlint not found. Install with: npm install -g markdownlint-cli2"
        exit 1
      fi
